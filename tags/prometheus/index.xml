<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>prometheus on zhangzw</title>
    <link>https://blog.k1s.club/tags/prometheus/</link>
    <description>Recent content in prometheus on zhangzw</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 16 May 2020 15:08:51 +0800</lastBuildDate><atom:link href="https://blog.k1s.club/tags/prometheus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prometheus 四大度量指标的了解和应用</title>
      <link>https://blog.k1s.club/posts.bak/prometheus/2020-05-16-metrics/</link>
      <pubDate>Sat, 16 May 2020 15:08:51 +0800</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/prometheus/2020-05-16-metrics/</guid>
      <description>在上一个章节中我们完成了 Prometheus 的基本概念了解和安装，由于考虑到看我博客的估计是开发向的小伙伴居多，因此没有再更深入。而今天本章节将介绍我们开发用的最多的度量指标，并结合实战对 Metrics 进行使用和细节分析。
什么是度量指标  来自维基百科
 度量是指对于一个物体或是事件的某个性质给予一个数字，使其可以和其他物体或是事件的相同性质比较。度量可以是对一物理量（如长度、尺寸或容量等）的估计或测定，也可以是其他较抽象的特质。
简单来讲，也就是数据的量化，形成对应的数据指标。
Prometheus 的指标格式 在 Prometheus 中，我们的指标表示格式如下：
&amp;lt;metric name&amp;gt;{&amp;lt;label name&amp;gt;=&amp;lt;label value&amp;gt;, ...} 主体为指标名称和标签组成：
api_http_requests_total{method=&amp;quot;POST&amp;quot;, handler=&amp;quot;/eddycjy&amp;quot;} 对外提供 metrics 服务 首先创建一个示例项目：
func main() { engine := gin.New() engine.GET(&amp;#34;/hello&amp;#34;, func(c *gin.Context) { c.String(http.StatusOK, &amp;#34;煎鱼&amp;#34;) }) engine.Run(&amp;#34;:10001&amp;#34;) } 接下我们需要安装 Prometheus Client SDK，在 Go 语言中对应 prometheus/client_golang 库：
$ go get github.com/prometheus/client_golang 然后调用 promhttp.Handler 方法创建对应的 metrics：
func main() { ... engine.GET(&amp;#34;/metrics&amp;#34;, gin.WrapH(promhttp.Handler())) engine.Run(&amp;#34;:10001&amp;#34;) } 重新启动程序，并访问 http://127.0.0.1:10001/metrics：
# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.</description>
    </item>
    
    <item>
      <title>Prometheus 快速入门</title>
      <link>https://blog.k1s.club/posts.bak/prometheus/2020-05-16-startup/</link>
      <pubDate>Sat, 16 May 2020 12:05:58 +0800</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/prometheus/2020-05-16-startup/</guid>
      <description>一般我们说 Prometheus，有两种理解，我们平时需要注意识别的，其含义有两种，一是指的 Prometheus 自身，是一个时序数据库；另外一种是指 Prometheus 生态圈，指的是是整体的监控报警的生态圈和解决方案（Prometheus+Grafana+Alertmanager）。
Prometheus 在 2016年加入了 CNCF（Cloud Native Computing Foundation），是继 Kubernetes 之后的第二个托管项目，目前已经毕业，其主要的特点如下：
 多维度的数据模型：由指标名称和键/值对标签标识的时间序列数据来组成多维的数据模型。 灵活的查询语言：在 Prometheus 中使用强大的查询语言 PromSQL 来进行查询。 不依赖分布式存储，Prometheus 单个节点也可以直接工作，支持本地存储（TSDB）和远程存储的模式。 服务端采集数据：Prometheus 基于 HTTP pull 方式去对不同的端采集时间序列数据。 客户端主动推送：支持通过 PushGateway 组件主动推送时间序列数据。  Prometheus 生态组件 Prometheus 生态由多个组件共同组成，其中许多组件是可根据实际情况选择的，并且绝大部分由 Go 语言编写，在部署和构建上比较方便，如下：
 Prometheus Server：Prometheus 服务端，用于收集指标和存储时间序列数据，并提供一系列的查询和设置接口。 Client Libraries：客户端库，用于帮助需要监控采集的服务暴露 metrics handler 给 Prometheus server。例如像 例子 中直接调用 promhttp 暴露了一个 metrics 接口。 Push Gateway：推送网关，Prometheus 服务端仅支持 HTTP pull 的采集方式，而有一些指存在的时间短，Prometheus 来 pull 前就结束了。又或是该类指标，就是要客户端自行上报的，这时候就可以采用 Push Gateway 的方式，客户端将指标 push 到 Push Gateway，再由 Prometheus Server 从 Pushgateway 上 pull。 Exporters：用于暴露已有的第三方服务（HAProxy，StatsD，Graphite）的 metrics 给 Prometheus Server。 Alertmanager：用于处理告警，从 Prometheus server 端接收到 alerts 后，会进行去重，分组，然后路由到对应的Receiver，发出报警。 Support Tools：各种支持工具。  Prometheus 整体流程图 Prometheus 的整体架构和生态组件组成，如下图所示：</description>
    </item>
    
  </channel>
</rss>
