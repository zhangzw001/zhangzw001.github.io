<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gin on zhangzw</title>
    <link>https://blog.k1s.club/tags/gin/</link>
    <description>Recent content in gin on zhangzw</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 01 Sep 2018 12:00:00 +0000</lastBuildDate><atom:link href="https://blog.k1s.club/tags/gin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「连载十七」用Nginx部署Go应用</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-09-01-nginx/</link>
      <pubDate>Sat, 01 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-09-01-nginx/</guid>
      <description>知识点  Nginx。 反向代理。  本文目标 简单部署后端服务。
做什么 在本章节，我们将简单介绍 Nginx 以及使用 Nginx 来完成对 go-gin-example 的部署，会实现反向代理和简单负载均衡的功能。
Nginx 是什么 Nginx 是一个 Web Server，可以用作反向代理、负载均衡、邮件代理、TCP / UDP、HTTP 服务器等等，它拥有很多吸引人的特性，例如：
 以较低的内存占用率处理 10,000 多个并发连接（每 10k 非活动 HTTP 保持活动连接约 2.5 MB ） 静态服务器（处理静态文件） 正向、反向代理 负载均衡 通过 OpenSSL 对 TLS / SSL 与 SNI 和 OCSP 支持 FastCGI、SCGI、uWSGI 的支持 WebSockets、HTTP/1.1 的支持 Nginx + Lua  安装 请右拐谷歌或百度，安装好 Nginx 以备接下来的使用
简单讲解 常用命令  nginx：启动 Nginx nginx -s stop：立刻停止 Nginx 服务 nginx -s reload：重新加载配置文件 nginx -s quit：平滑停止 Nginx 服务 nginx -t：测试配置文件是否正确 nginx -v：显示 Nginx 版本信息 nginx -V：显示 Nginx 版本信息、编译器和配置参数的信息  涉及配置 1、 proxy_pass：配置反向代理的路径。需要注意的是如果 proxy_pass 的 url 最后为 /，则表示绝对路径。否则（不含变量下）表示相对路径，所有的路径都会被代理过去</description>
    </item>
    
    <item>
      <title>「番外」请入门 Makefile</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-08-26-makefile/</link>
      <pubDate>Sun, 26 Aug 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-08-26-makefile/</guid>
      <description>知识点  写一个 Makefile  本文目标 含一定复杂度的软件工程，基本上都是先编译 A，再依赖 B，再编译 C&amp;hellip;，最后才执行构建。如果每次都人为编排，又或是每新来一个同事就问你项目 D 怎么构建、重新构建需要注意什么&amp;hellip;等等情况，岂不是要崩溃？
我们常常会在开源项目中发现 Makefile，你是否有过疑问？
本章节会简单介绍 Makefile 的使用方式，最后建议深入学习。
怎么解决 对于构建编排，Docker 有 Dockerfile ，在 Unix 中有神器 Make &amp;hellip;.
Make 是什么 Make 是一个构建自动化工具，会在当前目录下寻找 Makefile 或 makefile 文件。如果存在，会依据 Makefile 的构建规则去完成构建
当然了，实际上 Makefile 内都是你根据 make 语法规则，自己编写的特定 Shell 命令等
它是一个工具，规则也很简单。在支持的范围内，编译 A， 依赖 B，再编译 C，完全没问题
规则 Makefile 由多条规则组成，每条规则都以一个 target（目标）开头，后跟一个 : 冒号，冒号后是这一个目标的 prerequisites（前置条件）
紧接着新的一行，必须以一个 tab 作为开头，后面跟随 command（命令），也就是你希望这一个 target 所执行的构建命令
[target] ... : [prerequisites] ... &amp;lt;tab&amp;gt;[command] ... ...  target：一个目标代表一条规则，可以是一个或多个文件名。也可以是某个操作的名字（标签），称为伪目标（phony） prerequisites：前置条件，这一项是可选参数。通常是多个文件名、伪目标。它的作用是 target 是否需要重新构建的标准，如果前置条件不存在或有过更新（文件的最后一次修改时间）则认为 target 需要重新构建 command：构建这一个 target 的具体命令集  简单的例子 本文将以 go-gin-example 去编写 Makefile 文件，请跨入 make 的大门</description>
    </item>
    
    <item>
      <title>「连载十六」在图片上绘制文字</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-07-07-font/</link>
      <pubDate>Sat, 07 Jul 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-07-07-font/</guid>
      <description>知识点  字体库使用 图片合成  本文目标 主要实现合并后的海报上绘制文字的功能（这个需求也是常见的很了），内容比较简单。
实现 这里使用的是 微软雅黑 的字体，请点击进行下载并存放到 runtime/fonts 目录下（字体文件占 16 MB 大小）
安装 $ go get -u github.com/golang/freetype 绘制文字 打开 service/article_service/article_poster.go 文件，增加绘制文字的业务逻辑，如下：
type DrawText struct { JPG draw.Image Merged *os.File Title string X0 int Y0 int Size0 float64 SubTitle string X1 int Y1 int Size1 float64 } func (a *ArticlePosterBg) DrawPoster(d *DrawText, fontName string) error { fontSource := setting.AppSetting.RuntimeRootPath + setting.AppSetting.FontSavePath + fontName fontSourceBytes, err := ioutil.</description>
    </item>
    
    <item>
      <title>「连载十五」生成二维码、合并海报</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-07-05-image/</link>
      <pubDate>Thu, 05 Jul 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-07-05-image/</guid>
      <description>知识点  图片生成 二维码生成  本文目标 在文章的详情页中，我们常常会需要去宣传它，而目前最常见的就是发海报了，今天我们将实现如下功能：
  生成二维码
  合并海报（背景图 + 二维码）
  实现 首先，你需要在 App 配置项中增加二维码及其海报的存储路径，我们约定配置项名称为 QrCodeSavePath，值为 qrcode/，经过多节连载的你应该能够完成，若有不懂可参照 go-gin-example。
生成二维码 安装 $ go get -u github.com/boombuler/barcode 工具包 考虑生成二维码这一动作贴合工具包的定义，且有公用的可能性，新建 pkg/qrcode/qrcode.go 文件，写入内容：
package qrcode import ( &amp;#34;image/jpeg&amp;#34; &amp;#34;github.com/boombuler/barcode&amp;#34; &amp;#34;github.com/boombuler/barcode/qr&amp;#34; &amp;#34;github.com/EDDYCJY/go-gin-example/pkg/file&amp;#34; &amp;#34;github.com/EDDYCJY/go-gin-example/pkg/setting&amp;#34; &amp;#34;github.com/EDDYCJY/go-gin-example/pkg/util&amp;#34; ) type QrCode struct { URL string Width int Height int Ext string Level qr.ErrorCorrectionLevel Mode qr.Encoding } const ( EXT_JPG = &amp;#34;.jpg&amp;#34; ) func NewQrCode(url string, width, height int, level qr.</description>
    </item>
    
    <item>
      <title>「连载十四」实现导出、导入 Excel</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-06-14-excel/</link>
      <pubDate>Thu, 14 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-06-14-excel/</guid>
      <description>知识点  导出功能的实现  本文目标 在本节，我们将实现对标签信息的导出、导入功能，这是很标配功能了，希望你掌握基础的使用方式。
另外在本文我们使用了 2 个 Excel 的包，excelize 最初的 XML 格式文件的一些结构，是通过 tealeg/xlsx 格式文件结构演化而来的，因此特意在此都展示了，你可以根据自己的场景和喜爱去使用。
配置 首先要指定导出的 Excel 文件的存储路径，在 app.ini 中增加配置：
[app] ... ExportSavePath = export/ 修改 setting.go 的 App struct：
type App struct { JwtSecret string PageSize int PrefixUrl string RuntimeRootPath string ImageSavePath string ImageMaxSize int ImageAllowExts []string ExportSavePath string LogSavePath string LogSaveName string LogFileExt string TimeFormat string } 在这里需增加 ExportSavePath 配置项，另外将先前 ImagePrefixUrl 改为 PrefixUrl 用于支撑两者的 HOST 获取</description>
    </item>
    
    <item>
      <title>「连载十三」优化你的应用结构和实现Redis缓存</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-06-02-application-redis/</link>
      <pubDate>Sat, 02 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-06-02-application-redis/</guid>
      <description>前言 之前就在想，不少教程或示例的代码设计都是一步到位的（也没问题）
但实际操作的读者真的能够理解透彻为什么吗？左思右想，有了今天这一章的内容，我认为实际经历过一遍印象会更加深刻
本文目标 在本章节，将介绍以下功能的整理：
 抽离、分层业务逻辑：减轻 routers.go 内的 api 方法的逻辑（但本文暂不分层 repository，这块逻辑还不重）。 增加容错性：对 gorm 的错误进行判断。 Redis 缓存：对获取数据类的接口增加缓存设置。 减少重复冗余代码。  问题在哪？ 在规划阶段我们发现了一个问题，这是目前的伪代码：
if ! HasErrors() { if ExistArticleByID(id) { DeleteArticle(id) code = e.SUCCESS } else { code = e.ERROR_NOT_EXIST_ARTICLE } } else { for _, err := range valid.Errors { logging.Info(err.Key, err.Message) } } c.JSON(http.StatusOK, gin.H{ &amp;#34;code&amp;#34;: code, &amp;#34;msg&amp;#34;: e.GetMsg(code), &amp;#34;data&amp;#34;: make(map[string]string), }) 如果加上规划内的功能逻辑呢，伪代码会变成：
if ! HasErrors() { exists, err := ExistArticleByID(id) if err == nil { if exists { err = DeleteArticle(id) if err == nil { code = e.</description>
    </item>
    
    <item>
      <title>「连载十二」优化配置结构及实现图片上传</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-05-27-config-upload/</link>
      <pubDate>Sun, 27 May 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-05-27-config-upload/</guid>
      <description>知识点  重构、调整结构  本文目标 这个应用程序跑了那么久了，越来越大，越来越壮，仿佛我们的产品一样，现在它需要进行小范围重构了，以便于后续的使用，这非常重要。
前言 一天，产品经理突然跟你说文章列表，没有封面图，不够美观，！）&amp;amp;￥*！&amp;amp;）#&amp;amp;￥*！加一个吧，几分钟的事
你打开你的程序，分析了一波写了个清单：
 优化配置结构（因为配置项越来越多） 抽离 原 logging 的 File 便于公用（logging、upload 各保有一份并不合适） 实现上传图片接口（需限制文件格式、大小） 修改文章接口（需支持封面地址参数） 增加 blog_article （文章）的数据库字段 实现 http.FileServer  嗯，你发现要较优的话，需要调整部分的应用程序结构，因为功能越来越多，原本的设计也要跟上节奏
也就是在适当的时候，及时优化
优化配置结构 一、讲解 在先前章节中，采用了直接读取 KEY 的方式去存储配置项，而本次需求中，需要增加图片的配置项，总体就有些冗余了
我们采用以下解决方法：
 映射结构体：使用 MapTo 来设置配置参数 配置统管：所有的配置项统管到 setting 中  映射结构体（示例） 在 go-ini 中可以采用 MapTo 的方式来映射结构体，例如：
type Server struct { RunMode string HttpPort int ReadTimeout time.Duration WriteTimeout time.Duration } var ServerSetting = &amp;amp;Server{} func main() { Cfg, err := ini.</description>
    </item>
    
    <item>
      <title>「连载十一」Cron定时任务</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-04-29-cron/</link>
      <pubDate>Sun, 29 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-04-29-cron/</guid>
      <description>知识点  完成定时任务的功能  本文目标 在实际的应用项目中，定时任务的使用是很常见的。你是否有过 Golang 如何做定时任务的疑问，莫非是轮询，在本文中我们将结合我们的项目讲述 Cron。
介绍 我们将使用 cron 这个包，它实现了 cron 规范解析器和任务运行器，简单来讲就是包含了定时任务所需的功能
Cron 表达式格式    字段名 是否必填 允许的值 允许的特殊字符     秒（Seconds） Yes 0-59 * / , -   分（Minutes） Yes 0-59 * / , -   时（Hours） Yes 0-23 * / , -   一个月中的某天（Day of month） Yes 1-31 * / , - ?   月（Month） Yes 1-12 or JAN-DEC * / , -   星期几（Day of week） Yes 0-6 or SUN-SAT * / , - ?</description>
    </item>
    
    <item>
      <title>「连载十」定制 GORM Callbacks</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-04-15-gorm-callback/</link>
      <pubDate>Sun, 15 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-04-15-gorm-callback/</guid>
      <description>涉及知识点  GORM  本文目标  GORM itself is powered by Callbacks, so you could fully customize GORM as you want
 GORM 本身是由回调驱动的，所以我们可以根据需要完全定制 GORM，以此达到我们的目的，如下：
 注册一个新的回调 删除现有的回调 替换现有的回调 注册回调的顺序  在 GORM 中包含以上四类 Callbacks，我们结合项目选用 “替换现有的回调” 来解决一个小痛点。
问题 在 models 目录下，我们包含 tag.go 和 article.go 两个文件，他们有一个问题，就是 BeforeCreate、BeforeUpdate 重复出现了，那难道 100 个文件，就要写一百次吗？
1、tag.go
2、article.go
显然这是不可能的，如果先前你已经意识到这个问题，那挺 OK，但没有的话，现在开始就要改
解决 在这里我们通过 Callbacks 来实现功能，不需要一个个文件去编写
实现 Callbacks 打开 models 目录下的 models.go 文件，实现以下两个方法：
1、updateTimeStampForCreateCallback
// updateTimeStampForCreateCallback will set `CreatedOn`, `ModifiedOn` when creating func updateTimeStampForCreateCallback(scope *gorm.</description>
    </item>
    
    <item>
      <title>「番外」Golang 交叉编译</title>
      <link>https://blog.k1s.club/posts.bak/go/gin/2018-03-26-cgo/</link>
      <pubDate>Mon, 26 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>https://blog.k1s.club/posts.bak/go/gin/2018-03-26-cgo/</guid>
      <description>知识点  跨平台编译  本文目标 在 连载九 讲解构建 Scratch 镜像时，我们编译可执行文件用了另外一个形式的命令，如下：
$ CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o go-gin-example . 我想你可能会有疑问，今天本文会针对这块进行讲解。
说明 我们将讲解命令各个参数的作用，希望你在阅读时，将每一项串联起来，你会发现这就是交叉编译相关的小知识
也就是 Golang 令人心动的特性之一跨平台编译
一、CGO_ENABLED 作用：
用于标识（声明） cgo 工具是否可用
意义：
存在交叉编译的情况时，cgo 工具是不可用的。在标准 go 命令的上下文环境中，交叉编译意味着程序构建环境的目标计算架构的标识与程序运行环境的目标计算架构的标识不同，或者程序构建环境的目标操作系统的标识与程序运行环境的目标操作系统的标识不同
小结：
结合案例来说，我们是在宿主机编译的可执行文件，而在 Scratch 镜像运行的可执行文件；显然两者的计算机架构、运行环境标识你无法确定它是否一致（毕竟构建的 docker 镜像还可以给他人使用），那么我们就要进行交叉编译，而交叉编译不支持 cgo，因此这里要禁用掉它
关闭 cgo 后，在构建过程中会忽略 cgo 并静态链接所有的依赖库，而开启 cgo 后，方式将转为动态链接
补充：
golang 是默认开启 cgo 工具的，可执行 go env 命令查看
$ go env GOARCH=&amp;quot;amd64&amp;quot; GOBIN=&amp;quot;&amp;quot; GOCACHE=&amp;quot;/root/.cache/go-build&amp;quot; GOEXE=&amp;quot;&amp;quot; GOHOSTARCH=&amp;quot;amd64&amp;quot; GOHOSTOS=&amp;quot;linux&amp;quot; GOOS=&amp;quot;linux&amp;quot; ... GCCGO=&amp;quot;gccgo&amp;quot; CC=&amp;quot;gcc&amp;quot; CXX=&amp;quot;g++&amp;quot; CGO_ENABLED=&amp;quot;1&amp;quot; .</description>
    </item>
    
  </channel>
</rss>
