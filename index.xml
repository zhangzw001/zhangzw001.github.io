<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zhangzw</title>
    <link>https://k1s.club/</link>
    <description>Recent content on zhangzw</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 25 Feb 2021 10:43:52 +0800</lastBuildDate><atom:link href="https://k1s.club/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go学习 Goroutine泄露</title>
      <link>https://k1s.club/golang/go%E5%AD%A6%E4%B9%A0-goroutine%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Thu, 25 Feb 2021 10:43:52 +0800</pubDate>
      
      <guid>https://k1s.club/golang/go%E5%AD%A6%E4%B9%A0-goroutine%E6%B3%84%E9%9C%B2/</guid>
      <description>&lt;p&gt;goroutine 泄露常见说明&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker部署jira8全家桶破解</title>
      <link>https://k1s.club/posts/65-docker%E9%83%A8%E7%BD%B2jira8%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</link>
      <pubDate>Wed, 27 Jan 2021 18:13:13 +0800</pubDate>
      
      <guid>https://k1s.club/posts/65-docker%E9%83%A8%E7%BD%B2jira8%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</guid>
      <description>参考文档
   通过atlassian-agent.jar全家桶破解: https://www.cnblogs.com/zhmiao/p/10620903.html
  通过altassian-agent.jar全家桶破解插件(超详细 推荐): https://www.dqzboy.com/atlassian全家桶以及插件破解详细教程
  通过自己覆盖jar包的方式: https://www.cnblogs.com/tchua/p/10862670.html
  atlassian-agent.jar官方下载: https://gitee.com/pengzhile/atlassian-agent/releases/v1.2.3
   说明 1. atlassian-agent.jar版本: v1.2.3 2. 通过docker swarm 部署 3. jira版本为: 8.1.0 4. mysql版本: 5.7.24  安装mysql步骤 编写 docker-compose.yml version:&amp;#39;3&amp;#39;services:mysql:image:xxx.com/mysql:5.7.24volumes:- /data/container/jira8-mysql/data/:/var/lib/mysql:rw- /data/container/jira8-mysql/etc-mysql:/etc/mysql:rwdeploy:replicas:1resources:limits:cpus:&amp;#39;2&amp;#39;memory:4Genvironment:MYSQL_ROOT_PASSWORD:&amp;#34;root默认密码&amp;#34;ports:- &amp;#34;13336:3306&amp;#34;networks:- jira8networks:jira8:按照jira的mysql5.7配置参数要求配置以下 #etc-mysql 是从mysql5.7内cp下来的, 方便后续直接修改, 挂载到本地 #/data/container/jira8-mysql/etc-mysql/conf.d/docker.cnf [mysqld] skip-host-cache skip-name-resolve character_set_server=utf8mb4 innodb_default_row_format=DYNAMIC default-storage-engine=INNODB innodb_large_prefix=ON innodb_file_format=Barracuda innodb_log_file_size=2G sql_mode = NO_AUTO_VALUE_ON_ZERO docker swarm启动 mysql cd /data/container/jira8-mysql docker stack deploy -c docker-compose.</description>
    </item>
    
    <item>
      <title>Go源码学习 Sort包Search方法</title>
      <link>https://k1s.club/golang/go%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-sort%E5%8C%85search%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 25 Jan 2021 14:54:22 +0800</pubDate>
      
      <guid>https://k1s.club/golang/go%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-sort%E5%8C%85search%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;Sort包Search方法的实践说明&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mysql5.7-alter锁表问题</title>
      <link>https://k1s.club/posts/64-mysql5.7-alter%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 19 Jan 2021 11:28:39 +0800</pubDate>
      
      <guid>https://k1s.club/posts/64-mysql5.7-alter%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/</guid>
      <description>由于需要更新 my_test_table 的 style字段 由 tinyint(2) 为 int(10)  由于认为 mysql5.6和5.7 alter table 不会锁表, 因此在执行时 导致了锁表无法 update my_test_table
  根据官方说明 Changing the column data type 不支持 online ddl
  https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html  新增临时表做测试 准备临时表, 导入部分数据 -- 主库执行 create table my_test_table_tmp_20210119 like my_test_table; show create table my_test_table\G ENGINE=InnoDB AUTO_INCREMENT=48544733 DEFAULT CHARSET=utf8 COMMENT=&amp;#39;测试表&amp;#39; alter table my_test_table_tmp_20210119 AUTO_INCREMENT=49000000; 测试执行alter table 修改字段data type是否会锁表 -- 首先终端1 执行 alter alter table my_test_table_tmp_20210119 modify style int(10) not null default 0 comment &amp;#39;下单方式&amp;#39;; -- 首先终端2 执行 update(是会卡住) update my_test_table_tmp_20210119 set status =1 limit 1; -- 查看 processlist (如下图,出现Waiting for table metadata lock) show full processlist 开始测试 pt-online-schema-change 工具  参考文档: https://www.</description>
    </item>
    
    <item>
      <title>Go学习 并发的实现原理</title>
      <link>https://k1s.club/golang/go%E5%AD%A6%E4%B9%A0-%E5%B9%B6%E5%8F%91%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 14 Jan 2021 17:49:48 +0800</pubDate>
      
      <guid>https://k1s.club/golang/go%E5%AD%A6%E4%B9%A0-%E5%B9%B6%E5%8F%91%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;go&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gee学习-路由trie测试编写</title>
      <link>https://k1s.club/golang/gee%E5%AD%A6%E4%B9%A0-%E8%B7%AF%E7%94%B1trie%E6%B5%8B%E8%AF%95%E7%BC%96%E5%86%99/</link>
      <pubDate>Thu, 14 Jan 2021 11:32:54 +0800</pubDate>
      
      <guid>https://k1s.club/golang/gee%E5%AD%A6%E4%B9%A0-%E8%B7%AF%E7%94%B1trie%E6%B5%8B%E8%AF%95%E7%BC%96%E5%86%99/</guid>
      <description>github地址: github.com/zhangzw001/learnGee
 路由分析测试 package gee import ( &amp;#34;reflect&amp;#34; &amp;#34;testing&amp;#34; ) func TestParsePattern(t *testing.T) { tests := []struct { patterns string parts []string ok bool }{ {&amp;#34;/test/v1/add&amp;#34;, []string{&amp;#34;test&amp;#34;, &amp;#34;v1&amp;#34;, &amp;#34;add&amp;#34;},true }, {&amp;#34;/test/*name/add&amp;#34;, []string{&amp;#34;test&amp;#34;, &amp;#34;*name&amp;#34;},true}, {&amp;#34;/test/:name&amp;#34;, []string{&amp;#34;test&amp;#34;, &amp;#34;:name&amp;#34;},true }, {&amp;#34;/test/:name/abc&amp;#34;, []string{&amp;#34;test&amp;#34;, &amp;#34;:name&amp;#34;, &amp;#34;abc&amp;#34;},true}, {&amp;#34;/test/v1/add&amp;#34;, []string{&amp;#34;testv1&amp;#34;, &amp;#34;add&amp;#34;},false }, {&amp;#34;/test/*name/add&amp;#34;, []string{&amp;#34;test&amp;#34;, &amp;#34;*name&amp;#34;,&amp;#34;add&amp;#34;},false}, {&amp;#34;/test/:name&amp;#34;, []string{&amp;#34;test&amp;#34;, &amp;#34;:&amp;#34;,&amp;#34;name&amp;#34;},false }, {&amp;#34;/test/:name/abc&amp;#34;, []string{&amp;#34;test&amp;#34;, &amp;#34;:name&amp;#34;},false}, } m := make(map[string][]string) for _, test := range tests { m[test.patterns] = test.parts p := parsePattern(test.</description>
    </item>
    
    <item>
      <title>Gin学习 简单记录form数据获取源码解读</title>
      <link>https://k1s.club/golang/gin%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95form%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Wed, 13 Jan 2021 14:24:43 +0800</pubDate>
      
      <guid>https://k1s.club/golang/gin%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95form%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</guid>
      <description>http.request form 数据测试 func main() { e := gin.Default() e.Any(&amp;#34;/test&amp;#34;,func(c *gin.Context) { // 获取所有参数 	_ = c.Request.ParseForm() // log.Println(c.Request.Header[&amp;#34;Content-Type&amp;#34;]) 	// get form 参数, c.Request.URL.Query, err = url.ParseQuery 	log.Println(c.Request.URL.Query()) //log.Println(url.ParseQuery(c.Request.URL.RawQuery)) 	// post form 参数 	log.Println(c.Request.PostForm) // form 参数 	log.Println(c.Request.Form) }) e.Run(&amp;#34;localhost:8123&amp;#34;) }  请求日志
 # curl -XPOST &amp;quot;http://localhost:8123/test&amp;quot; -d &amp;quot;abc=123&amp;amp;q=123&amp;amp;ccc=123123&amp;quot; 2021/01/13 14:31:30 map[] 2021/01/13 14:31:30 map[abc:[123] ccc:[123123] q:[123]] 2021/01/13 14:31:30 map[abc:[123] ccc:[123123] q:[123]] [GIN] 2021/01/13 - 14:31:30 | 200 | 339.</description>
    </item>
    
    <item>
      <title>Gin学习 Validator</title>
      <link>https://k1s.club/golang/gin%E5%AD%A6%E4%B9%A0-validator/</link>
      <pubDate>Tue, 12 Jan 2021 10:17:46 +0800</pubDate>
      
      <guid>https://k1s.club/golang/gin%E5%AD%A6%E4%B9%A0-validator/</guid>
      <description>&lt;p&gt;记录一下Gin学习验证器和翻译器模块&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google资深工程师深度讲解Go语言 Elastic简单使用</title>
      <link>https://k1s.club/golang/google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3go%E8%AF%AD%E8%A8%80-elastic%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 06 Jan 2021 14:27:27 +0800</pubDate>
      
      <guid>https://k1s.club/golang/google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3go%E8%AF%AD%E8%A8%80-elastic%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Google资深工程师深度讲解Go语言 单任务爬虫</title>
      <link>https://k1s.club/golang/google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3go%E8%AF%AD%E8%A8%80-%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%88%AC%E8%99%AB/</link>
      <pubDate>Mon, 21 Dec 2020 18:03:36 +0800</pubDate>
      
      <guid>https://k1s.club/golang/google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3go%E8%AF%AD%E8%A8%80-%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%88%AC%E8%99%AB/</guid>
      <description>&lt;p&gt;由于教程的代码在zhenai.com更新之后无法访问,所以记录下代码改动&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
