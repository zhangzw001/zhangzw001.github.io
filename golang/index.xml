<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Golangs on zhangzw</title>
		<link>https://k1s.club/golang/</link>
		<description>Recent content in Golangs on zhangzw</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-hans</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 12 Jan 2021 10:17:46 +0800</lastBuildDate>
		<atom:link href="https://k1s.club/golang/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Gin学习 Validator</title>
			<link>https://k1s.club/golang/gin%E5%AD%A6%E4%B9%A0-validator/</link>
			<pubDate>Tue, 12 Jan 2021 10:17:46 +0800</pubDate>
			
			<guid>https://k1s.club/golang/gin%E5%AD%A6%E4%B9%A0-validator/</guid>
			<description>&lt;p&gt;记录一下Gin学习验证器和翻译器模块&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>记录一下Gin学习验证器和翻译器模块</p>
<ul>
<li>github地址: <a href="https://github.com/zhangzw001/learnGin/tree/gin-shouldbind">https://github.com/zhangzw001/learnGin/tree/gin-shouldbind</a></li>
<li>官方文档: <a href="https://godoc.org/github.com/go-playground/validator">https://godoc.org/github.com/go-playground/validator</a></li>
<li>官方示例: <a href="https://github.com/go-playground/validator/tree/v10.4.1/_examples">https://github.com/go-playground/validator/tree/v10.4.1/_examples</a></li>
<li>原文: <a href="https://github.com/xinliangnote/Go">https://github.com/xinliangnote/Go</a></li>
</ul>
<h3 id="功能演示介绍">功能演示介绍</h3>
<blockquote>
<p>首先这个模块是很方便校验接口的输入结构体参数是否符合规则,不用繁琐的自己写参数校验, 翻译器又可以支持不同语言的错误提示,而且可以自定义返回错误格式覆盖默认的格式</p>
</blockquote>
<pre><code>1. 调用localhost:8000/sn/create 执行验证器中间件
2. 调用localhost:8000/v1/product/add 执行验证器,签名等中间件
</code></pre><h3 id="部分相关目录结构">部分相关目录结构</h3>
<pre><code>.
├── config
│   └── env.go
├── controller
│   ├── api
│   │   └── v1.go
│   └── sign
│       └── sign.go
├── docs
│   ├── docs.go
│   ├── swagger.json
│   └── swagger.yaml
├── dto
│   └── api.go
├── go.mod
├── go.sum
├── logs
│   ├── gin-logger.log -&gt; gin-logger.log.20210112-000000.log
│   └── gin-logger.log.20210112-000000.log
├── main.go
├── middleware
│   ├── logger.go
│   ├── response.go
│   ├── sign.go
│   └── validator.go
├── public
│   ├── public.go
│   └── validator.go
└── routers
    └── router.go

</code></pre><h3 id="1-首先定义路由规则">1. 首先定义路由规则</h3>
<h4 id="routersroutergo">routers/router.go</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">routers</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="nx">ginSwagger</span> <span class="s">&#34;github.com/swaggo/gin-swagger&#34;</span>
	<span class="s">&#34;github.com/swaggo/gin-swagger/swaggerFiles&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/controller/api&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/controller/sign&#34;</span>
	<span class="c1">// 这里需要导入自己项目的目录,否则swagger页面会报错
</span><span class="c1"></span>	<span class="nx">_</span> <span class="s">&#34;github.com/zhangzw001/learnGin/docs&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/middleware&#34;</span>
<span class="p">)</span>
<span class="kd">func</span> <span class="nf">InitRouter</span><span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// swagger 文档
</span><span class="c1"></span>	<span class="nx">e</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/swagger/*any&#34;</span><span class="p">,</span><span class="nx">ginSwagger</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">swaggerFiles</span><span class="p">.</span><span class="nx">Handler</span><span class="p">))</span>
	<span class="c1">// sign路由
</span><span class="c1"></span>	<span class="nx">Sign</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/sn&#34;</span><span class="p">)</span>
	<span class="nx">Sign</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">middleware</span><span class="p">.</span><span class="nf">TranslationMiddleware</span><span class="p">())</span>
	<span class="p">{</span>
		<span class="nx">controllersign</span><span class="p">.</span><span class="nf">RegisterSign</span><span class="p">(</span><span class="nx">Sign</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// api v1版本路由
</span><span class="c1"></span>	<span class="nx">GroupV1</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/v1&#34;</span><span class="p">)</span>
	<span class="nx">GroupV1</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">middleware</span><span class="p">.</span><span class="nf">SignMiddleware</span><span class="p">(),</span><span class="nx">middleware</span><span class="p">.</span><span class="nf">TranslationMiddleware</span><span class="p">())</span>
	<span class="p">{</span>
		<span class="nx">controllerapi</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">GroupV1</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="2-看下sign-controller">2. 看下sign controller</h3>
<h4 id="21-controllersignsigngo">2.1 controller/sign/sign.go</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">controllersign</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/dto&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/middleware&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/public&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">Controller</span> <span class="kd">struct</span><span class="p">{}</span>

<span class="kd">func</span> <span class="nf">RegisterSign</span><span class="p">(</span><span class="nx">router</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">sign</span> <span class="o">:=</span> <span class="nx">Controller</span><span class="p">{}</span>
	<span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/create&#34;</span><span class="p">,</span> <span class="nx">sign</span><span class="p">.</span><span class="nx">Create</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Add godoc
</span><span class="c1">// @Summary sign接口
</span><span class="c1">// @Description sign接口
</span><span class="c1">// @Tags sign 创建接口
</span><span class="c1">// @ID /sn/create
</span><span class="c1">// @Accept  json
</span><span class="c1">// @Produce  json
</span><span class="c1">// @Param name query string true &#34;名称&#34;
</span><span class="c1">// @Param price query string true &#34;价格&#34;
</span><span class="c1">// @Success 200 {object} middleware.Response{data=dto.ApiOutput} &#34;success&#34;
</span><span class="c1">// @Router /sn/create [get]
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">sign</span> <span class="nx">Controller</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ts</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nx">public</span><span class="p">.</span><span class="nf">GetTimeUnix</span><span class="p">(),</span> <span class="mi">10</span><span class="p">)</span>

	<span class="nx">params</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">dto</span><span class="p">.</span><span class="nx">ApiUpdateInput</span><span class="p">{}</span>
	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">params</span><span class="p">.</span><span class="nf">BindValueParam</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">middleware</span><span class="p">.</span><span class="nf">ResponseError</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="mi">10001</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="nx">paramsSign</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">Form</span>
	<span class="nx">paramsSign</span><span class="p">[</span><span class="s">&#34;ts&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">ts</span><span class="p">}</span>

	<span class="nx">data</span> <span class="o">:=</span> <span class="nx">dto</span><span class="p">.</span><span class="nx">ApiOutput</span><span class="p">{</span>
		<span class="nx">Name</span><span class="p">:</span>  <span class="nx">params</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span>
		<span class="nx">Price</span><span class="p">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">Price</span><span class="p">,</span>
		<span class="nx">Ts</span><span class="p">:</span>    <span class="nx">ts</span><span class="p">,</span>
		<span class="nx">Sn</span><span class="p">:</span>    <span class="nx">public</span><span class="p">.</span><span class="nf">CreateSign</span><span class="p">(</span><span class="nx">paramsSign</span><span class="p">),</span>
	<span class="p">}</span>
	<span class="nx">middleware</span><span class="p">.</span><span class="nf">ResponseSuccess</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h4 id="22-数据传输-dtoapigo">2.2 数据传输 dto.api.go</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="err">#</span><span class="o">/</span><span class="nx">sn</span><span class="o">/</span><span class="nx">create</span> <span class="nx">的输入仅允许两个参数</span>
<span class="kd">type</span> <span class="nx">ApiUpdateInput</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="c1">// 这里validate 代表通过validator.v10验证自定义规则 test_tag,默认规则 required 表示必传字段
</span><span class="c1"></span>	<span class="nx">Name</span> <span class="kt">string</span>		<span class="s">`json:&#34;name&#34; form:&#34;name&#34; comment:&#34;名称&#34; example:&#34;abcdef&#34; validate:&#34;required,test_tag&#34;`</span>
    <span class="c1">// 这里仅验证最小值0
</span><span class="c1"></span>	<span class="nx">Price</span> <span class="kt">int</span>	<span class="s">`json:&#34;price&#34; form:&#34;price&#34; comment:&#34;价格&#34; example:&#34;10&#34; validate:&#34;required,min=0&#34;`</span>
<span class="p">}</span>

<span class="c1">// 绑定结构体
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">param</span> <span class="o">*</span><span class="nx">ApiUpdateInput</span><span class="p">)</span> <span class="nf">BindValueParam</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span>  <span class="p">{</span>
	<span class="k">return</span> <span class="nx">public</span><span class="p">.</span><span class="nf">DefaultGetValidParams</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">param</span><span class="p">)</span>
<span class="p">}</span>

<span class="err">#</span> <span class="nx">另外output结构体</span><span class="p">,</span><span class="nx">这里不需要验证器</span>
<span class="kd">type</span> <span class="nx">ApiOutput</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Name</span> <span class="kt">string</span>
	<span class="nx">Price</span> <span class="kt">int</span>
	<span class="nx">Ts</span> <span class="kt">string</span>
	<span class="nx">Sn</span> <span class="kt">string</span>
<span class="p">}</span>


<span class="kd">type</span> <span class="nx">ApiAddInput</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34; form:&#34;name&#34; comment:&#34;名称&#34; example:&#34;abc&#34; validate:&#34;required,test_tag,max=24,min=6&#34;`</span>
	<span class="nx">Price</span> <span class="kt">int</span> <span class="s">`json:&#34;price&#34; form:&#34;price&#34; comment:&#34;价格&#34; example:&#34;abc&#34;  validate:&#34;required,min=0&#34;`</span>
	<span class="nx">Ts</span> <span class="kt">string</span> <span class="s">`json:&#34;ts&#34; form:&#34;ts&#34; comment:&#34;有效期&#34; example:&#34;&#34; validate:&#34;required,min=1&#34;`</span>
	<span class="nx">Sn</span> <span class="kt">string</span> <span class="s">`json:&#34;sn&#34; form:&#34;sn&#34; comment:&#34;签名&#34; example:&#34;&#34; validate:&#34;required,min=32,max=32&#34;`</span>
<span class="p">}</span>

<span class="c1">// 绑定结构体
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">param</span> <span class="o">*</span><span class="nx">ApiAddInput</span><span class="p">)</span> <span class="nf">BindValueParam</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span>  <span class="p">{</span>
	<span class="k">return</span> <span class="nx">public</span><span class="p">.</span><span class="nf">DefaultGetValidParams</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">param</span><span class="p">)</span>
<span class="p">}</span>


</code></pre></div><h4 id="23-publicvalidatorgo-调用shouldbind-验证器-和翻译器">2.3 public/validator.go 调用shouldbind ,验证器 和翻译器</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">public</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="nx">ut</span> <span class="s">&#34;github.com/go-playground/universal-translator&#34;</span>
	<span class="s">&#34;github.com/go-playground/validator/v10&#34;</span>
	<span class="s">&#34;github.com/pkg/errors&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/config&#34;</span>
	<span class="s">&#34;strings&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">DefaultGetValidParams</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">params</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">ShouldBind</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="c1">// 获取验证器
</span><span class="c1"></span>	<span class="nx">valid</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetValidator</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="c1">// 获取翻译器
</span><span class="c1"></span>	<span class="nx">trans</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetTranslate</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="nx">err</span> <span class="p">=</span> <span class="nx">valid</span><span class="p">.</span><span class="nf">Struct</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">errs</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="nx">validator</span><span class="p">.</span><span class="nx">ValidationErrors</span><span class="p">)</span>
		<span class="nx">sliceErrs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{}</span>
		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span><span class="k">range</span> <span class="nx">errs</span> <span class="p">{</span>
			<span class="nx">sliceErrs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">sliceErrs</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Translate</span><span class="p">(</span><span class="nx">trans</span><span class="p">))</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">sliceErrs</span><span class="p">,</span> <span class="s">&#34;,&#34;</span><span class="p">))</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="c1">// 获取验证器
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetValidator</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">validator</span><span class="p">.</span><span class="nx">Validate</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">val</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ValidatorKey</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;未设置验证器&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">validate</span> <span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">val</span><span class="p">.(</span><span class="o">*</span><span class="nx">validator</span><span class="p">.</span><span class="nx">Validate</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;获取验证器失败&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">validate</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="c1">// 获取翻译器
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">GetTranslate</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="nx">ut</span><span class="p">.</span><span class="nx">Translator</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">trans</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">TranslatorKey</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;未设置翻译器&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">translator</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">trans</span><span class="p">.(</span><span class="nx">ut</span><span class="p">.</span><span class="nx">Translator</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;获取翻译器失败&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">translator</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>

</code></pre></div><h3 id="3-中间件-middlewarevalidatorgo">3. 中间件 middleware/validator.go</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">middleware</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="s">&#34;github.com/go-playground/locales/en&#34;</span>
	<span class="s">&#34;github.com/go-playground/locales/zh&#34;</span>
	<span class="nx">ut</span> <span class="s">&#34;github.com/go-playground/universal-translator&#34;</span>
	<span class="s">&#34;github.com/go-playground/validator/v10&#34;</span>
	<span class="nx">en_translations</span> <span class="s">&#34;github.com/go-playground/validator/v10/translations/en&#34;</span>
	<span class="nx">zh_translations</span> <span class="s">&#34;github.com/go-playground/validator/v10/translations/zh&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/config&#34;</span>
	<span class="s">&#34;reflect&#34;</span>
	<span class="s">&#34;regexp&#34;</span>
<span class="p">)</span>


<span class="c1">// 设置验证器+翻译器
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">TranslationMiddleware</span><span class="p">()</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// 创建验证器实例
</span><span class="c1"></span>		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">validator</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>

		<span class="c1">// 设置支持的语言
</span><span class="c1"></span>		<span class="nx">en</span> <span class="o">:=</span> <span class="nx">en</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
		<span class="nx">zh</span> <span class="o">:=</span> <span class="nx">zh</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
		<span class="c1">// 创建翻译器, 支持zh,en两种
</span><span class="c1"></span>		<span class="nx">uni</span> <span class="o">:=</span> <span class="nx">ut</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">zh</span><span class="p">,</span> <span class="nx">zh</span><span class="p">,</span><span class="nx">en</span><span class="p">)</span>
		<span class="c1">// 根据参数取翻译器实例
</span><span class="c1"></span>		<span class="nx">locale</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">DefaultQuery</span><span class="p">(</span><span class="s">&#34;locale&#34;</span><span class="p">,</span><span class="s">&#34;zh&#34;</span><span class="p">)</span>
		<span class="c1">// 获取默认的f.fallback
</span><span class="c1"></span>		<span class="nx">trans</span> <span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">uni</span><span class="p">.</span><span class="nf">GetTranslator</span><span class="p">(</span><span class="nx">locale</span><span class="p">)</span>

		<span class="c1">// 翻译器注册到验证器
</span><span class="c1"></span>		<span class="k">switch</span> <span class="nx">locale</span> <span class="p">{</span>
		<span class="k">case</span> <span class="s">&#34;en&#34;</span><span class="p">:</span>
			<span class="nx">_</span> <span class="p">=</span> <span class="nx">en_translations</span><span class="p">.</span><span class="nf">RegisterDefaultTranslations</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span><span class="nx">trans</span><span class="p">)</span>
			<span class="nx">val</span><span class="p">.</span><span class="nf">RegisterTagNameFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">fld</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">StructField</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
				<span class="k">return</span> <span class="nx">fld</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;en_comment&#34;</span><span class="p">)</span>
			<span class="p">})</span>
			<span class="k">break</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="nx">_</span> <span class="p">=</span> <span class="nx">zh_translations</span><span class="p">.</span><span class="nf">RegisterDefaultTranslations</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span><span class="nx">trans</span><span class="p">)</span>
			<span class="nx">val</span><span class="p">.</span><span class="nf">RegisterTagNameFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">fld</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">StructField</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
				<span class="k">return</span> <span class="nx">fld</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;comment&#34;</span><span class="p">)</span>
			<span class="p">})</span>

			<span class="c1">// 自定义的验证器
</span><span class="c1"></span>			<span class="nx">val</span><span class="p">.</span><span class="nf">RegisterValidation</span><span class="p">(</span><span class="s">&#34;test_tag&#34;</span><span class="p">,</span><span class="kd">func</span><span class="p">(</span><span class="nx">fl</span> <span class="nx">validator</span><span class="p">.</span><span class="nx">FieldLevel</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
				<span class="nx">matched</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">MatchString</span><span class="p">(</span><span class="s">`^[_0-9a-zA-Z]{6,24}$`</span><span class="p">,</span><span class="nx">fl</span><span class="p">.</span><span class="nf">Field</span><span class="p">().</span><span class="nf">String</span><span class="p">())</span>
				<span class="k">return</span> <span class="nx">matched</span>
			<span class="p">})</span>

			<span class="c1">// 自定义的翻译器
</span><span class="c1"></span>			<span class="nx">val</span><span class="p">.</span><span class="nf">RegisterTranslation</span><span class="p">(</span><span class="s">&#34;test_tag&#34;</span><span class="p">,</span><span class="nx">trans</span><span class="p">,</span><span class="kd">func</span><span class="p">(</span><span class="nx">ut</span> <span class="nx">ut</span><span class="p">.</span><span class="nx">Translator</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
				<span class="k">return</span> <span class="nx">ut</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;test_tag&#34;</span><span class="p">,</span><span class="s">&#34;{0} 填写不正确,仅允许数字字母下划线,长度大于6小于24&#34;</span><span class="p">,</span><span class="kc">true</span>  <span class="p">)</span>
			<span class="p">},</span><span class="kd">func</span><span class="p">(</span><span class="nx">ut</span> <span class="nx">ut</span><span class="p">.</span><span class="nx">Translator</span><span class="p">,</span> <span class="nx">fe</span> <span class="nx">validator</span><span class="p">.</span><span class="nx">FieldError</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
				<span class="nx">t</span> <span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ut</span><span class="p">.</span><span class="nf">T</span><span class="p">(</span><span class="s">&#34;test_tag&#34;</span><span class="p">,</span><span class="nx">fe</span><span class="p">.</span><span class="nf">Field</span><span class="p">())</span>
				<span class="k">return</span> <span class="nx">t</span>
			<span class="p">})</span>
			<span class="k">break</span>
		<span class="p">}</span>

		<span class="c1">// 设置翻译器和验证器
</span><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">TranslatorKey</span><span class="p">,</span><span class="nx">trans</span><span class="p">)</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ValidatorKey</span><span class="p">,</span><span class="nx">val</span><span class="p">)</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div><h3 id="4-中间件-middlewaresigngo">4. 中间件 middleware/sign.go</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">middleware</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="s">&#34;github.com/pkg/errors&#34;</span>
	<span class="nx">config2</span> <span class="s">&#34;github.com/zhangzw001/learnGin/config&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/public&#34;</span>
	<span class="s">&#34;net/url&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
<span class="p">)</span>



<span class="kd">func</span> <span class="nf">SignMiddleware</span><span class="p">()</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">method</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">Method</span>
		<span class="kd">var</span> <span class="nx">ts</span> <span class="kt">int64</span>
		<span class="kd">var</span> <span class="nx">sn</span> <span class="kt">string</span>
		<span class="kd">var</span> <span class="nx">req</span> <span class="nx">url</span><span class="p">.</span><span class="nx">Values</span>

		<span class="k">if</span> <span class="nx">method</span> <span class="o">==</span> <span class="s">&#34;GET&#34;</span> <span class="p">{</span>
			<span class="nx">req</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">Query</span><span class="p">()</span>
			<span class="nx">sn</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;sn&#34;</span><span class="p">)</span>
			<span class="nx">ts</span><span class="p">,</span> <span class="nx">_</span>  <span class="p">=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;ts&#34;</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>

		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">method</span> <span class="o">==</span> <span class="s">&#34;POST&#34;</span> <span class="p">{</span>
			<span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
			<span class="nx">req</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">PostForm</span>
			<span class="nx">sn</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">PostForm</span><span class="p">(</span><span class="s">&#34;sn&#34;</span><span class="p">)</span>
			<span class="nx">ts</span><span class="p">,</span> <span class="nx">_</span>  <span class="p">=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nf">PostForm</span><span class="p">(</span><span class="s">&#34;ts&#34;</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nf">ResponseError</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Illegal requests&#34;</span><span class="p">))</span>
			<span class="k">return</span>
		<span class="p">}</span>

		<span class="nx">exp</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">config2</span><span class="p">.</span><span class="nx">ApiExpiry</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>

		<span class="c1">// 验证过期时间
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">ts</span> <span class="p">&gt;</span> <span class="nx">public</span><span class="p">.</span><span class="nf">GetTimeUnix</span><span class="p">()</span> <span class="o">||</span> <span class="nx">public</span><span class="p">.</span><span class="nf">GetTimeUnix</span><span class="p">()</span> <span class="o">-</span> <span class="nx">ts</span> <span class="o">&gt;=</span> <span class="nx">exp</span> <span class="p">{</span>
			<span class="nf">ResponseError</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">10001</span><span class="p">,</span><span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Ts Error&#34;</span><span class="p">))</span>
			<span class="k">return</span>
		<span class="p">}</span>

		<span class="c1">// 验证签名
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">sn</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="o">||</span> <span class="nx">sn</span> <span class="o">!=</span> <span class="nx">public</span><span class="p">.</span><span class="nf">CreateSign</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
			<span class="nf">ResponseError</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">10002</span><span class="p">,</span><span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Sn Error&#34;</span><span class="p">))</span>
			<span class="k">return</span>
		<span class="p">}</span>
		<span class="c1">//
</span><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div><h3 id="5-统一的返回参-middlewareresponsego">5. 统一的返回参 middleware/response.go</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">middleware</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;encoding/json&#34;</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">ResponseCode</span> <span class="kt">int</span>

<span class="kd">const</span> <span class="p">(</span>
	<span class="nx">SuccessCode</span> <span class="nx">ResponseCode</span> <span class="p">=</span> <span class="mi">200</span> <span class="o">+</span> <span class="kc">iota</span>
	<span class="nx">StatusCreated</span>
	<span class="nx">StatusAccepted</span>
	<span class="nx">InternalServerError</span> <span class="nx">ResponseCode</span> <span class="p">=</span> <span class="mi">500</span>
	<span class="nx">CustomizeCode</span>           <span class="p">=</span> <span class="mi">1000</span>
	<span class="p">)</span>

<span class="kd">type</span> <span class="nx">Response</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Code</span> <span class="nx">ResponseCode</span> <span class="s">`json:&#34;code&#34;`</span>
	<span class="nx">Msg</span>  <span class="kt">string</span>       <span class="s">`json:&#34;msg&#34;`</span>
	<span class="nx">Data</span> <span class="kd">interface</span><span class="p">{}</span>  <span class="s">`json:&#34;data&#34;`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">ResponseSuccess</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">data</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
	<span class="nx">resp</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Response</span><span class="p">{</span>
		<span class="nx">Code</span><span class="p">:</span> <span class="nx">SuccessCode</span><span class="p">,</span>
		<span class="nx">Msg</span><span class="p">:</span>  <span class="s">&#34;ok&#34;</span><span class="p">,</span>
		<span class="nx">Data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span>
	<span class="nx">response</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
	<span class="nx">c</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;response&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">response</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">ResponseError</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">code</span> <span class="nx">ResponseCode</span><span class="p">,</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">resp</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Response</span><span class="p">{</span>
		<span class="nx">Code</span><span class="p">:</span> <span class="nx">code</span><span class="p">,</span>
		<span class="nx">Msg</span><span class="p">:</span>  <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span>
		<span class="nx">Data</span><span class="p">:</span> <span class="s">&#34;&#34;</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span>
	<span class="nx">response</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
	<span class="nx">c</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;response&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">response</span><span class="p">))</span>
	<span class="nx">c</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div><h3 id="6-配置文件-configenvgo">6. 配置文件 config/env.go</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">config</span>

<span class="kd">const</span> <span class="p">(</span>
	<span class="nx">PORT</span>      <span class="p">=</span> <span class="s">&#34;:8000&#34;</span>
	<span class="nx">AppName</span>   <span class="p">=</span> <span class="s">&#34;test&#34;</span>
	<span class="nx">AppSecret</span> <span class="p">=</span> <span class="s">&#34;test.123&#34;</span>
	<span class="nx">ApiExpiry</span> <span class="p">=</span> <span class="s">&#34;1200&#34;</span>

	<span class="nx">LogFilePath</span> <span class="p">=</span> <span class="s">&#34;logs&#34;</span>
	<span class="nx">LogFileName</span> <span class="p">=</span> <span class="s">&#34;gin-logger.log&#34;</span>

	<span class="nx">ValidatorKey</span>  <span class="p">=</span> <span class="s">&#34;ValidatorKey&#34;</span>
	<span class="nx">TranslatorKey</span> <span class="p">=</span> <span class="s">&#34;TranslatorKey&#34;</span>
<span class="p">)</span>
</code></pre></div><h3 id="maingo">main.go</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/config&#34;</span>
	<span class="s">&#34;github.com/zhangzw001/learnGin/routers&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

	<span class="nx">gin</span><span class="p">.</span><span class="nf">SetMode</span><span class="p">(</span><span class="nx">gin</span><span class="p">.</span><span class="nx">DebugMode</span><span class="p">)</span>
	<span class="nx">e</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
	<span class="nx">routers</span><span class="p">.</span><span class="nf">InitRouter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
	<span class="nx">e</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">PORT</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Google资深工程师深度讲解Go语言 Elastic简单使用</title>
			<link>https://k1s.club/golang/google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3go%E8%AF%AD%E8%A8%80-elastic%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Wed, 06 Jan 2021 14:27:27 +0800</pubDate>
			
			<guid>https://k1s.club/golang/google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3go%E8%AF%AD%E8%A8%80-elastic%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
			<description></description>
			<content type="html"><![CDATA[<h3 id="elastic-检查查询">elastic 检查查询</h3>
<pre><code># 查询 女, 已购房 年龄小于22岁
http://172.16.76.220:9200/crawler/youyuan/_search?q=女  AND 已购房  AND Payload.Age:(&lt;22)
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Google资深工程师深度讲解Go语言 单任务爬虫</title>
			<link>https://k1s.club/golang/google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3go%E8%AF%AD%E8%A8%80-%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%88%AC%E8%99%AB/</link>
			<pubDate>Mon, 21 Dec 2020 18:03:36 +0800</pubDate>
			
			<guid>https://k1s.club/golang/google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3go%E8%AF%AD%E8%A8%80-%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%88%AC%E8%99%AB/</guid>
			<description>&lt;p&gt;由于教程的代码在zhenai.com更新之后无法访问,所以记录下代码改动&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>由于教程的代码在zhenai.com更新之后无法访问,所以记录下代码改动</p>
<h3 id="问题说明">问题说明</h3>
<p>这里在首页和城市列表页访问是没有问题的, curl请求也是正常, 但是当请求到用户信息的时候, 是需要UA 和cookie的
没有UA 会提示403, 没有cookie会提示 202</p>
<h3 id="fetchergo-代码">fetcher.go 代码</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">fetcher</span>

<span class="kn">import</span> <span class="p">(</span>
 <span class="s">&#34;bufio&#34;</span>
 <span class="s">&#34;fmt&#34;</span>
 <span class="s">&#34;golang.org/x/net/html/charset&#34;</span>
 <span class="s">&#34;golang.org/x/text/encoding&#34;</span>
 <span class="s">&#34;golang.org/x/text/encoding/unicode&#34;</span>
 <span class="s">&#34;golang.org/x/text/transform&#34;</span>
 <span class="s">&#34;io/ioutil&#34;</span>
 <span class="s">&#34;log&#34;</span>
 <span class="s">&#34;net/http&#34;</span>
 <span class="s">&#34;strings&#34;</span>
<span class="p">)</span>


<span class="kd">func</span> <span class="nf">Fetch</span><span class="p">(</span><span class="nx">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">client</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{}</span>
 <span class="nx">newUrl</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="s">&#34;http://&#34;</span><span class="p">,</span><span class="s">&#34;https://&#34;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
 <span class="nx">request</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewRequest</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodGet</span><span class="p">,</span> <span class="nx">newUrl</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
 <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="c1">//添加header
</span><span class="c1"></span> <span class="nx">request</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;Referer&#34;</span><span class="p">,</span><span class="s">&#34;http://www.zhenai.com/&#34;</span><span class="p">)</span>
 <span class="nx">request</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;User-Agent&#34;</span><span class="p">,</span><span class="s">&#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&#34;</span><span class="p">)</span>
 <span class="c1">//这里cookie只有1分钟有效期
</span><span class="c1"></span> <span class="nx">request</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;cookie&#34;</span><span class="p">,</span><span class="s">&#34;FSSBBIl1UgzbN7NO=53ZIxjnyRAeDyH5t9pg7cBA7QAYBxvaF7jmWYAZu2.CGt7mB9u9LeMhKl8ljte21zs7CWozraQ0E5VOTTi2KxSa; FSSBBIl1UgzbN7NP=5U5rnkYdGQG7qqqmCfWUuTapalzEu3wBuwQIl47nXp0HkSYoWXO9YSlekNkkwawdb3zC2rSWIE1_qIWRw3n3..NPhTqKwJXHroqsoGBqaeo_dgsIn64FK2YWZU6Y6L_l6d6tC7YBN8SMAPRcMqpmfS_9Jw.J8tXrIUZ6bUSeDufFFL1lNf8p4Om5i4P2teK4H1gnsMEldbBc9MLc1xhrJ7yLwLZhXr_mi2AhSHpshGFF7BkPzO_5ye_HaYME37Ukhc9MqOaqdytUs.ZebVaXEo7; Hm_lvt_2c8ad67df9e787ad29dbd54ee608f5d2=1608543698; Hm_lpvt_2c8ad67df9e787ad29dbd54ee608f5d2=1608544780; sid=d399176c-21e3-4e91-b550-fa8656de10e1; _exid=Fj3xNob61luAF5gXz5MAJq5CxrtoI86y%2Bqoc4YZ%2F64joUS0XSSIaALTyeW81WLbDLc0Pzw0kcM1r%2FGU1gm%2F2lA%3D%3D; ec=DH5wblNm-1608543720671-6a5cbb1e341df-781494537; _efmdata=HZvSyojNYRIMPbor%2FAzLk%2B5xwF4NLHTxU22OynbdfqEpXG7eNyAO1kHkZ%2FWDHgT7hGdqxoGwjueLMevvIv%2FF3upAu3SmFFc2zAJsHFMNjAc%3D&#34;</span><span class="p">)</span>

 <span class="nx">resp</span> <span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
 <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
 <span class="p">}</span>
 <span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
 <span class="k">if</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">StatusCode</span> <span class="o">!=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;wrong status code: %d&#34;</span><span class="p">,</span><span class="nx">resp</span><span class="p">.</span><span class="nx">StatusCode</span><span class="p">)</span>
 <span class="p">}</span>

 <span class="nx">bodyReader</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
 <span class="nx">e</span> <span class="o">:=</span> <span class="nf">determineEncoding</span><span class="p">(</span><span class="nx">bodyReader</span><span class="p">)</span>
 <span class="nx">uft8Reader</span> <span class="o">:=</span> <span class="nx">transform</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">bodyReader</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">())</span>
 <span class="k">return</span>  <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">uft8Reader</span><span class="p">)</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="nf">determineEncoding</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">bufio</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span> <span class="nx">encoding</span><span class="p">.</span><span class="nx">Encoding</span> <span class="p">{</span>
 <span class="nx">bytes</span> <span class="p">,</span><span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Peek</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
 <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Fetcher error : %v&#34;</span><span class="p">,</span><span class="nx">err</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">unicode</span><span class="p">.</span><span class="nx">UTF8</span>
 <span class="p">}</span>

 <span class="nx">e</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">charset</span><span class="p">.</span><span class="nf">DetermineEncoding</span><span class="p">(</span><span class="nx">bytes</span><span class="p">,</span><span class="s">&#34;&#34;</span><span class="p">)</span>
 <span class="k">return</span> <span class="nx">e</span>
<span class="p">}</span>

</code></pre></div><h3 id="profile_testgo-测试一下">profile_test.go 测试一下</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">parser</span>

<span class="kn">import</span> <span class="p">(</span>
 <span class="s">&#34;learngo_crawler/fetcher&#34;</span>
 <span class="s">&#34;testing&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">TestParseProfile</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">contents</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fetcher</span><span class="p">.</span><span class="nf">Fetch</span><span class="p">(</span><span class="s">&#34;https://album.zhenai.com/u/1715998969&#34;</span><span class="p">)</span>
 <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s\n&#34;</span><span class="p">,</span><span class="nx">contents</span><span class="p">)</span>
 <span class="nf">ParseProfile</span><span class="p">(</span><span class="nx">contents</span><span class="p">)</span>
<span class="p">}</span>


</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>广度优先算法学习-迷宫</title>
			<link>https://k1s.club/golang/%E5%B9%BF%E5%BA%A6%E6%B7%B1%E5%BA%A6%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%BF%B7%E5%AE%AB/</link>
			<pubDate>Fri, 18 Dec 2020 18:00:44 +0800</pubDate>
			
			<guid>https://k1s.club/golang/%E5%B9%BF%E5%BA%A6%E6%B7%B1%E5%BA%A6%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%BF%B7%E5%AE%AB/</guid>
			<description>这里学习了Google吱声工程师深度讲解go语言-迷宫广度优先算法以记录
算法说明 图源: 图解迷宫算法（广度优先遍历)
首先看一张迷宫图, 左右黄色0 表示起始点, 0 表示可以行走, 1表示墙体 迷宫的广度优先算法的意思是, 可以通过0 发现四个方向的1, 然后在通过四个1 发现所有的2, 所有的2探索完 , 在探索3&amp;hellip; 以此类推&amp;hellip; 这里每个点都有三种状态:  未发现 已发现未探索 已探索  最终我们能探索到这样的结果图: 下面是详细代码 代码结构 ── maze ├── maze.go └── maze.in maze.in文件 6 5 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 1 0 1 0 0 0 maze.go package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; ) /* maze.</description>
			<content type="html"><![CDATA[<p>这里学习了Google吱声工程师深度讲解go语言-迷宫广度优先算法以记录</p>
<!-- more -->
<h3 id="算法说明">算法说明</h3>
<p>图源: <a href="https://www.pianshen.com/article/8849857777/">图解迷宫算法（广度优先遍历)</a></p>
<h4 id="首先看一张迷宫图-左右黄色0-表示起始点-0-表示可以行走-1表示墙体">首先看一张迷宫图, 左右黄色0 表示起始点, 0 表示可以行走, 1表示墙体</h4>
<p><img src="//zhangzw001.github.io/images/golang/maze-01.png" alt=""></p>
<p>迷宫的广度优先算法的意思是, 可以通过0 发现四个方向的1, 然后在通过四个1 发现所有的2, 所有的2探索完 , 在探索3&hellip;
<img src="//zhangzw001.github.io/images/golang/maze-02.png" alt=""></p>
<p>以此类推&hellip;
<img src="//zhangzw001.github.io/images/golang/maze-03.png" alt=""></p>
<h4 id="这里每个点都有三种状态">这里每个点都有三种状态:</h4>
<ul>
<li>未发现</li>
<li>已发现未探索</li>
<li>已探索</li>
</ul>
<p>最终我们能探索到这样的结果图:
<img src="//zhangzw001.github.io/images/golang/maze-04.png" alt=""></p>
<h3 id="下面是详细代码">下面是详细代码</h3>
<h4 id="代码结构">代码结构</h4>
<pre><code>── maze
   ├── maze.go
   └── maze.in
</code></pre><h4 id="mazein文件">maze.in文件</h4>
<pre><code>6 5
0 1 0 0 0
0 0 0 1 0
0 1 0 1 0
1 1 1 0 0
0 1 0 0 1
0 1 0 0 0
</code></pre><h4 id="mazego">maze.go</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">
<span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
 <span class="s">&#34;fmt&#34;</span>
 <span class="s">&#34;log&#34;</span>
 <span class="s">&#34;os&#34;</span>
<span class="p">)</span>

<span class="cm">/*
</span><span class="cm">maze.in
</span><span class="cm">6 5
</span><span class="cm">0 1 0 0 0
</span><span class="cm">0 0 0 1 0
</span><span class="cm">0 1 0 1 0
</span><span class="cm">1 1 1 0 0
</span><span class="cm">0 1 0 0 1
</span><span class="cm">0 1 0 0 0
</span><span class="cm">
</span><span class="cm">- 未探索
</span><span class="cm">- 已发现未探索
</span><span class="cm">- 已探索
</span><span class="cm">
</span><span class="cm">- 广度优先算法 -&gt; 把所有的1全部探索完,再探索2
</span><span class="cm">*/</span>

<span class="kd">func</span> <span class="nf">readMaze</span><span class="p">(</span><span class="nx">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">{</span>
 <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
 <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

 <span class="kd">var</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">col</span> <span class="kt">int</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fscanf</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="s">&#34;%d %d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">row</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">col</span><span class="p">)</span>
 <span class="nx">maze</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span>
 <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">maze</span> <span class="p">{</span>
  <span class="nx">maze</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">col</span><span class="p">)</span>
  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">maze</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">{</span>
   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fscanf</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">maze</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">])</span>
  <span class="p">}</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="nx">maze</span>

<span class="p">}</span>

<span class="kd">type</span> <span class="nx">point</span> <span class="kd">struct</span> <span class="p">{</span>
 <span class="nx">i</span> <span class="kt">int</span>
 <span class="nx">j</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">dirs</span> <span class="p">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="nx">point</span><span class="p">{</span>
 <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="c1">//上
</span><span class="c1"></span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="c1">//左
</span><span class="c1"></span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>  <span class="c1">//下
</span><span class="c1"></span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>  <span class="c1">//右
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">//用值类型, 返回新的point
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">point</span><span class="p">)</span> <span class="nf">add</span><span class="p">(</span><span class="nx">po</span> <span class="nx">point</span><span class="p">)</span> <span class="nx">point</span> <span class="p">{</span>
 <span class="k">return</span> <span class="nx">point</span><span class="p">{</span><span class="nx">p</span><span class="p">.</span><span class="nx">i</span> <span class="o">+</span> <span class="nx">po</span><span class="p">.</span><span class="nx">i</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">j</span> <span class="o">+</span> <span class="nx">po</span><span class="p">.</span><span class="nx">j</span><span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">point</span><span class="p">)</span> <span class="nf">notOver</span><span class="p">(</span><span class="nx">grid</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
 <span class="c1">//是否越界
</span><span class="c1"></span> <span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">p</span><span class="p">.</span><span class="nx">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">grid</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kc">false</span>
 <span class="p">}</span>
 <span class="c1">//if p.j &lt; 0 || p.j &gt;= len(grid[p.i]) {
</span><span class="c1"></span> <span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">j</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">p</span><span class="p">.</span><span class="nx">j</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kc">false</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">point</span><span class="p">)</span> <span class="nf">at</span><span class="p">(</span><span class="nx">grid</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>

 <span class="k">if</span> <span class="p">!</span><span class="nx">p</span><span class="p">.</span><span class="nf">notOver</span><span class="p">(</span><span class="nx">grid</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="nx">grid</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">i</span><span class="p">][</span><span class="nx">p</span><span class="p">.</span><span class="nx">j</span><span class="p">],</span> <span class="kc">true</span>

<span class="p">}</span>
<span class="kd">func</span> <span class="nf">walk</span><span class="p">(</span><span class="nx">maze</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span> <span class="nx">point</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">{</span>
 <span class="nx">steps</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">maze</span><span class="p">))</span>
 <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">steps</span> <span class="p">{</span>
  <span class="nx">steps</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">maze</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
 <span class="p">}</span>
 <span class="c1">//队列
</span><span class="c1"></span> <span class="nx">Q</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">point</span><span class="p">{</span><span class="nx">start</span><span class="p">}</span>

 <span class="c1">//开始探索
</span><span class="c1"></span> <span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="nx">Q</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
  <span class="c1">// 探索头
</span><span class="c1"></span>  <span class="nx">cur</span> <span class="o">:=</span> <span class="nx">Q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="nx">Q</span> <span class="p">=</span> <span class="nx">Q</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>

  <span class="c1">// 终端
</span><span class="c1"></span>  <span class="k">if</span> <span class="nx">cur</span> <span class="o">==</span> <span class="nx">end</span> <span class="p">{</span>
   <span class="k">break</span>
  <span class="p">}</span>

  <span class="c1">// 探索
</span><span class="c1"></span>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">dir</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">dirs</span> <span class="p">{</span>
   <span class="c1">//得到下一个点的坐标
</span><span class="c1"></span>   <span class="nx">next</span> <span class="o">:=</span> <span class="nx">cur</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">dir</span><span class="p">)</span>

   <span class="c1">// maze at next is 0
</span><span class="c1"></span>   <span class="c1">// and steps at next is 0
</span><span class="c1"></span>   <span class="c1">// and next != start
</span><span class="c1"></span>   <span class="nx">val</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">next</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="nx">maze</span><span class="p">)</span>
   <span class="c1">// 撞墙
</span><span class="c1"></span>   <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="o">||</span> <span class="nx">val</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
    <span class="k">continue</span>
   <span class="p">}</span>

   <span class="nx">val</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">next</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="nx">steps</span><span class="p">)</span>
   <span class="c1">// 不等于0 说明走过的
</span><span class="c1"></span>   <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="o">||</span> <span class="nx">val</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
    <span class="k">continue</span>
   <span class="p">}</span>

   <span class="c1">// 原点
</span><span class="c1"></span>   <span class="k">if</span> <span class="nx">next</span> <span class="o">==</span> <span class="nx">start</span> <span class="p">{</span>
    <span class="k">continue</span>
   <span class="p">}</span>

   <span class="c1">//当前步骤数
</span><span class="c1"></span>   <span class="nx">curSteps</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">cur</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="nx">steps</span><span class="p">)</span>
   <span class="nx">steps</span><span class="p">[</span><span class="nx">next</span><span class="p">.</span><span class="nx">i</span><span class="p">][</span><span class="nx">next</span><span class="p">.</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">curSteps</span> <span class="o">+</span> <span class="mi">1</span>

   <span class="nx">Q</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">Q</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span>
  <span class="p">}</span>
 <span class="p">}</span>

 <span class="k">return</span> <span class="nx">steps</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">walkLine</span><span class="p">(</span><span class="nx">steps</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span> <span class="nx">point</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">{</span>
 <span class="nx">newTable</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">steps</span><span class="p">))</span>
 <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">newTable</span> <span class="p">{</span>
  <span class="nx">newTable</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">steps</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
 <span class="p">}</span>

 <span class="nx">newTable</span><span class="p">[</span><span class="nx">end</span><span class="p">.</span><span class="nx">i</span><span class="p">][</span><span class="nx">end</span><span class="p">.</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">steps</span><span class="p">[</span><span class="nx">end</span><span class="p">.</span><span class="nx">i</span><span class="p">][</span><span class="nx">end</span><span class="p">.</span><span class="nx">j</span><span class="p">]</span>

 <span class="c1">//这里不需要队列, 因为只会找到一个值
</span><span class="c1"></span> <span class="nx">Q</span> <span class="o">:=</span> <span class="nx">end</span>
 <span class="c1">// 如果不是开头, 就继续找
</span><span class="c1"></span> <span class="k">for</span> <span class="nx">Q</span> <span class="o">!=</span> <span class="nx">start</span> <span class="p">{</span>
  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">dir</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">dirs</span> <span class="p">{</span>
   <span class="c1">//得到下一个点的坐标
</span><span class="c1"></span>   <span class="nx">next</span> <span class="o">:=</span> <span class="nx">Q</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">dir</span><span class="p">)</span>
   <span class="c1">//是否越界
</span><span class="c1"></span>   <span class="k">if</span> <span class="p">!</span><span class="nx">next</span><span class="p">.</span><span class="nf">notOver</span><span class="p">(</span><span class="nx">steps</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">continue</span>
   <span class="p">}</span>
   <span class="c1">// 如果这个[坐标的值]=[当前坐标值]-1, 那就找到了,把这个坐标记录一下, 待会用这个坐标继续探索
</span><span class="c1"></span>   <span class="k">if</span> <span class="nx">steps</span><span class="p">[</span><span class="nx">next</span><span class="p">.</span><span class="nx">i</span><span class="p">][</span><span class="nx">next</span><span class="p">.</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="nx">steps</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">i</span><span class="p">][</span><span class="nx">Q</span><span class="p">.</span><span class="nx">j</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
    <span class="nx">newTable</span><span class="p">[</span><span class="nx">next</span><span class="p">.</span><span class="nx">i</span><span class="p">][</span><span class="nx">next</span><span class="p">.</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">steps</span><span class="p">[</span><span class="nx">next</span><span class="p">.</span><span class="nx">i</span><span class="p">][</span><span class="nx">next</span><span class="p">.</span><span class="nx">j</span><span class="p">]</span>
    <span class="nx">Q</span> <span class="p">=</span> <span class="nx">next</span>
   <span class="p">}</span>
  <span class="p">}</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="nx">newTable</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&gt;&gt;&gt;&gt;&gt;&gt; 迷宫图如下:&#34;</span><span class="p">)</span>

 <span class="nx">maze</span> <span class="o">:=</span> <span class="nf">readMaze</span><span class="p">(</span><span class="s">&#34;maze/maze.in&#34;</span><span class="p">)</span>
 <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">row</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">maze</span> <span class="p">{</span>
  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">row</span> <span class="p">{</span>
   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%3d &#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
 <span class="p">}</span>

 <span class="nx">steps</span> <span class="o">:=</span> <span class="nf">walk</span><span class="p">(</span><span class="nx">maze</span><span class="p">,</span> <span class="nx">point</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="nx">point</span><span class="p">{</span><span class="nb">len</span><span class="p">(</span><span class="nx">maze</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">maze</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="mi">1</span><span class="p">})</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&gt;&gt;&gt;&gt;&gt;&gt; 探索图如下:&#34;</span><span class="p">)</span>

 <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">row</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">steps</span> <span class="p">{</span>
  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">row</span> <span class="p">{</span>
   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%3d &#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
 <span class="p">}</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&gt;&gt;&gt;&gt;&gt;&gt; 行走路线图如下:&#34;</span><span class="p">)</span>
 <span class="nx">newSteps</span> <span class="o">:=</span> <span class="nf">walkLine</span><span class="p">(</span><span class="nx">steps</span><span class="p">,</span> <span class="nx">point</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="nx">point</span><span class="p">{</span><span class="nb">len</span><span class="p">(</span><span class="nx">maze</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">maze</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="mi">1</span><span class="p">})</span>
 <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">row</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">newSteps</span> <span class="p">{</span>
  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">row</span> <span class="p">{</span>
   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%3d &#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
 <span class="p">}</span>
<span class="p">}</span>


</code></pre></div><h4 id="执行结果如下">执行结果如下:</h4>
<pre><code>&gt;&gt;&gt;&gt;&gt;&gt; 迷宫图如下:
  0   1   0   0   0
  0   0   0   1   0
  0   1   0   1   0
  1   1   1   0   0
  0   1   0   0   1
  0   1   0   0   0
&gt;&gt;&gt;&gt;&gt;&gt; 探索图如下:
  0   0   4   5   6
  1   2   3   0   7
  2   0   4   0   8
  0   0   0  10   9
  0   0  12  11   0
  0   0  13  12  13
&gt;&gt;&gt;&gt;&gt;&gt; 行走路线图如下:
  0   0   4   5   6
  1   2   3   0   7
  0   0   0   0   8
  0   0   0  10   9
  0   0   0  11   0
  0   0   0  12  13

</code></pre>]]></content>
		</item>
		
	</channel>
</rss>
