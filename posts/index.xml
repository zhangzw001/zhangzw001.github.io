<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on zhangzw</title>
		<link>https://www.ngirl.xyz/posts/</link>
		<description>Recent content in Posts on zhangzw</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-hans</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 31 Mar 2021 10:55:50 +0800</lastBuildDate>
		<atom:link href="https://www.ngirl.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>linux遇到一些问题统计</title>
			<link>https://www.ngirl.xyz/posts/9-linux%E9%81%87%E5%88%B0%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%BB%9F%E8%AE%A1%E6%80%BB%E7%BB%93/</link>
			<pubDate>Tue, 08 Dec 2020 17:42:54 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/9-linux%E9%81%87%E5%88%B0%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%BB%9F%E8%AE%A1%E6%80%BB%E7%BB%93/</guid>
			<description>记录一些Linux,nginx或其他服务一些问题
  分布式问题: 分布式算法 Basic paxos 算法 1. 获取一个Proposal ID n，为了保证Proposal ID唯一，可采用时间戳+Server ID生成； 2. Proposer向所有Acceptors广播Prepare(n)请求； 3. Acceptor比较n和minProposal，如果n&amp;gt;minProposal，minProposal=n，并且将 acceptedProposal 和 acceptedValue 返回； 4. Proposer接收到过半数回复后，如果发现有acceptedValue返回，将所有回复中acceptedProposal最大的acceptedValue作为本次提案的value，否则可以任意决定本次提案的value； 5. 到这里可以进入第二阶段，广播Accept (n,value) 到所有节点； 6. Acceptor比较n和minProposal，如果n&amp;gt;=minProposal，则acceptedProposal=minProposal=n，acceptedValue=value，本地持久化后，返回；否则，返回minProposal。 7. 提议者接收到过半数请求后，如果发现有返回值result &amp;gt;n，表示有更新的提议，跳转到1；否则value达成一致。 Multi-Paxos 算法  为了解决实际应用中连续多值传输的高效性,改进了Basix Paxos为Multi-Paxos:
 1. 针对每一个要确定的值，运行一次Paxos算法实例（Instance），形成决议。每一个Paxos实例使用唯一的Instance ID标识。 2. 在所有Proposers中选举一个Leader，由Leader唯一地提交Proposal给Acceptors进行表决。这样没有Proposer竞争，解决了活锁问题。在系统中仅有一个Leader进行Value提交的情况下，Prepare阶段就可以跳过，从而将两阶段变为一阶段，提高效率。 raft  为了更简便理解和实现,改进了Multi-Paxos 为raft
 1. 发送的log的是连续的, 也就是说raft 的append 操作必须是连续的. 而paxos 可以并发的. (其实这里并发只是append log 的并发提高, 应用的state machine 还是必须是有序的) 2. 选主是有限制的, 必须有最新, 最全的日志节点才可以当选. 而multi-paxos 是随意的 所以raft 可以看成是简化版本的multi paxos(这里multi-paxos 因为允许并发的写log, 因此不存在一个最新, 最全的日志节点, 因此只能这么做.</description>
			<content type="html"><![CDATA[<p>记录一些Linux,nginx或其他服务一些问题</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="分布式问题-分布式算法">分布式问题: 分布式算法</h3>
<h4 id="basic-paxos-算法">Basic paxos 算法</h4>
<pre><code>1. 获取一个Proposal ID n，为了保证Proposal ID唯一，可采用时间戳+Server ID生成；
2. Proposer向所有Acceptors广播Prepare(n)请求；
3. Acceptor比较n和minProposal，如果n&gt;minProposal，minProposal=n，并且将 acceptedProposal 和 acceptedValue 返回；
4. Proposer接收到过半数回复后，如果发现有acceptedValue返回，将所有回复中acceptedProposal最大的acceptedValue作为本次提案的value，否则可以任意决定本次提案的value；
5. 到这里可以进入第二阶段，广播Accept (n,value) 到所有节点；
6. Acceptor比较n和minProposal，如果n&gt;=minProposal，则acceptedProposal=minProposal=n，acceptedValue=value，本地持久化后，返回；否则，返回minProposal。
7. 提议者接收到过半数请求后，如果发现有返回值result &gt;n，表示有更新的提议，跳转到1；否则value达成一致。
</code></pre><h4 id="multi-paxos-算法">Multi-Paxos 算法</h4>
<blockquote>
<p>为了解决实际应用中连续多值传输的高效性,改进了Basix Paxos为Multi-Paxos:</p>
</blockquote>
<pre><code>1. 针对每一个要确定的值，运行一次Paxos算法实例（Instance），形成决议。每一个Paxos实例使用唯一的Instance ID标识。
2. 在所有Proposers中选举一个Leader，由Leader唯一地提交Proposal给Acceptors进行表决。这样没有Proposer竞争，解决了活锁问题。在系统中仅有一个Leader进行Value提交的情况下，Prepare阶段就可以跳过，从而将两阶段变为一阶段，提高效率。

</code></pre><h4 id="raft">raft</h4>
<blockquote>
<p>为了更简便理解和实现,改进了Multi-Paxos 为raft</p>
</blockquote>
<pre><code>1. 发送的log的是连续的, 也就是说raft 的append 操作必须是连续的. 而paxos 可以并发的. (其实这里并发只是append log 的并发提高, 应用的state machine 还是必须是有序的)
2. 选主是有限制的, 必须有最新, 最全的日志节点才可以当选. 而multi-paxos 是随意的 所以raft 可以看成是简化版本的multi paxos(这里multi-paxos 因为允许并发的写log, 因此不存在一个最新, 最全的日志节点, 因此只能这么做. 这样带来的麻烦就是选主以后, 需要将主里面没有的log 给补全, 并执行commit 过程)

</code></pre><h3 id="分布式问题-单线程和多线程问题">分布式问题: 单线程和多线程问题</h3>
<h4 id="redis6多线程说明">redis6多线程说明</h4>
<ul>
<li>多线程方式</li>
</ul>
<pre><code>1. memcached的多线程方式是master-work, work是独立完成所有操作包括执行操作
2. redis的多线程方式也是master-work,但是仅仅是io和内存方面的慢操作是通过work进程执行, work进程和master间通过管道通信,最后执行操作都是在master进程执行

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="tcp问题-什么是tcp连接队列">Tcp问题: 什么是tcp连接队列</h3>
<ul>
<li><a href="https://blog.csdn.net/luoyu_/article/details/105361742">TCP SYN队列与Accept队列详解</a></li>
<li><a href="https://www.cnxct.com/something-about-phpfpm-s-backlog/">TCP SOCKET中backlog参数的用途是什么?</a></li>
<li><a href="https://blog.csdn.net/chen8238065/article/details/80457150">tcp 相关总结</a></li>
<li><a href="https://blog.csdn.net/weixin_34088838/article/details/92562556?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">深入理解Linux TCP backlog</a></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">1.	net.ipv4.tcp_max_syn_backlog:		半连接队列,保存SYN_RECV状态的连接<span class="o">(</span>tcp握手第一次完成后, server端会将连接添加到sync queue队列 <span class="o">)</span>
2.	min<span class="o">(</span>net.core.somaxconn,backlog<span class="o">)</span>: 	全连接队列,保存ESTABLISHED状态的连接<span class="o">(</span>tcp握手第三次完成周, server端会将连接添加到accept queue队列<span class="o">)</span>

通过netstat -s <span class="p">|</span> egrep <span class="s2">&#34;listen|LISTEN&#34;</span> 查看 是否是半连接队列满了
<span class="m">667399</span> <span class="nb">times</span> the listen queue of a socket overflowed   <span class="o">(</span>? 这个和TCPBacklogDrop 哪个是全连接队列??<span class="o">)</span>
<span class="m">667399</span> SYNs to LISTEN sockets ignored

通过netstat -s<span class="p">|</span>grep TCPBacklogDrop 查看 是否是全连接队列满了
    TCPBacklogDrop: <span class="m">1862</span>

以上也可以用 nstat -a -z 命令

另外如果全连接满了处理方式是 直接丢弃, 如果修改为1 则表示发送reset包给客户端
cat cat /proc/sys/net/ipv4/tcp_abort_on_overflow
<span class="m">0</span>

通过ss -l可以查到到nginx的默认backlog 是511
ss -l<span class="p">|</span>grep http

通过修改nginx配置增加该值,reload nginx<span class="o">(</span>前提是已经修改了net.core.somaxconn<span class="o">)</span>
 listen  <span class="m">80</span> <span class="nv">backlog</span><span class="o">=</span>4096<span class="p">;</span>
 listen <span class="m">443</span> ssl <span class="nv">backlog</span><span class="o">=</span>4096<span class="p">;</span>

</code></pre></div><p><img src="/images/tcp3.png" alt="三次握手图">
<img src="/images/tcp-queue.png" alt="tcp队列图">
<img src="/images/tcp-queue2.png" alt="tcp队列图2"></p>
<blockquote>
<p>结论</p>
</blockquote>
<pre><code># 这里已php -&gt; mysql 为例:
php 发syn 给tcp:3306  -&gt; mysql 先存入syn queue队列(开启了syncookie,所以不会满) -&gt; 然后回复php syn+ack -&gt;  php 回复ack之后 进入 established 状态  握手完成  -&gt; 本次tcp连接请求存入 accpet queue队列(也就是listen backlog)  -&gt; 如果队列满了直接忽略, php 超时重传, 如果队列没满 就accept() 成功连接到mysql服务 (max-connections - 1)

由于该数值或高会导致fpm处理不过来,出现504 gateway timeout(110: Connection timed out), 过低会导致高并发无法建立tcp连接(111: Connection refused)
因此一般设置该值等于QPS
</code></pre><h3 id="tcp问题-syn-flood-攻击">Tcp问题: syn flood 攻击</h3>
<ul>
<li><a href="https://www.cnblogs.com/zengkefu/p/5606696.html">https://www.cnblogs.com/zengkefu/p/5606696.html</a></li>
</ul>
<pre><code>&gt; Sep  9 12:04:01 db kernel: possible SYN flooding on port 3306. Sending cookies.

这种程序可以通过不存在的ip去发送tcp请求到server, server就会回复ack, 但是由于服务器不存在, 所以就一直重试, 导致占用tcp连接, 如果正常请求进来,则由于syn queue队列满了, 就忽略了正常的tcp请求, 无法提供服务

</code></pre><h3 id="linux问题-tcpdump抓包tcp-ack为1">linux问题: tcpdump抓包tcp ack为1</h3>
<ul>
<li>执行命令监听: tcpdump -n port 80 (想要详细信息加 -vv)</li>
</ul>
<blockquote>
<p>客户端 telnet x.x.x.x 80</p>
</blockquote>
<p>日志如下:</p>
<pre><code>tcpdump  -n port 80
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp0s3, link-type EN10MB (Ethernet), capture size 262144 bytes
11:16:40.689157 IP 192.168.54.141.53444 &gt; 192.168.53.106.http: Flags [SEW], seq 1306124348, win 65535, options [mss 1460,nop,wscale 5,nop,nop,TS val 458678777 ecr 0,sackOK,eol], length 0
11:16:40.689724 IP 192.168.53.106.http &gt; 192.168.54.141.53444: Flags [S.E], seq 1553518959, ack 1306124349, win 64308, options [mss 1410,sackOK,TS val 4208119240 ecr 458678777,nop,wscale 7], length 0
11:16:40.690320 IP 192.168.54.141.53444 &gt; 192.168.53.106.http: Flags [.], ack 1, win 4106, options [nop,nop,TS val 458678778 ecr 4208119240], length 0
</code></pre><p>这里第一和第二次握手都没有问题, 第三次 ack 1, 并非是seq+1</p>
<p>这里提一下ACK, ACK 是确认值, ack 是确认编号, 第一次握手ACK=0,在第二次握手开始ACK=1, 而ack是=seq+1(收到的随机数+1)</p>
<p>那么这里ack 1 是啥呢?  &hellip; 应该就是默认tcpdump 显示成相对值了, 通过-S 参数会显示绝对值</p>
<ul>
<li>执行命令监听: tcpdump -S  -n port 80</li>
</ul>
<pre><code>tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp0s3, link-type EN10MB (Ethernet), capture size 262144 bytes
11:16:54.806628 IP 192.168.54.141.53516 &gt; 192.168.53.106.http: Flags [S], seq 316359286, win 65535, options [mss 1460,nop,wscale 5,nop,nop,TS val 458692791 ecr 0,sackOK,eol], length 0
11:16:54.806861 IP 192.168.53.106.http &gt; 192.168.54.141.53516: Flags [S.], seq 1113466641, ack 316359287, win 64308, options [mss 1410,sackOK,TS val 4208133357 ecr 458692791,nop,wscale 7], length 0
11:16:54.807576 IP 192.168.54.141.53516 &gt; 192.168.53.106.http: Flags [.], ack 1113466642, win 4106, options [nop,nop,TS val 458692792 ecr 4208133357], length 0
</code></pre><p>三次握手图
<img src="/images/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%BE.png" alt="三次握手图"></p>
<p>四次挥手图
<img src="/images/tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%9B%BE.png" alt="四次挥手图"></p>
<h3 id="linux问题-一次dnsmasq迁移问题">Linux问题: 一次dnsmasq迁移问题</h3>
<blockquote>
<p>网卡配置如下</p>
</blockquote>
<pre><code>DEVICE=em1
HWADDR=x
TYPE=Ethernet
UUID=x
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=static
IPADDR0=172.16.76.100
PREFIX0=24
GATEWAY=172.16.76.1
DNS1=172.16.76.100
DNS2=172.16.76.101
</code></pre><blockquote>
<p>这里有个大问题, 由于本身就是dns服务器, 但配置的DNS1居然是本机, 这导致service network restart 的时候会去修改 /etc/resolv.conf 的配置为 DNS1 和DNS2的ip, 此时dns服务器将无法解析外网域名</p>
</blockquote>
<blockquote>
<p>因此正确的配置是</p>
</blockquote>
<pre><code>DNS1=119.29.29.29
DNS2=223.5.5.5
DNS3=114.114.114.114
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="linux问题-升级内核">Linux问题: 升级内核</h3>
<pre><code>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm

# 查看可升级的内核
yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available
yum --enablerepo=elrepo-kernel install kernel-ml

# 查看已经安装的内核
cat /boot/grub2/grub.cfg |grep menuentry

# 设置5.3的为默认
grub2-set-default 'CentOS Linux (5.3.13-1.el7.elrepo.x86_64) 7 (Core)'

# grub2-editenv list
saved_entry=CentOS Linux (5.3.13-1.el7.elrepo.x86_64) 7 (Core)
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="linux问题-禁ping">linux问题: 禁ping</h3>
<pre><code># 一次性修改
echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all

# 开机自动修改
echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all

# 永久禁用,加入到/etc/sysctl.conf
net.ipv4.icmp_echo_ignore_all=1
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="linux问题-文件锁问题">linux问题: 文件锁问题</h3>
<pre><code>问题描述: php slowlog 出现session_start() 慢
问题原因: 我们这边有A 和B 两个二级域名,A 会请求 B, 并且由于测试环境在同一台服务器,公用一个php,所以在发生调用的时候同时写了session,而php的sessions配置是默认的file方式, 这就造成了锁的问题
问题解决:
1. 修改代码部分
2. php的session配置改成redis
    session.save_handler = redis
    session.save_path = &quot;tcp://x.x.x.x:xxxx&quot;
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="linux问题-内存释放问题">linux问题: 内存释放问题</h3>
<pre><code>问题描述: 开发这边写了个统计脚本, 占用49G内存, 从日志发现脚本已经全部执行完成, 但是php脚本依然存在
问题原因: 通过 strace -p pid 观察进程, 发现是持续性的做内存释放操作 munmap(0x7f6db77ad000, 266240)          = 0
持续执行munmap函数是因为一直在释放内存(毕竟49G), 结果 =0 说明内存释放执行函数是返回正常了
问题解决:
1. 修改代码降低内存
2. 等待一段时间内存会释放完成(测试80分钟释放完毕)
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="nginx问题-各种退出信号使用">nginx问题: 各种退出信号使用</h3>
<pre><code>1. hup(kill -1):	重新读取配置并是服务配置生效(nginx -s reload)
2. quit(kill -3): 	优雅关闭进程
3. kill(kill -9):	强制关闭(必杀)
4. usr1(kill -10):	重新打开服务(通常用nginx日志分割)
5. usr2(kill -12):	平滑升级到新版本的程序
6. term(kill -15):	强制关闭(先清理善后)
</code></pre><h3 id="nginx问题-单域名通过cookie跳转不同后端">nginx问题: 单域名通过cookie跳转不同后端</h3>
<ul>
<li>
<ol>
<li>浏览器访问 supervisor.xxxx.com?to=1 , 然后在访问 supervisor.xxxx.com 会请求到common队列</li>
</ol>
</li>
<li>
<ol start="2">
<li>浏览器访问 supervisor.xxxx.com?to=2 , 然后在访问 supervisor.xxxx.com 会请求到test队列</li>
</ol>
</li>
<li>
<ol start="3">
<li>curl请求方式:
<code>curl &quot;http://supervisor.xxxx.com/index.html?action=restartall&quot; --cookie &quot;bqxserver=test&quot;</code></li>
</ol>
</li>
</ul>
<pre><code>server {
        listen 80 ;
        charset utf-8;
        server_name supervisor.xxxx.com;

        location / {
           if ($arg_to = &quot;1&quot;){
                 add_header Set-Cookie &quot;bqxserver=common&quot;;
                 add_header Content-Type &quot;text/plain;charset=utf-8&quot;;
                 return 200 &quot;当前的数据服务器位置:common supervisor&quot;;
                }
           if ($arg_to = &quot;2&quot;){
                 add_header Set-Cookie &quot;bqxserver=test&quot;;
                 add_header Content-Type &quot;text/plain;charset=utf-8&quot;;
                 return 200 &quot;当前的数据服务器位置:test supervisor&quot;;
                }
            set $proxy_name '127.0.0.1:32019';
            if ($cookie_bqxserver = &quot;test&quot;){
                set $proxy_name  '127.0.0.1:32020';
            }
            if ($cookie_bqxserver = &quot;common&quot;){
                set $proxy_name  '127.0.0.1:32019';
            }
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header HOST $http_host;
                proxy_set_header X-NginX-Proxy true;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Server $host;
                proxy_pass http://$proxy_name;
  }
}
</code></pre><h3 id="nginx问题-提示tmp无权限问题">nginx问题: 提示tmp无权限问题</h3>
<pre><code>2020/12/08 17:14:52 [crit] 111455#0: *1842 open() &quot;/var/lib/nginx/tmp/client_body/0000001489&quot; failed (13: Permission denied), client: 10.10.154.36, server: xxx.com, request: &quot;POST /?xxx HTTP/1.0&quot;, host: &quot;xxx.com&quot;, referrer: &quot;http://&quot;
</code></pre><p>首先由于该环境nginx配置修改了用户由 nginx用户 变成nobody用户的原因, 导致改目录无权限写入&hellip;</p>
<p>知道问题了, 那为啥会写到这个目录呢?需要看下面两个参数</p>
<pre><code>client_max_body_size	1m;
client_body_buffer_size 16k;
</code></pre><p><code>client_max_body_size</code> 默认 1M，表示 客户端请求服务器最大允许大小，在<code>Content-Length</code>请求头中指定。如果请求的正文数据大于<code>client_max_body_size</code>，HTTP协议会报错 <code>413 Request Entity Too Large</code>。</p>
<p>那这里为啥会写tmp目录呢?</p>
<p>看下<code>client_body_buffer_size</code>, 默认 16k , 小于这个值会直接写入内存,  但如果 <code>client_body_buffer_size</code> 请求数据 &lt; <code>client_max_body_size</code> , 那么此时就会写临时目录,默认<code>/var/lib/nginx/tmp/client_body</code></p>
<h3 id="nginx问题-http_x_real_ip问题">nginx问题: http_x_real_ip问题</h3>
<p>nginx的反向代理服务器一般都需要加上 <code>proxy_set_header X-Real-IP $remote_addr;</code>, 为啥需要加上这个呢?</p>
<p>比如我有如下架构代理:
<a href="http://www.test.com">www.test.com</a>(clientip: 1.1.1.1) -&gt; proxy1(2.1.1.1) -&gt; proxy2(2.1.1.2) -&gt; real server(2.1.1.3)</p>
<p>因为不加的话<code>$http_x_real_ip</code> 会一直是空, 并且在反向代理服务器后端的real server 同样是空
这一点和<code>$http_x_forwarded_for</code> 不同,比如在<code>proxy1</code>上为空, 但是在<code>proxy2</code>之后的服务器上不为空</p>
<p>加了之后就是真实客户端ip了吗?</p>
<ul>
<li>proxy1服务器: (2.1.1.1)</li>
</ul>
<pre><code>1. $remote_addr = 1.1.1.1
2. $http_x_real_ip = 空
3. $http_x_forwarded_for = 空
</code></pre><ul>
<li>proxy2服务器: (2.1.1.2)</li>
</ul>
<pre><code>1. $remote_addr = 2.1.1.1
2. $http_x_real_ip = 1.1.1.1
3. $http_x_forwarded_for = 1.1.1.1
</code></pre><ul>
<li>real server服务器: (2.1.1.3)</li>
</ul>
<pre><code>1. $remote_addr = 2.1.1.2
2. $http_x_real_ip = 2.1.1.1
3. $http_x_forwarded_for = 1.1.1.1,2.1.1.1
</code></pre><p>一般来说 当有多个代理时候，可以在第一个反向代理上配置<code>proxy_set_header X-Real-IP $remote_addr</code> 获取真实客户端IP</p>
<p>如此看来假如整个请求,反向代理只有一层, 没有proxy2, real server获取<code>$http_x_real_ip</code> 和<code>$http_x_forwarded_for</code>是一样的, 就是真实客户端ip</p>
<p>但显然即便我们反向代理只有一层,  在proxy1之前,互联网中可能还有反向代理, 例如经过cdn之后, 例如他人代理 都将隐藏真实ip.</p>
<h3 id="nginx问题-nginx-if条件的实现">nginx问题: nginx if条件&amp;&amp;的实现</h3>
<ul>
<li>1 允许所有人访问 a.php|b.php|c.php|d.php|e.php</li>
<li>2 仅允许127.0.0.1|172.16.0.2 ip可以访问 aa.php|bb.php</li>
</ul>
<pre><code>set $flag &quot;allow&quot;;
# 以下php 所有人可以访问
if ( $fastcgi_script_name ~ (a.php|b.php|c.php|d.php|e.php) ) {
        set $flag &quot;allow_php_ip&quot;;
}

# 以下php 仅固定ip可以访问
if ($fastcgi_script_name ~ (aa.php|bb.php)) {
        set $flag &quot;${flag}_php&quot;;
}

if ( $proxy_add_x_forwarded_for ~ (127.0.0.1|172.16.0.2)) {
        set $flag &quot;${flag}_ip&quot;;
}
# 写包含是 $flag 可能为 &quot;allow_php_ip_ip&quot; (在允许的ip服务器(127.0.0.1)上访问 /a.php)
if ( $flag !~ &quot;allow_php_ip&quot; ) {
        return 403;
}
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="nginx问题-静态文件分离">nginx问题: 静态文件分离</h3>
<p>对于一般的nginx+php的方式, 我们php采用nobody用户,而代码/lumen采用web-www用户, 这样的好处是页面访问到/lumen时是nobody用户, 是无法修改代码的</p>
<p>可能我们需求是上用户upload图片等, 这时候就可能被传上某个a.php, 这就有可能被代码注入(一般来说图片是放cdn,配置单独域名回源的,这里是直接存在项目目录)</p>
<p>所以为了防止代码注入,我们需要限制upload目录的访问权限</p>
<pre><code># nginx配置如下
        location ~ /images/.*\.(gif|jpg|jpeg|png)$ {
            root /lumen/storage/uploads/;
        }

</code></pre><p>这样我们图片传到 /lumen/storage/uploads/images/ 目录, 访问是 <a href="http://www.xxx.com/images/x.png">www.xxx.com/images/x.png</a> 来访问 且不允许其他类型文件访问.</p>
<hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="nginx问题-root-和alias">nginx问题: root 和alias</h3>
<p>在配置文件映射的时候，如果使用了正则表达式，那么可能会出现无法访问文件，nginx可能会将所有的
文件都映射成为文件夹，导致文件映射失败的情况出现；</p>
<ul>
<li>root的例子</li>
</ul>
<pre><code>location /a/ {
	root /lumen/public;
}
这里实际访问的路径: www.xxx.com/a/ -&gt; /lumen/public/a/
</code></pre><ul>
<li>alias的例子</li>
</ul>
<pre><code># 注意这里目录最后加上/
location /a/ {
        alias /lumen/public/;
}
这里实际访问的路径: www.xxx.com/a/ -&gt; /lumen/public/
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="nginx问题-隐藏版本信息">nginx问题: 隐藏版本信息</h3>
<pre><code>Syntax:  server_tokens on | off | build | string;
Default:  server_tokens on;
Context:  http, server, location
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="nginx问题-日志出现encode内容如何查看">nginx问题: 日志出现encode内容如何查看</h3>
<pre><code># python2 执行decode
&gt;&gt;&gt; print &quot;\x22content\x22\x0D\x0A\x0D\x0A\xE8\x8A\x8A\xE8\x8A\x8A\xE8\xBF\x98\xE6\x80\x95\xE5\xA6\x9E\xE5\xA6\x9E\xE4\xB8\x8D\xE8\x80\x81\xE5\xAE\x9E\xEF\xBC\x8C\xE7\x89\xB9\xE5\x9C\xB0\xE8\xBF\x87\xE6\x9D\xA5\xE8\xA7\x86\xE5\xAF\x9F\xE4\xB8\x80\xE4\xB8\x8B\x0D\x0A&quot;.decode('utf-8')
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="nginx问题-default配置未设置">nginx问题: default配置未设置</h3>
<p>nginx 未设置default时, 如果直接访问服务器外网ip, 会去请求到第一个匹配的server段, 有可能会请求到后端的服务器的内容, 这很有可能暴露我们不想暴露的服务
一般来说开头添加如下配置</p>
<pre><code>    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        deny all;
	}
</code></pre><p>nginx 配置已经配置域名方式访问, 如果访问ip会返回403, 正常来说返回403已经不会对服务器造成压力了</p>
<blockquote>
<p>可是万万没想到虽然返回了403, 但是也有700字节大小, 大量请求对小带宽来说还是有压力的</p>
</blockquote>
<pre><code>#
server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        return 499;
   }

#其他location,if配置,
if ($host != a.example.com) {
    return 499;
}

</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="nginx问题-nginx111以前trace_id-生成">nginx问题: nginx1.11以前trace_id 生成</h3>
<ul>
<li>如果是前端(upstream)</li>
</ul>
<pre><code>log_format  server_name_main '&quot;$request_trace_id&quot; [ $host $request_time ] ' '[ $upstream_addr $upstream_response_time ] ' '$status ' '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '  '$body_bytes_sent &quot;$http_referer&quot; '
                     '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$bytes_sent&quot;'    '{$request_body}' ;
...

server {
        set $request_trace_id $pid$connection$bytes_sent$msec;
        if ( $http_x_request_id != &quot;&quot; ){
                set $request_trace_id $http_x_request_id;
        }
        add_header  Bq_F_Traceid $request_trace_id;

	# 一定要写到location中, 因为proxy_pass
	location / {

		proxy_pass http://xxxx;
                proxy_set_header  X-Request-Id        $request_trace_id;

	}
}
</code></pre><ul>
<li>如果是后端节点</li>
</ul>
<pre><code># 一定要写到server段, 否则后端可能报404错误
server {
	listen 80;
    	server_name  openapi-community-alpha.zhangzw.com ;

        set $request_trace_id $pid$connection$bytes_sent$msec;
        if ( $http_x_request_id != &quot;&quot; ){
                set $request_trace_id $http_x_request_id;
        }
        add_header  Bq_X_Traceid $request_trace_id;

	location / {
		try_files $uri $uri/ /index.php?$query_string;
	}
}
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="网络问题-转发正代和反代">网络问题: 转发,正代和反代</h3>
<pre><code>1. 正代: 内网客户端172.16.88.88想要访问google,通过浏览器配置代理服务器ip(172.16.88.2:1080) 去访问google, 代理服务器和客户端在同一个局域网
2. 反代: 内网服务端10.10.88.88上有http服务,通过配置代理服务器(10.10.88.2:80 外网地址:1.1.1.1:80)绑定域名www.googoo.com对外提供服务, 代理服务器和服务端在同一个局域网
3. 转发: 只是数据转发, 不会重新建立tcp连接,代理是需要与上游和下游都建立tcp连接
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="其他问题-修改swap">其他问题: 修改swap</h3>
<pre><code>dd if=/dev/zero of=/data/swapfilenew bs=4096 count=4096000

swapoff -a

/sbin/mkswap  /data/swapfilenew
/sbin/swapon  /data/swapfilenew

vim /etc/fstab
/data/swapfilenew none swap defaults 0 0
</code></pre><h3 id="其他问题-jenkins-ui特别慢-jobs数量100">其他问题: jenkins ui特别慢 (jobs数量100+)</h3>
<p>原文: <a href="https://www.coder.work/article/6390497">jenkins GUI非常慢-浏览器缓存清除后很快</a></p>
<pre><code>系统管理 -&gt; 全局安全配置 -&gt; 勾选 Disable remember me
</code></pre><h3 id="其他问题-postgresql时区修改">其他问题: postgreSql时区修改</h3>
<h4 id="docker启动通过变量传入">docker启动通过变量传入</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">TZ</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;PRC&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">PGTZ</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;PRC&#39;</span><span class="w">
</span></code></pre></div><h4 id="直接修改配置文件">直接修改配置文件</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">vim /var/lib/pgsql/9.4/data/postgresql.conf
<span class="nv">log_timezone</span> <span class="o">=</span> <span class="s1">&#39;PRC&#39;</span>
<span class="nv">timezone</span> <span class="o">=</span> <span class="s1">&#39;PRC&#39;</span>
</code></pre></div><h3 id="其他问题-kafka和rocketmq比较">其他问题: kafka和rocketMQ比较</h3>
<ul>
<li><a href="https://blog.csdn.net/lppl010_/article/details/86662346">阿里 RocketMQ 优势对比</a></li>
</ul>
<p>RocketMQ 是对kafka的一种优化, kafka中的每个topic的每个分区都会对应一个物理文件, 但topic数量越多时, 分区分散更明显,就会导致磁盘IO成为瓶颈, 而rocketMQ所有的消息是保存在同一个物理文件中, topic和分区数对rocketMQ只是逻辑上的概念, 因此随着topic增加, kafka性能急剧下降, rocketMQ影响不大</p>
<h3 id="其他问题-记录一个php扩展动态安装的错误问题">其他问题: 记录一个php扩展动态安装的错误问题</h3>
<p>同事在自己的vagrant安装php7.0的mongodb1.7.5扩展,但是添加到ini的时候报错如下:</p>
<pre><code>undefined symbol: zend_string_init_interned
</code></pre><ul>
<li>分析</li>
</ul>
<pre><code>1 首先扩展被安装到 /usr/lib/php/20180731目录
2 报错显示无法加载的动态库
</code></pre><ul>
<li>问题1 由于php7.0的extension_dir配置查看发现是/usr/lib/php/20151012,所以改动态编译并未生成到正确的路径</li>
<li>问题2 该报错可能是动态库不能识别问题</li>
</ul>
<p>经过确认该环境安装了多个php版本, 最新的是php7.4, 而php命令默认是link到php7.0, 但是动态扩展编译的命令如下:</p>
<pre><code>/usr/php/phpize
./configure
make
make install
</code></pre><p>显然问题就在这, 这里phpize 和configure会走默认的配置, 默认的配置可能是最新的php7.4(大概是仅仅php命令link到了php7.0)
因此重新编译如下:</p>
<pre><code>/usr/php/phpize7.0
./configure --with-php-config=/path/to/php-config7.0
make
make install
</code></pre>]]></content>
		</item>
		
		<item>
			<title>k8s遇到的一些问题统计总结</title>
			<link>https://www.ngirl.xyz/posts/3-k8s%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%BB%9F%E8%AE%A1%E6%80%BB%E7%BB%93/</link>
			<pubDate>Tue, 10 Nov 2020 14:06:41 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/3-k8s%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%BB%9F%E8%AE%A1%E6%80%BB%E7%BB%93/</guid>
			<description>不定时更新,文章可能比较散乱,&amp;gt;_&amp;lt;
  1. 单机版k8s pod一直是pending的问题  describe一下pod会发现错误: 1 node(s) had taints that the pod didnt tolerate. 这是因为master上存在污点,pod不会再改节点上创建 两种办法:
  deploy 的时候加上 容忍该污点 直接取消master上的污点  # 取消master上污点 kubectl taint nodes --all node-role.kubernetes.io/master- # 查看taint kubectl describe node node1   2. 修改service-node-port-range  由于traefik部署需要对外开放80端口, 但默认仅允许30000以上端口
 # kubeadm 1.14 配置 apiServer: extraArgs: authorization-mode: Node,RBAC service-node-port-range: 79-33000 # kubeadm 1.10配置 apiServerExtraArgs: service-node-port-range: 79-33000   3. traefik断电后重新启动报错 command traefik error: field not found, node: redirect 看到这个错误猜测可能是用的latest镜像问题, 从`hub.</description>
			<content type="html"><![CDATA[<p>不定时更新,文章可能比较散乱,&gt;_&lt;</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="1-单机版k8s-pod一直是pending的问题">1. 单机版k8s pod一直是pending的问题</h3>
<blockquote>
<p>describe一下pod会发现错误: 1 node(s) had taints that the pod didnt tolerate.
这是因为master上存在污点,pod不会再改节点上创建
两种办法:</p>
</blockquote>
<ul>
<li>deploy 的时候加上 容忍该污点</li>
<li>直接取消master上的污点</li>
</ul>
<pre><code># 取消master上污点
  kubectl taint nodes --all node-role.kubernetes.io/master-

# 查看taint
kubectl describe node node1
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="2-修改service-node-port-range">2. 修改service-node-port-range</h3>
<blockquote>
<p>由于traefik部署需要对外开放80端口, 但默认仅允许30000以上端口</p>
</blockquote>
<pre><code># kubeadm 1.14 配置
apiServer:
  extraArgs:
    authorization-mode: Node,RBAC
    service-node-port-range: 79-33000

# kubeadm 1.10配置
apiServerExtraArgs:
  service-node-port-range: 79-33000
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="3-traefik断电后重新启动报错-command-traefik-error-field-not-found-node-redirect">3. traefik断电后重新启动报错 command traefik error: field not found, node: redirect</h3>
<pre><code>看到这个错误猜测可能是用的latest镜像问题, 从`hub.docker.com` 查看更新了v2.0+的版本

将`traefik`的`deployment`配置中 image改成 `traefik:1.7`

重新部署后 问题解
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="4-查看当前集群的customresourcedefinition">4. 查看当前集群的(CustomResourceDefinition)</h3>
<pre><code># 查看k8s有哪些api
kubectl api-versions

# 查看当前crd
kubectl get crd

# 其次查看该api是什么版本
kubectl describe crd destinationrules.networking.istio.io

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="5-启用自动轮换kubelet-证书证书未过期">5. 启用自动轮换kubelet 证书(证书未过期)</h3>
<p>参考: <a href="https://www.cnblogs.com/skymyyang/p/11093686.html">Kubeadm证书过期时间调整</a></p>
<p><code>kubelet</code>证书分为server和client两种， k8s 1.9默认启用了client证书的自动轮换，但server证书自动轮换需要用户开启</p>
<p>增加 kubelet 参数</p>
<pre><code># 在/etc/systemd/system/kubelet.service.d/10-kubeadm.conf 增加如下参数

Environment=&quot;KUBELET_EXTRA_ARGS=--feature-gates=RotateKubeletServerCertificate=true&quot;
</code></pre><p>增加 controller-manager 参数</p>
<pre><code># 在/etc/kubernetes/manifests/kube-controller-manager.yaml 添加如下参数
  - command:
    - kube-controller-manager
    - --experimental-cluster-signing-duration=87600h0m0s
    - --feature-gates=RotateKubeletServerCertificate=true
    - ....
</code></pre><p>创建 rbac 对象
创建 rbac对象，允许节点轮换kubelet server证书：</p>
<pre><code>cat &gt; ca-update.yaml &lt;&lt; EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeserver
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/selfnodeserver
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeadm:node-autoapprove-certificate-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeserver
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:nodes
EOF

kubectl create –f ca-update.yaml
</code></pre><p>重新启动kubelet</p>
<pre><code>systemctl daemon-reload
systemctl enable kubelet
systemctl restart kubelet
</code></pre><p>如果证书过期</p>
<pre><code># 重新生成证书
kubeadm alpha certs renew all
# 查看有效期
kubeadm alpha certs check-expiration
# 覆盖配置文件
mv $HOME/.kube/config $HOME/.kube/config.old
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# 重启kube-apiserver,kube-controller,kube-scheduler,etcd
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="6-hpa的一个cpu-percent百分比问题">6. hpa的一个cpu-percent百分比问题</h3>
<pre><code>kubectl autoscale deployment php-admintest-nginx-dev --cpu-percent=80 --min=1 --max=2 -n php-dev
</code></pre><p>例如以上,我希望在平均cpu超过80%时,pod能自动调整为2个</p>
<p>em&hellip;这没啥问题</p>
<p>但我做简单ab压测发现, 我把cpu压到了100000% &hellip;</p>
<p>我的deployment 配置中是这样限制cpu的</p>
<pre><code>        resources:
          requests:
            cpu: &quot;1m&quot;
          limits:
            cpu: &quot;1000m&quot;
</code></pre><p>显然我的pod可以使用1个核cpu, 那这个平均cpu是等于啥呢?</p>
<p>cpu-percent = 1000m/resources.request.cpu =&gt; 1000m/1m =100000%</p>
<p>-_-!!!</p>
<blockquote>
<p>因此建议 修改requests.cpu=500m,  &ndash;cpu-percent可设范围: 0~200% ,或者低一些 250m -&gt; 0~400%</p>
</blockquote>
<p>总结:
request.cpu 必须设置, 这个是对比的对象</p>
<p>另外:
对于扩容而言，这个时间段为3分钟，缩容为5分钟(可以通过 <code>--horizontal-pod-autoscaler-downscale-delay</code> ， <code>--horizontal-pod-autoscaler-upscale-delay 进行调整</code>)。</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="7-k8s1162metrics-v035-deployment重启之后hpa就失效无法获取到数据">7 k8s1.16.2+metrics v0.3.5 deployment重启之后hpa就失效,无法获取到数据</h3>
<pre><code>The HPA was unable to compute the replica count: unable to get metrics for resource cpu: no metrics returned from resource metrics API
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="8-k8s机器进程数达到500多的时候-ssh连接到服务报错-shell-request-failed-on-channel-0">8 k8s机器进程数达到500多的时候, ssh连接到服务报错 shell request failed on channel 0</h3>
<pre><code>原因：目标主机的系统进程数太小，导致不能连接

解决：需要修改/etc/security/limits.d/20-nproc.conf文件中的值，把4096改大一点，如 65535

#cat /etc/security/limits.d/20-nproc.conf
*          soft    nproc     4096
root       soft    nproc     unlimited

重新ssh，即可。

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="9-centos8安装k8s118flannel-pod间不通">9 centos8安装k8s1.18+flannel pod间不通</h3>
<p>在查看到<a href="https://zhangguanzhang.github.io/">馆长</a>的<a href="https://zhangguanzhang.github.io/2020/10/20/kylin-v10-k8s-overlay-error/">银河麒麟arm64系统上k8s集群跨节点不通的一次排查</a>问题, 发下我的flannel网络同样是 <code>lo</code> 也的确启用了 <code>NetworkManager</code>, 不过重启并未有效果</p>
<blockquote>
<p>配置如下:</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ ip route get <span class="k">$(</span>ip a s flannel.1 <span class="p">|</span>grep -w inet<span class="p">|</span>awk -F <span class="s1">&#39;inet|/&#39;</span> <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
<span class="nb">local</span> 10.244.0.0 dev lo src 10.244.0.0 uid <span class="m">0</span>
    cache &lt;local&gt;

$ route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.23.0.1       0.0.0.0         UG    <span class="m">100</span>    <span class="m">0</span>        <span class="m">0</span> eth0
10.5.27.0       0.0.0.0         255.255.255.0   U     <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> docker0
10.23.0.0       0.0.0.0         255.255.0.0     U     <span class="m">100</span>    <span class="m">0</span>        <span class="m">0</span> eth0
10.244.0.0      0.0.0.0         255.255.255.0   U     <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> cni0
10.244.1.0      10.244.1.0      255.255.255.0   UG    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> flannel.1
192.168.212.64  0.0.0.0         255.255.255.192 U     <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> *

</code></pre></div><p>于是我重启</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ systemctl restart NetworkManager

$ docker restart <span class="k">$(</span>docker ps <span class="p">|</span>grep flanneld<span class="p">|</span>awk <span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>

$ ip route get <span class="k">$(</span>ip a s flannel.1 <span class="p">|</span>grep -w inet<span class="p">|</span>awk -F <span class="s1">&#39;inet|/&#39;</span> <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
broadcast 10.244.0.0 dev cni0 src 10.244.0.1 uid <span class="m">0</span>
    cache &lt;local,brd&gt;
</code></pre></div><p>但最终我的现象是, master重启后从<code>lo</code>变成了<code>cni0</code>, 但是另外一台node一直无效, 重启容器后又变成<code>lo</code>, 至此<code>pod</code>间网络依然不通</p>
<p>按照文章<a href="https://zhuanlan.zhihu.com/p/112834020">Centos8.1部署kubernetes1.17 问题 使用iptables打通网络</a> 中描述查看了<code>iptables</code>, 果然<code>Chain FORWARD (policy DROP)</code>, 通过<code>iptables -P FORWARD ACCEPT</code>的确解决了问题, 但显然这并不安全.</p>
<p>其他链接:</p>
<ul>
<li>docker在 1.13 版本之后，将系统iptables 中 FORWARD 链的默认策略设置为 DROP: <a href="https://github.com/moby/moby/issues/14041">https://github.com/moby/moby/issues/14041</a></li>
<li>docker&amp;k8s填坑记 nodeport 无法访问: <a href="https://www.cnblogs.com/tylerzhou/p/10975062.html">https://www.cnblogs.com/tylerzhou/p/10975062.html</a></li>
</ul>
<h3 id="10-部署服务器查看describe信息如下">10 部署服务器查看describe信息如下:</h3>
<pre><code>Mounting command: systemd-run
Mounting arguments: --description=Kubernetes transient mount for /var/lib/kubelet/pods/369daaef-1e90-446b-92ce-3d562f94b429/volumes/kubernetes.io~nfs/pvc-f462c606-5796-4c48-8928-7822f3fa0605 --scope -- mount -t nfs 172.16.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 /var/lib/kubelet/pods/369daaef-1e90-446b-92ce-3d562f94b429/volumes/kubernetes.io~nfs/pvc-f462c606-5796-4c48-8928-7822f3fa0605
Output: Running scope as unit run-14829.scope.
mount: 文件系统类型错误、选项错误、172.16.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 上有坏超级块、
       缺少代码页或助手程序，或其他错误
       (对某些文件系统(如 nfs、cifs) 您可能需要
       一款 /sbin/mount.&lt;类型&gt; 助手程序)
</code></pre><p>可能是客户端无法识别nfs格式</p>
<pre><code># 做个测试
mkdir /tmp/abc
mount -t nfs 172.16.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 /tmp/abc


# 果然报错
mount: wrong fs type, bad option, bad superblock on 172.16.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-plugins,
       missing codepage or helper program, or other error
       (for several filesystems (e.g. nfs, cifs) you might
       need a /sbin/mount.&lt;type&gt; helper program)

       In some cases useful info is found in syslog - try
       dmesg | tail or so.
</code></pre><p>所以安装了nfs即可</p>
<pre><code>yum install nfs
</code></pre><h3 id="11-go-get-获取kubernetes作为依赖包提示错误">11 go get 获取kubernetes作为依赖包提示错误</h3>
<pre><code>go get -u k8s.io/kubernetes/pkg/apis/node@v1.16.0
k8s.io/api@v0.0.0: reading k8s.io/api/go.mod at revision v0.0.0: unknown revision v0.0.0

由于kubernetes主仓中也使用了很多的公共库,而且go.mod中指定的是v0.0.0, 最后通过go mod的replace机制将版本替换为子目录

所以我们直接get会有问题, 通过issue找到一下解决办法:
</code></pre><p>#!/bin/sh
set -euo pipefail</p>
<p>VERSION=${1#&ldquo;v&rdquo;}
if [ -z &ldquo;$VERSION&rdquo; ]; then
echo &ldquo;Must specify version!&rdquo;
exit 1
fi</p>
<p>MODS=($(curl -sS <a href="https://raw.githubusercontent.com/kubernetes/kubernetes/v$%7BVERSION%7D/go.mod">https://raw.githubusercontent.com/kubernetes/kubernetes/v${VERSION}/go.mod</a> |
sed -n &rsquo;s|.<em>k8s.io/(.</em>) =&gt; ./staging/src/k8s.io/.<em>|k8s.io/\1|p'
))
for MOD in &ldquo;${MODS[@]}&quot;; do
echo ${MOD}
V=$(go mod download -json &ldquo;${MOD}@kubernetes-${VERSION}&rdquo; |sed -n &rsquo;s|.</em>&ldquo;Version&rdquo;: &ldquo;(.<em>)&rdquo;.</em>|\1|p')
go mod edit &ldquo;-replace=${MOD}=${MOD}@${V}&rdquo;
done</p>
<pre><code>go get &quot;k8s.io/kubernetes@v${VERSION}&quot;
</code></pre>
<pre><code>
1. 首先我们下载对应版本的kubernetes的go.mod
2. 我们通过sed把所有的k8s.io的replace的内容 =&gt; 后面的内容都删了   
        MOD = k8s.io/api
3. 我们获取到MOD的version
    go mod download -json &quot;${MOD}@kubernetes-${VERSION}&quot;
        {
        &quot;Path&quot;: &quot;k8s.io/api&quot;,
        &quot;Version&quot;: &quot;v0.0.0-20190918155943-95b840bb6a1f&quot;,
        ...
        }
4. 在通过go mod edit去修改当前项目的go.mod的replace 配置
    replace k8s.io/api =&gt; k8s.io/api v0.0.0-20190918155943-95b840bb6a1f

</code></pre><h3 id="12-terminating的无法删除的情况">12 Terminating的无法删除的情况</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">1. 首先使用强制命令
        kubectl delete ns cattle-system --force --grace-period <span class="m">0</span>
2. 如果不行,那就通过api删除
        2.1 kubectl get ns cattle-system -o json <span class="p">|</span>jq <span class="s1">&#39;.spec = {&#34;finalizers&#34;:[]}&#39;</span> &gt; cattle-system.yaml
        2.2 kubectl proxy <span class="o">(</span>启动代理<span class="o">)</span>
        2.3 curl -k -H <span class="s2">&#34;Content-Type: application/json&#34;</span> -X PUT --data-binary @cattle-system.yaml http://127.0.0.1:8001/api/v1/namespaces/prom/finalize
3. 如果不行, 那就直接etcd删除吧!!!
        <span class="nv">ETCDCTL_API</span><span class="o">=</span><span class="m">3</span>  etcdctl del /registry/namespaces/rancher-system
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>网络基础</title>
			<link>https://www.ngirl.xyz/posts/67-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
			<pubDate>Wed, 31 Mar 2021 10:55:50 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/67-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
			<description>unix 历史 gnu linux 分支  https://futurist.se/gldt/ https://futurist.se/gldt/2012/02/20/gnulinux-distribution-timeline-12-2/  网桥(2层交换机) &amp;gt; 工作在2层, 使用mac地址 网桥: 桥接两个网络(其实就是两个口的交换机) 交换机: 桥接多个网络 网桥隔离冲突,减少冲突域, 但是不能减少广播 那么怎么解决广播问题呢? -&amp;gt; 逻辑地址:ip包 + 路由器 同一网络内部的通信 会先通过arp广播, 找到通信的ip的mac地址 那么怎么知道ip是本地网络, 还是其他网络: 网络地址 和本机地址 那怎么知道那部分是网络地址, 还是本机地址呢? - 子网掩码 子网掩码可以通过ip地址 取到 网络地址 socket ip:port =&amp;gt; 套接字 套接字就是tcp/ip协议中用于通信的两个端点, 有server socket, client socket TCP : Transmission Control Protocol UDP : User Datagram Protocol  identification(fragment id) : 如果报文过大(1500byte), 服务端只能接受500(需要切片发送), identification 就用来标记是同一个报文
fragment offset : 就是三个切片的偏移量, 保证切片的顺序</description>
			<content type="html"><![CDATA[<h3 id="unix-历史">unix 历史</h3>
<p><img src="/images/67/markdown-img-paste-20210621114801593.png" alt=""></p>
<h3 id="gnu-linux-分支">gnu linux 分支</h3>
<ul>
<li><a href="https://futurist.se/gldt/">https://futurist.se/gldt/</a></li>
<li><a href="https://futurist.se/gldt/2012/02/20/gnulinux-distribution-timeline-12-2/">https://futurist.se/gldt/2012/02/20/gnulinux-distribution-timeline-12-2/</a></li>
</ul>
<p><img src="/images/67/markdown-img-paste-2021062114112618.png" alt=""></p>
<h3 id="网桥2层交换机">网桥(2层交换机)</h3>
<pre><code>&gt; 工作在2层, 使用mac地址

网桥: 桥接两个网络(其实就是两个口的交换机)
交换机: 桥接多个网络

网桥隔离冲突,减少冲突域, 但是不能减少广播
那么怎么解决广播问题呢?

-&gt; 逻辑地址:ip包 + 路由器

同一网络内部的通信 会先通过arp广播, 找到通信的ip的mac地址

那么怎么知道ip是本地网络, 还是其他网络:
网络地址 和本机地址
那怎么知道那部分是网络地址, 还是本机地址呢?  - 子网掩码
子网掩码可以通过ip地址 取到 网络地址

</code></pre><h3 id="socket">socket</h3>
<pre><code>ip:port =&gt; 套接字
套接字就是tcp/ip协议中用于通信的两个端点, 有server socket, client socket

TCP : Transmission Control Protocol
UDP : User Datagram Protocol
</code></pre><p><img src="/images/67/markdown-img-paste-20210621164945488.png" alt=""></p>
<blockquote>
<p>identification(fragment id) : 如果报文过大(1500byte), 服务端只能接受500(需要切片发送), identification 就用来标记是同一个报文</p>
<p>fragment offset : 就是三个切片的偏移量, 保证切片的顺序</p>
<p>Protocol : 上层的协议(tcp,udp,icmp?)</p>
<p>Data : 应用层header+传输层header+data</p>
</blockquote>
<p><img src="/images/67/markdown-img-paste-20210621174204921.png" alt=""></p>
<blockquote>
<p>Sequence Number : 序列号</p>
<p>Acknowledgement Number : 确认号</p>
<p>URG 紧急位
ACK 确认位
PSH 推送位(不能放到缓存,立即发送,优先传输)
RST 重置位(连接重置, 不需要完全三次握手)
SYN
FIN</p>
<p>Window Size : 协定接收方的缓冲中能容量的报文的个数</p>
</blockquote>
<blockquote>
<p>tcp的有限状态机</p>
</blockquote>
<h3 id="tcp">tcp</h3>
<h4 id="tcp-三次握手">tcp 三次握手</h4>
<pre><code>1. client -&gt; SYN=1,seq num=x                    -&gt; server
2. client &lt;- SYN=1,ACK=1,ack num=x+1, seq num=y &lt;- server
3. client -&gt; ACK=1,ack num=y+1                  &lt;- server
</code></pre><h4 id="tcp-四次挥手">tcp 四次挥手</h4>
<p><img src="/images/67/markdown-img-paste-20210629100443918.png" alt=""></p>
<h4 id="状态">状态</h4>
<pre><code>client:
    -&gt;  closed -&gt; syn_send -&gt; established
        ↑                            ↓
        time_wait &lt;- fin_wait2 &lt;- fin_wait1
server:
    -&gt; listen -&gt; syn_recv -&gt; established
        ↑                           ↓
      closed &lt;-   last_ack   &lt;-  close_wait      

</code></pre><h3 id="a-b-c-类">A B C 类</h3>
<pre><code>A : 0xxxxxxx.X.X.X
B : 10xxxxxx.X.X.X
C : 110xxxxx.X.X.X

私有A : 10.X.X.X  10.0.0.0/8
私有B : 172.0001xxxx.X.X      172.16.0.0/12
私有C : 192.168.X.X   192.168.0.0/24
</code></pre><h3 id="网络划分">网络划分</h3>
<ul>
<li>划分子网</li>
<li>合并超网</li>
</ul>
<pre><code>需要两个网段有共同的网络id(比如10.0.0.0/8 和172.20.0.0/16 无法合并)
</code></pre><h3 id="lo-回环网卡">lo 回环网卡</h3>
<pre><code>永远不会跑到别的机器 127.0.0.1/8  的所有网段ip ,ping都是本机
ping 127.0.0.1
ping 127.1.2.3

当然我们可以自己给lo绑定一个ip网段
ip addr add 1.0.0.1/8
此时我们ping 1.0.0.1 或 ping 1.1.0.1 都将是ping本机
</code></pre><h3 id="跨网络通信">跨网络通信</h3>
<pre><code>1 主机路由: 到达主机ip的路由
2 网络路由: 到达网段的路由
3 默认路由: 找不到的路由走默认路由, ipv4配置gateway其实就是添加一天默认路由
&gt; 优先级: 1 &gt; 2 &gt; 3
</code></pre><blockquote>
<p>如下例子:</p>
</blockquote>
<pre><code>$ route -n
Kernel IP routing table
Destination     Gateway          Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.20.100.1     0.0.0.0         UG    100    0        0 em1             //默认路由
172.20.100.0     0.0.0.0         255.255.252.0   U     100    0        0 em1             //网络路由
172.17.0.0      0.0.0.0          255.255.0.0     U     0      0        0 docker0
192.168.0.0     0.0.0.0          255.255.255.0   U     0      0        0 *
192.168.0.95    0.0.0.0          255.255.255.255 UH    0      0        0 cali40c9bc493ea //主机路由
192.168.1.0     172.20.100.221   255.255.255.0   UG    0      0        0 tunl0           //非直连网络路由
</code></pre><h3 id="路由表的构成">路由表的构成</h3>
<pre><code>1. Destination(目标): 数据包的目标路径
2. NetMask(子网掩码):  划分网络的子网掩码
3. Interface(接口):   本路由器的出口(谁发送数据包)
4. Gateway(网关):
    1) 直连:  网关不用配置(通常是0.0.0.0),并且路由会自动添加
    2) 非直连: 下一个路由器 邻近本路由器的网络地址
</code></pre><p><img src="/images/67/markdown-img-paste-20210618152726982.png" alt=""></p>
<pre><code># A--- 1 R1 2 --- 3 R2 4 --- 5 R3 6 --- B

0. A 浏览器打开 http://B
1. A 判断B 和A 是否在同一个网段
2. A (存在路由 0.0.0.0 gateway:R1 IP1 interfaceA),
    A 通过arp协议广播找到 IP1的MAC1地址, 然后存入到arp cache中: IP1 -&gt; MAC1
    此时就可以传输报文给R1:
    frame:  dest mac: MAC1 ,    src mac: MACA
    ip:     dest ip : IPB,      src ip : IPA
    tcp:    dest port:80,       src post:xxxxx , SYN
3. R1 查路由表(收到数据)
    网络路由: 0.0.0.0 gateway:R2 IP3 interfaceR1(2)

    R1 通过arp协议广播找到 R2的MAC3地址, 然后存入到arp cache中: IP3 -&gt; MAC3
    此时就可以传输报文给R2:
    frame:  dest mac: MAC3 ,    src mac: MAC2  (这里在变, 数据链路层是一段一段的传输的)
    ip:     dest ip : IPB,      src ip : IPA
    tcp:    dest port:80,       src post:xxxxx , SYN
4. R2 查路由表(收到数据)
    网络路由: 0.0.0.0 gateway:R3 IP5 interfaceR2(4)

    R2 通过arp协议广播找到 R3的MAC5地址, 然后存入到arp cache中: IP5 -&gt; MAC5
    此时就可以传输报文给R3:
    frame:  dest mac: MAC5 ,    src mac: MAC4  (这里在变, 数据链路层是一段一段的传输的)
    ip:     dest ip : IPB,      src ip : IPA
    tcp:    dest port:80,       src post:xxxxx , SYN
5. R3 查路由表(收到数据)
    网络路由: 直连 IPB

    R3 通过arp协议广播找到 B的MACB地址, 然后存入到arp cache中: IPB -&gt; MACB
    此时就可以传输报文给B:
    frame:  dest mac: MACB ,    src mac: MAC6  (这里在变, 数据链路层是一段一段的传输的)
    ip:     dest ip : IPB,      src ip : IPA
    tcp:    dest port:80,       src post:xxxxx , SYN

</code></pre><h3 id="dhcp">dhcp</h3>
<pre><code>1 client -&gt; 客户端广播,发现报文 -&gt; server
2 client &lt;- 服务端广播,提供消息 &lt;- server
3 client -&gt; 客户端对请求消息做出相应ack -&gt; server
4 client &lt;- 服务器确认消息,结束交换过程 &lt;- server

&gt; 提前一半时间续约
</code></pre><h3 id="centos6修改网卡规则不重启更新方法">centos6修改网卡规则不重启更新方法</h3>
<pre><code># 修改NAME
vim /etc/udev/rules.d/70-persistent-net.rules
# 查看 eth0的driver
ethtool -i eth0
# 卸载 driver
modprobe -r ${driverName}
# ifconfig 就看不到网卡了
# 重新加载driver
modprobe ${driverName}
</code></pre><h3 id="动态路由">动态路由</h3>
<pre><code>RIP: 根据经过路由器个数判断选择走哪条路线
OSPF: 根据不同因素选择路线, 考虑路由器个数,带宽大小等等
BGP:

&gt; linux当做路由器使用,配置工具:
yum install quagga
</code></pre><h3 id="路由实验">路由实验</h3>
<pre><code>ping 10.0.0.100 的时候 ttl=62, 经过了两个路由
traceroute 10.0.0.100 经过的
mtr 10.0.0.100
</code></pre><p><img src="/images/67/markdown-img-paste-20210618181247554.png" alt=""></p>
<h3 id="路由命令">路由命令</h3>
<pre><code>route add -net  192.168.10.0/24 gw 172.16.0.6
</code></pre><h3 id="dhcp-1">dhcp</h3>
<pre><code>把一个主机接入tcp/ip网络,要配置哪些参数
    ip/NetMask
    gateway
    dns

    参数配置方式
        静态配置
        动态分配
            bootp : boot protocol
            dhcp : 引入了&quot;租约&quot;的bootp,也可以为特定主机保留固定的地址

dhcp : 动态主机配置协议
    工作流程(广播)
        1) client: dhcp discover
        2) server: dhcp offer(ip/NetMask,gw,...)
            lease time: 租约期限
        3) client: dhcp request
        4) server: dhcp ack
    续租(单播)
        剩余时间: 50%,75%,87.5%
        工作流程
            dhcp request
            dhcp ack

            dhcp request
            dhcp nak

            dhcp discover : 广播

</code></pre>]]></content>
		</item>
		
		<item>
			<title>Linux计算机基础</title>
			<link>https://www.ngirl.xyz/posts/66-linux%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
			<pubDate>Wed, 31 Mar 2021 10:47:24 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/66-linux%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</guid>
			<description>计算机基础 进程 process : 运行中的程序的一个副本 进程中断会保存现场,然后不停切换执行不同的进程 保存现场保存在哪呢? task struct : linux内核存储进程信息的固定格式 task list : 链表方式保存 task struct 进程创建 init 父子关系 进程 fork() ,clone() CoW 写时复制, 父进程和子进程一开始都是同样的内存空间,但是需要写数据(成家),就需要分配新内存空间(分家) 子进程必须由父进程关闭: 子进程执行完父进程任务后, 父进程就清理子进程的内存等 进程优先级(priority) 0-139: 1-99 : 实时优先级(数字越大优先级越高) 100-139 : 静态优先级(数字越小优先级越高) Nice值 : 调整nice值来调整优先级,只能变好,只能降低优先级 -20,19(对应100-139) 2*140个运行队列 : 相同优先级放入同样队列, 只需要扫描首部, 当分配的时间达到了,需要中断是,将运行另外一对队列 进程内存 page frame : 内核将物理内存拆分为page frame, 然后程序需要的时候通过page frame 累加在一起, 组成虚拟内存空间段, 提供进程使用 虚拟内存: 内核通过page frame 组成的线性地址空间 物理内存: 实际的物理内存大小, 会被拆分成page frame IPC : inter Process Communication 同一主机上: signal shm : shared memory semerphor : 不同主机上: rpc : remote procecure calling 远程过程调用 socket : https://blog.</description>
			<content type="html"><![CDATA[<h2 id="计算机基础">计算机基础</h2>
<h3 id="进程">进程</h3>
<pre><code>process : 运行中的程序的一个副本

进程中断会保存现场,然后不停切换执行不同的进程
保存现场保存在哪呢?

task struct : linux内核存储进程信息的固定格式
task list : 链表方式保存 task struct
</code></pre><p><img src="/images/66/markdown-img-paste-20210624115848639.png" alt=""></p>
<pre><code>进程创建
    init
        父子关系
        进程
            fork() ,clone()
            CoW 写时复制, 父进程和子进程一开始都是同样的内存空间,但是需要写数据(成家),就需要分配新内存空间(分家)
        子进程必须由父进程关闭: 子进程执行完父进程任务后, 父进程就清理子进程的内存等
    进程优先级(priority)
        0-139:
            1-99 : 实时优先级(数字越大优先级越高)
            100-139 : 静态优先级(数字越小优先级越高)
            Nice值 : 调整nice值来调整优先级,只能变好,只能降低优先级
                -20,19(对应100-139)
        2*140个运行队列 : 相同优先级放入同样队列, 只需要扫描首部, 当分配的时间达到了,需要中断是,将运行另外一对队列

    进程内存
        page frame : 内核将物理内存拆分为page frame, 然后程序需要的时候通过page frame 累加在一起, 组成虚拟内存空间段, 提供进程使用
        虚拟内存: 内核通过page frame 组成的线性地址空间
        物理内存: 实际的物理内存大小, 会被拆分成page frame

    IPC : inter Process Communication
        同一主机上:
            signal
            shm : shared memory
            semerphor :
        不同主机上:
            rpc : remote procecure calling 远程过程调用
            socket : https://blog.csdn.net/pashanhu6402/article/details/96428887
</code></pre><h4 id="ps">ps</h4>
<pre><code>ps命令
    /proc/ 内核状态信息
        内核参数:
            可设置器值的参数  /proc/sys/
            状态变量, 仅查看
        参数: 模拟成文件系统类型
    进程:
        /proc/[0-9]+ :
            [0-9]+ : pid目录

    三种风格:
        1   UNIX options, which may be grouped and must be preceded by a dash.
        2   BSD options, which may be grouped and must not be used with a dash.
        3   GNU long options, which are preceded by two dashes.
    启动进程的方式:
        1. 系统启动过程中自动启动, 与终端无关
        2. 终端启动, 进程会随终端退出而退出

    选项:
        1. a : 所有与终端相关的进程
        2. x : 所有与终端无关的进程
            $ ps ax|head -1
            PID TTY      STAT   TIME COMMAND
            1 ?        Ss    14:26 /usr/lib/systemd/systemd --switched-root --system --deserialize 22
            2 ?        S      0:00 [kthreadd]
                带中括号的是内核线程
        3. u : 以用户为中心  组织状态信息显示
            # 常用组合1
            $ ps aux|head -1
            USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
                1. VSZ 虚拟内存集
                2. RSS ResIdent Size 常驻内存;
                3. STAT
                    R : running
                    S : Interruptable sleeping
                    D : UnInterruptable sleeping
                    T : Stopped
                    Z : zomble 父进程未清理时就会一直保持僵尸态
                    + : 前台进程
                    l : 多线程进程
                    N : 低优先级进程(nice)
                    &lt; : 高优先级进程
                    s : session leader
        4. -e : 显示所有进程
        5. -f : 显示完整格式
            # 常用组合2
            $ ps -ef |head -1
            UID        PID  PPID  C STIME TTY          TIME CMD
        6. -F : 显示完整格式
            #
            $ ps -eF |head -1
            UID        PID  PPID  C    SZ   RSS PSR STIME TTY          TIME CMD
            C : cpu utillization
            PSR : 运行在哪个cpu上
        7 -H : 以层级结构显示进程的相关信息
            # 常用组合3
            ps -eFH
            $ 常用组合4 -eo, axo
                o field1,field2: 自定义要显示的字段列表, 逗号分隔
                    常用的field: pid, ni,pri,psr,pcpu,stat,comm,tty,ppid,rtprio
                    pri : priority 优先级
                    rtprio read time priority 实时优先级
                ps axo pid,command
</code></pre><h4 id="vmstat">vmstat</h4>
<pre><code>$ vmstat -w 1
procs -----------------------memory---------------------- ---swap-- -----io---- -system-- --------cpu--------
 r  b         swpd         free         buff        cache   si   so    bi    bo   in   cs  us  sy  id  wa  st
</code></pre><pre><code>memory
    swpd : 交换内存使用总量
    free : 空闲
    buff : 用于buffer
    cache : 用户cache
swap
    si (swap in) : 换进,进入swap的速率(kb/s),内存进swap
    so (swap out): 换出,离开swap的速率(kb/s),swap回内存
io
    bi (block in): 从块设备读取到内存的速率(kb/s)
    bo (block out): 保存数据至块设备的速率
system
    in (interrupts) : 中断速率
    cs (context switch) : 上下文切换速率
</code></pre><pre><code>-w 宽显示
-s 显示内存统计数据

</code></pre><h4 id="pmap">pmap</h4>
<pre><code>pmap 1
    -x : 显示详细格式信息

另一种查看方式: cat /proc/1/maps
</code></pre><h4 id="dstat-强大">dstat (强大👍)</h4>
<pre><code>$ dstat
You did not select any stats, using -cdngy by default.
----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--
usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw
</code></pre><h3 id="网络客户端">网络客户端</h3>
<h4 id="hping">hping</h4>
<h3 id="linux内核">Linux内核</h3>
<h4 id="内核设计流派">内核设计流派</h4>
<pre><code>单内核设计: linux
微内核设计: Winodows,Solaris
</code></pre><h4 id="linux内核特点">Linux内核特点</h4>
<pre><code>支持模块化:  *.ko(kernel object)
&gt; 另外一个对象: *.so(share object)

支持模块运行时动态装载或卸载
</code></pre><h4 id="组成部分">组成部分</h4>
<pre><code>核心文件: /boot/vmlinuz-VERSION-release
ramdisk:
  - centos5: /boot/initrd-VERSION-release.Img
    - 工具自动创建: mkinitrd
  - centos6,7 : /boot/Initramfs-VERSION-release.Img
    - 工具自动创建: dracut,mkinitrd(只是为了兼容,封装dracut)

模块文件: /lib/modules/VERSION-release
</code></pre><ul>
<li>ramdisk</li>
</ul>
<pre><code>centos5的 rd=ramdisk, 是把内存当做磁盘使用
centos6,7的ramfs=ram的文件系统
ramdisk是把内存当做磁盘使用, 我们知道使用磁盘一般会先加载到内存(buffer/cache),然后在使用, 为了读取更快
但是ramdisk的模式下磁盘就是内存,读取之前再次加载到buffer就没有意义了
因此centos6,7 使用ram的文件系统

ramdisk 其实是一个简装版的根文件系统
</code></pre><h4 id="centos系统mbr启动流程">centos系统mbr启动流程:</h4>
<pre><code>1. POST: 加电自检; (这是一段cpu在生产的时候烧写的程序)
    - ROM: CMOS
        - BIOS: Basic Input and Output System
    - ROM+RAM: CPU可以访问的寻址空间
2. Boot Sequence:
    - 按次序查找各引导设备, 第一个有引导程序的设备即为本次启动要用到的设备(u盘, 磁盘)
    - bootloader: 引导加载器,就是我们安装到磁盘或者u盘上的程序
            - Windows : ntloader
            - Linux:
            - LILO : LInux LOader (磁盘大于1024柱面无法加载,目前安卓手机)
            - GRUB : Grand Uniform Bootloader
                - GRUB 0.X(centos[56]) -&gt; 重名 Grub legacy
                - GRUB 1.X(centos7) -&gt; 完全重新,重名 Grub2
                - 功能: 提供一个菜单,允许用户选择要启动的系统或不同的内核版本;把内核装载到RAM的特定空间, 解压,把系统控制权交给内核
        - MBR : Master Boot Record
            - 512bytes:
            - 446bytes : bootloader,代码量小,不支持加载逻辑分区
            - 64bytes : fat 分区表
            - 2bytes : 55AA=有效,其他XXXX=无效
        - GRUB : 由于446bytes太小了, grub重新设计
            - bootloader : 第1阶段,以前的bootloader目的都是直接读取446bytes装载内核到ram空间,然后控制权交给内核, grub的bootloader作为第一步,主要就是为了第二部,加载/boot/grub,这段程序就可以不受MBR446bytes限制,可以操作性强, 甚至可以提供可交互的ui界面
            - Partition filesystem driver: 1.5 阶段 ? 为什么需要?
            - partition : /boot/grub , 第2阶段,此时该步骤的ui界面选择完内核之后,解压,把系统控制权交给内核
        - 了解 EFI(UEFI) GPT :
3. 加载Kernel: 内核获得控制权后
        - 自身初始化
            - 探测可识别到的所有硬件设备
            - 加载硬件驱动程序(有可能借助于ramdisk)
            - 以只读方式挂载跟文件系统(rootfs)
            - 运行用户控件的第一个应用程序: /sbin/init
                - init程序的类型
                - centos5 : SysV init
                    - 配置文件 : /etc/inittab
                - centos6 : Upstart
                    - 配置文件 :
                        - /etc/inittab 实际不用,兼容5
                        - /etc/init/*.conf
                - centos7 : Systemd
                    - 配置文件: /usr/lib/systemd/system, /etc/systemd/system


    系统初始化流程简单总结(内核) : 加电自检POST -&gt; BootSequence(BIOS) -&gt; 引导程序Bootloader(MBR) -&gt; 加载Kernel(ramdisk) -&gt; 挂载rootfs(readonly) -&gt; 初始化/sbin/init


4. 初始化 /sbin/init
    - centos5 : sysV init
        - 运行级别: 为了系统的运行或维护等目的而设计的机制;
            - 0-6:
                - 0 : 关机, shutdown
                - 1 : 单用户模式(single user): root用户, 无需认证, 维护模式
                - 2 : 多用户模式(multi user) : 会启动网络功能, 但不会启动NFS, 须认证,维护模式
                - 3 : 多用户模式(multi user) : 完全功能模式, 无桌面
                - 4 : 预留模式 : 无特别使用目的, 习惯同3界别功能
                - 5 : 多用户模式(multi user) : 完全功能模式, 有桌面
                - 6 : 重启模式
            - 默认级别: 3,5
            - 级别切换: init [0-6]
            - 级别查看: who -r  或 runlevel
        - 配置文件: /etc/inittab
            - 每一行定义一种action以及阈值对应的process
                - id:runlevels:action:process
                    - id: 一个任务的标识符
                    - runlevels: 在哪些级别启动此任务
                    - action : 在什么条件下启动此任务
                    - process : 程序
                - actions:
                    - wait : 等待切换至此任务所在的级别时执行一次 (l0:0:wait:/etc/rc.d/rc 0)
                    - respawn : 一旦此任务终止时,就自动重新启动 (1:2345:respawn:/sbin/mingetty tty1)
                    - initdefault : 设定默认运行级别 (id:3:initdefault:)
                    - sysinit : 设定初始化方式 (si::sysinit:/etc/rc.d/rc.sysinit)
                - /etc/rc.d/rc
                    - 该脚本会停止所有/etc/rc.d/rc$runlevel.d/K##*脚本,
                    - 启动所有/etc/rc.d/rc$runlevel.d/S##*脚本
                    - K,S 后面的数字表示启动和关闭的顺序
                - chkconfig : 管控/etc/init.d每个服务脚本在各个级别下的启动或关闭状态
                    - chkconfig --add nginxd : 添加到chkconfig管理, 即便脚本写成2345, 也会创建0-6级别所有都是Kxxnginxd
                        - 脚本格式:
                          - 方法1: 附录1
                          - 方法2: 附录2
                    - chkconfig nginxd on : 此时 2345 级别会创建Sxxnginxd
                    - chkconfig --level 35 nginxd : 修改35
                    - chkconfig nginxd off: 此时 2345 级别会创建Kxxnginxd
                    - chkconfig --del nginxd
                - 系统初始化脚本 : /etc/rc.d/rc.sysinit
                    - 1. 设置主机名
                    - 2. 设置欢迎信息
                    - 3. 挂载udev和selinux
                    - 4. 挂载/etc/fstab文件中定义的所有文件系统
                    - 5. 检测根文件系统, 并以读写方式重新挂载根文件系统
                    - 6 设置系统时钟
                    - 7 根据/etc/sysctl.conf设定内核参数
                    - 8 激活lvm 软raid设备
                    - 9 激活swap设备(/etc/fstab)
                    - 10 加载额外设备的驱动程序
                    - 11 清理操作

        系统初始化流程简单总结(用户空间): /sbin/init(/etc/inittab)
            设置默认运行级别 -&gt; 运行系统初始化脚本, 完成初始化 -&gt; 关闭对应级别下要停止的服务, 启动服务 -&gt; 设置登录终端

    - centos6
        - init程序: upstart, 但依然命名为/sbin/init
        - 配置文件: /etc/init/*.conf, /etc/inittab(也会读取, 但仅允许配置允许级别)

    - centos7
        - init程序: systemd
        - 配置文件: /usr/lib/systemd/system/*, /etc/systemd/system/*
        - 完全兼容sysV脚本机制

</code></pre><blockquote>
<p>附录1</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/bin/sh
</span><span class="cp"></span> <span class="c1">#filename: nginxd</span>
 <span class="c1"># nginx - this script starts and stops the nginx daemon</span>
 <span class="c1">#</span>
 <span class="c1"># chkconfig:   - 85 15</span>
 <span class="c1"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</span>
 <span class="c1">#               proxy and IMAP/POP3 proxy server</span>
 <span class="c1"># processname: nginx</span>
 <span class="c1"># config:      /etc/nginx/nginx.conf</span>
 <span class="c1"># config:      /etc/sysconfig/nginx</span>
 <span class="c1"># pidfile:     /var/run/nginx.pid</span>

 <span class="c1"># Source function library.</span>
 . /etc/rc.d/init.d/functions

 <span class="c1"># Source networking configuration.</span>
 . /etc/sysconfig/network

</code></pre></div><blockquote>
<p>附录2</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#! /bin/sh
</span><span class="cp"></span>
<span class="c1">### BEGIN INIT INFO</span>
<span class="c1"># Provides:          php-fpm</span>
<span class="c1"># Required-Start:    $remote_fs $network</span>
<span class="c1"># Required-Stop:     $remote_fs $network</span>
<span class="c1"># Default-Start:     2 3 4 5</span>
<span class="c1"># Default-Stop:      0 1 6</span>
<span class="c1"># Short-Description: starts php-fpm</span>
<span class="c1"># Description:       starts the PHP FastCGI Process Manager daemon</span>
<span class="c1">### END INIT INFO</span>
</code></pre></div><h4 id="grub">grub</h4>
<pre><code>grub : grand unified bootloader
    - grub 0.x : grub legacy
    - grub 1.x : grub2

grub legacy:
    stage1 : MBR
    stage1_5 : mbr之后的扇区,让stage1中的bootlo能识别stage2所在的分区上的文件系统
    stage2 : 磁盘分区(/boot/grub)

    配置文件 : /boot/grub/grub.conf &lt;- /etc/grub.conf

    stage2及内核等通常放置于一个基本磁盘分区:
        (1) 提供菜单,并提供交互式接口
            e: 编辑模式,用户编辑菜单
            c: 命令模式,命令接口
        (2) 加载用户所选择的内核
            允许传参给内核
            可隐藏此菜单
        (3) 为菜单提供保护机制
            为编辑菜单进行认证
            为启用内核或操作系统进行认证
    grub的命令接口:
        help: 帮助列表
        find (hd0,0)/vmlinux-两次tab
        root (hd0,0) 设置 (hd0,0) 为根
        kernel /vmlinuz-VERSION-release ro root=/dev/vg0/root, z表示压缩格式, 本次启动时用到的内核文件
        initrd /initrd-VERSION-release.img 或 /initramfs-VERSION-release.img
        boot 引导启动选定的内核
</code></pre><h4 id="模块module">模块module</h4>
<pre><code>内核模块管理 :
    lsmod: 显示内核已装载模块

    动态装卸载模块 :
        卸载 : modprobe -r MOD_NAME
        装载 : modprobe MOD_NAME

        装载 : insmod /path/to/module_file
        卸载 : rmmod MOD_NAME

    查看某模块的详细信息 :
        modinfo MOD_NAME

    检查并生成模块间依赖关系的命令 :
        depmod
</code></pre><h4 id="sysctl">sysctl</h4>
<ul>
<li>/proc</li>
</ul>
<pre><code># 路由转发功能
echo 1 &gt; /proc/sys/net/ipv4/ip_forward
# 清理cache
echo 1 &gt; /proc/sys/vm/drop_caches
# 当前主机名
cat /proc/sys/kernel/hostname
# 禁ping
echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all
</code></pre><ul>
<li>/sys目录</li>
</ul>
<pre><code>sysfs : 输出内核识别出的各硬件设备的相关属性信息
udev : 通过读取/sys目录的硬件设备信息 按需为硬件设备创建设备文件
</code></pre><h4 id="编译内核过程">编译内核过程</h4>
<pre><code>下载到/usr/src/linux-4.19.195.tar.xz
make menuconfig  配置内核选项
make
make modules_install 安装内核模块

screen:
    打开: screen
    拆除: ctrl+a,d
    列表: screen -ls
    连接至: screen -r screen_id  
    退出: exit
</code></pre><h4 id="sytemd">sytemd</h4>
<ul>
<li>systemd的新特性</li>
</ul>
<pre><code>系统引导时实现服务并行启动
按需激活进程
系统状态快照
基于依赖关系定义的服务控制逻辑
</code></pre><ul>
<li>核心概念-unit</li>
</ul>
<pre><code>由其相关配置文件进行标识,识别和配置;文件中主要包含了系统服务,监听的socket,保存的快照,init相关的信息
    /usr/lib/systemd/system
    /etc/systemd/system
    /run/systemd/system(不重要)
unit场均类型:
    Service uint(x.service): 用于定义系统服务
    Target unit(x.target) : 用于模拟实现&quot;运行级别&quot;,systemd是没有sysV的runlevel概念
    Device uint(x.device) : 用于定义内核识别的设备
    Mount uint(x.mount)   : 用于定义文件系统挂载点
    Socket uint(x.socket) : 用于表示进程间通信用到的socket文件
    Snapshot unit(x.snapshot) : 管理系统快照
    Swap uint(x.swap) : 用于管理标识swap设备
    AutoMount unit(x.automount): 文件系统自动挂载点设备
    Path unit(.path) : 用于定义文件系统中的一文件或目录

关键特性:
    基于socket的激活机制 : socket和程序分离
    基于bus的激活机制
    基于device的激活机制
    基于path的激活机制
    系统快照: 保存各unit的当前状态信息 于吃酒存储设备中
    向后兼容sysv init脚本
        /etc/init.d/ 目录下的文件可以通过systemctl管理
不兼容:
    systemctl的命令是固定的
    非由systemd启动的服务,systemctl无法控制

</code></pre><ul>
<li>常用命令</li>
</ul>
<pre><code># 查看是否激活
systemctl is-active nginx.service
# 查看已激活的service
systemctl list-units --type service
# 查看所有的服务
systemctl list-units -t service -a

# 设置开机启动(实际就是链接到: /etc/systemd/system/multi-user.target.wants)
systemctl enable nginx.service
# 查看是否能开机自启
systemctl is-enabled nginx.service
# 禁止/取消 某服务(就是链接: /etc/systemd/system/nginx.service -&gt; /dev/null)
systemctl mask nginx.service
systemctl unmask nginx.service


</code></pre><ul>
<li>管理target units</li>
</ul>
<pre><code>runlevel0.target -&gt; poweroff.target
runlevel1.target -&gt; rescue.target
runlevel2.target -&gt; multi-user.target
runlevel3.target -&gt; multi-user.target
runlevel4.target -&gt; multi-user.target
runlevel5.target -&gt; graphical.target
runlevel6.target -&gt; reboot.target

切换级别: init N -&gt; systemctl isolate NAME.target

查看级别: runlevel -&gt;  systemctl list-units -t target

获取默认运行级别 : systemctl get-default
修改默认运行级别 : systemctl set-default NAME.target

切换紧急救援模式(级别1) : systemctl rescue
切换紧急emergency模式(不会执行初始化脚本) : systemctl emergency

关机: systemctl halt, systemctl powerof
重启: systemctl reboot
骨气: systemctl suspend
快照: systemctl hybrid-sleep
快照并挂起: systemctl hybrid-sleep
</code></pre><ul>
<li>service unit file</li>
</ul>
<pre><code>[Unit] : 定义与unit类型无关的通用选项, 用于提供unit的描述信息, unit的欣慰及依赖关系等
    Description : 会显示到systemctl status 会显示
    After : 定义启动顺序关系
    Wants : 依赖到的其他units(弱依赖,依赖不启动自己可以激活)
    Requires : 依赖到的其他units(强依赖,依赖不启动自己无法激活)
    BindsTo : 与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行

[Service] : 与Service相关的选项
    Type : 定义启动时的进程行为。它有以下几种值。
        Type=simple : 默认值，执行ExecStart指定的命令，启动主进程
        Type=forking : 以 fork 方式从父进程创建子进程，创建后父进程会立即退出
        Type=oneshot : 一次性进程，Systemd 会等当前服务退出，再继续往下执行
        Type=dbus : 当前服务通过D-Bus启动
        Type=notify : 当前服务启动完毕，会通知Systemd，再继续往下执行
        Type=idle : 若有其他任务执行完毕，当前服务才会运行
    ExecStart : 启动当前服务的命令
    ExecStartPre : 启动当前服务之前执行的命令
    ExecStartPost : 启动当前服务之后执行的命令
    ExecReload : 重启当前服务时执行的命令
    ExecStop : 停止当前服务时执行的命令
    ExecStopPost : 停止当其服务之后执行的命令
    RestartSec : 自动重启当前服务间隔的秒数
    Restart : 定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog
    TimeoutSec : 定义 Systemd 停止当前服务之前等待的秒数
    Environment : 指定环境变量

[Install] : 定义由&quot;systemctl enable &quot; 和&quot;disable&quot;命令的时候用到
    WantedBy : 它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中
    RequiredBy : 它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中
    Alias : 当前 Unit 可用于启动的别名
    Also : 当前 Unit 激活（enable）时，会被同时激活的其他 Unit

&gt; 修改了unit配置需要执行: systemctl daemon-reload
&gt; 然后reload或restart
</code></pre><h3 id="运维安全">运维安全</h3>
<pre><code>客户端通过浏览器访问网页时, 客户端不需要发给服务端证书, 只需要验证服务端的正常(但是对于网银支付可能会需要安装证书,银行自己的CA,比如u盾)


ssl : secure sockets layer  
    netscape 1994
    v1(没公开), v2(95年,很多漏洞), v3
tls : transport layer security
    ietf 1999
    v1.0 v1.1 v1.2 v1.3

ssl会话主要三步
    1. 客户端向服务端索要并验证证书
    2. 双方协商生成&quot;会话密钥&quot;
    3. 双方采用&quot;会话密钥&quot;进行加密通信

    ssl handshake protocol :
        第一阶段 客户端发送client hello
             支持的协议版本, 比如tls v1.2
             客户端生成一个随机数, 稍后生成&quot;会话密钥&quot;
             支持的加密算法,比如AES(对称加密算法),RSA(公钥加密算法)
             支持的压缩算法
        第二阶段 服务端发送Server hello
            确认使用的加密通信协议版本, 比如tls v1.2 ;
            服务端生成一个随机数, 稍后生成&quot;会话密钥&quot;
            确认使用的加密方法, 比如 RSA
            服务端发送证书
            [如果需要验证客户端证书,会索要客户端证书...]
        第三阶段:
            客户端验证服务器证书(发证机构,完整性,持有者,有效期,吊销列表)
            客户端发送以下信息给服务端
                一个随机数
                编码变更通知,表示随后的信息将用双方商定的加密方式和密钥发送
                客户端握手结束通知
        第四阶段:
            服务端收到客户端发来的第三个随机数经过pre-master-key 混合后,计算生成本次所得到的的&quot;会话密钥&quot;
            向客户端发送如下信息
                编码变更通知,表示随后的信息将用双方商定的加密方式和密钥发送
                服务端握手结束通知

PKI: 公钥基础设施
    签证机构 CA
    注册机构 RA
    证书吊销列表 CRL
    证书存取库

openssl
    组件
        libcrypto,libssl,openssl

    openssl (多子命令):
        Standard commands
        Message Digest commands (see the `dgst' command for more details)
        Cipher commands (see the `enc' command for more details)

    对称加密
        工具: openssl enc, gpg
        支持算法: des3,aes,
        openssl enc 命令:
            加密解密:
            # -e encode
            # -a base64 编码
            ~]# openssl enc -e -des3 -a  -in b  -out b.encode
            ~]# openssl enc -d -des3 -a  -in b.encode  -out b.decode
    单向加密
        工具: openssl dgst, md5sum,sha1sum,sha224sum...
        dgst命令:
            ~]# md5sum b
                e6f443c6566d585113d137e0992d8391  b
            ~]# openssl dgst -md5 b
                MD5(b)= e6f443c6566d585113d137e0992d8391
    生成用户密码:
        工具: passwd, openssl passwd

        ~]# openssl passwd -1 -salt 123
            $1$123$ai3PKcU9Q7J3tIviFBaqN0
    随机数生成
        工具 openssl rand
        ~]# openssl rand -base64 32
        ~]# openssl rand -hex 10
    公钥加密:
        工具: openssl rsautl, gpg
        加密解密:
            算法: RSA , ELGamal
        数字签名:
            算法: RSA, DSA, ELGamal
        密钥交换
            算法: DH

        生成密钥对:
            # 放到括号代表是子shell执行的, 不影响当前shell的umask
            # umask 077 会让默认的644-077 =600权限
            生成私钥: ~]# (umask 077 ; openssl genrsa -out server.key 2048)
            提取公钥: ~]# openssl rsa -in server.key -pubout -out server.pub


linux的随机生成器:
    /dev/random : 仅从熵池中返回随机数, 随机数用尽,(阻塞)
    /dev/urandom : 仅从熵池中返回随机数, 随机数用尽,会利用软件生成伪随机数,(非阻塞,但不安全)
    熵池 :
        内核的空间
        来源:
            硬盘IO中断时间间隔
            键盘IO中断时间间隔

CA :
    建立私有CA:
        工具: openssl, openca
    openssl :
        配置文件: /etc/pki/tls/openssl.cnf
        步骤:
            1. 生成私钥;
                ~]# (umask 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 4096)
            2. 生成自签证书;
                # -new : 生成新证书部署请求
                # -x509 : 生成自签格式证书,专用于创建私有CA
                # -key : 生成请求用到的私有路径, 会提取公钥
                # -out : 生成的请求文件路径, 如果是自签操作将直接生成签署过的正式
                ~]# openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -out /etc/pki/CA/cacert.pem -days 3650
            3. 提供CA所需的目录及文件:
                ~]# mkdir -p /etc/pki/CA/{certs,crl,newcerts}
                ~]# touch  /etc/pki/CA/{serial,index.txt}
                ~]# echo 01 &gt; /etc/pki/CA/serial
    要用到证书进行安全通信的服务器, 需要向CA请求签署证书:
        步骤
            1) 生成私钥:
                ~]# (umask 077; openssl genrsa -out /etc/nginx/ssl/server.key 2048)
            2) 生成证书签署请求
                ~]# openssl req -new -key /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.csr -days 365

            3) 在CA服务器签署证书:
                ~]# openssl -ca in /etc/nginx/ssl/server.csr -out /etc/pki/CA/certs/server.crt -days 365

            4) 查看证书的信息:
                ~]# openssl -x509 -in /etc/pki/CA/certs/server.crt -noout -serial -subject

</code></pre><h3 id="dns">DNS</h3>
<h4 id="说明">说明</h4>
<pre><code>DNS: Domain Name Service : 应用层协议
    C/S: 53/udp(解析),53/tcp(区域传送)
tld : TOP level domain

DNS名解析方式:
    名称-&gt; ip : 正向解析
    ip -&gt; 名称: 反向解析
    注意: 二者非同一空间,非为同一棵树,两个完全独立的存储方式
DNS 解析过程:
    例如: 请求www.baidu.com
        1. 首先客户端会查找自己的host文件,
        2. 如果host没有, 就请求本地缓存,
        3. 如果缓存没有, 就请求/etc/resolv.conf的dns服务器
            3.1 dns服务器查找自己的域是否负责,是否能解析
            3.2 dns服务器如果不能解析,同样查找dns本地缓存,
            3.3 dns本地缓存也找不到,就去根域名查找-&gt;com服务器-&gt;baidu服务器-&gt;找到www.baidu.com 的解析条目
        4. /etc/resolv.conf的dns服务器拿到请求之后,返回给客户端
</code></pre><blockquote>
<p>反向解析树:
<img src="/images/66/markdown-img-paste-20210628102440183.png" alt=""></p>
</blockquote>
<pre><code>~]# dig -x 114.114.114.114
114.114.114.114.in-addr.arpa. 524 IN	PTR	public1.114dns.com.
</code></pre><h4 id="基础">基础</h4>
<pre><code>区域(zone)和域(domain)
    区域是物理概念, 域是逻辑概念
    magedu.com域:
        正向解析区域
        反向解析区域
区域数据库文件
    资源记录  : Resource Record
        类型 : A, AAAA, PTR, SOA , NS, CNAME, MX
        SOA : Start Of Authority ,起始授权记录;一个区域解析库只能有一个SOA记录,必须在第一条 (岛名)
        NS  : Name Service , 域名服务记录; 可以有多个(岛主)
        A   : Address , 地址记录, FQDN-&gt;IPv4 (32位)
        AAAA: Address FQDN-&gt;IPv6 (128位)
        CNAME: Canonical Name, 别名
        PTR : Pointer, IP-&gt;FQDN
        MX  : Mail Exchanger, 邮件交换器,可以多个
            优先级: 0-99, 数字越小优先级越高;

    资源记录的定义格式:
        域名: name [TTL] IN  RR_TYPE value
        SOA :
            name: 当前区域的名字; &quot;magedu.com.&quot; 或者&quot;3.2.1.in-addr.arpa.&quot; (最后一个点不能少);
            value: 多部分
                1): 当前区域的区域名称(也可以使用主DNS服务器名称);
                2): 当前区域管理的邮箱地址; 但地址中不能使用@符号,一般使用点号替代
                3): (主从服务协调属性的定义以及否定答案的TTL)
                    例如:
                        magedu.com. 86400 IN SOA magedu.com. admin.magedu.com. (
                            2017010801; serial 序列号
                            2H ; refresh 刷新时长
                            10M ; retry 重试时长
                            1w ; expire 过期时长
                            1D ; negative answer ttl 否定答案的ttl

                        )
        NS :
            name: 当前区域的区域名称
            value: 当前区域的某DNS服务器的名字, 例如ns.magedu.com. ;
                注意: 一个区域可以有多个ns记录
            例如:
                magedu.com. 86400 IN NS ns1.magedu.com.
                magedu.com. 86400 IN NS ns2.magedu.com.
        MX:
            name : 当前区域的区域名称
            value : 当前区域某邮件交换器的主机名;
                注意: MX记录可以有多个, 每个记录的value之前应该有一个数字, 表示优先级;
            例如:
                magedu.com. 86400 IN MX 10 mx1.magedu.com.
                magedu.com. 86400 IN MX 20 mx2.magedu.com.
        A :
            name: 某FQDN
            value: ipv4地址
            例如:
                www.magedu.com. IN A 1.1.1.1
                                IN A 1.1.1.2 (可以省略www.magedu.com.)
        PTR :
            name : ip地址, ip反过来写+.in-addr.arpa.
            value : FQDN
            例如:
                4.3.2.1.in-addr.arpa. IN PTR www.magedu.com.
        CNAME:
            name: FQDN格式的别名
            value : FQDN
            例如:
                web.magedu.com. IN CNAME www.magedu.com.

    注意:
        1) TTL 可以从全局继承;
        2) @表示当前区域的名称;
        3) 相邻的两个记录其name相同时 第二个可以省略
        4) 对于正向区域来说, MX,NS等记录的value为一个FQDN,此FQDN应该有一个A记录
</code></pre><h4 id="bind">bind</h4>
<pre><code>BIND: Berkeley Internet Name Domain 伯克利互联网名称域, ISC维护
程序包:
    bind-libs: (yum info bind-libs) 被bind和bind-utils包中的程序共同用到的;
    bind-utils : bind 客户端程序集, 例如: dig,host,nslookup等;
    bind: 提供dns server程序, 测试程序;
    bind-chroot : 选装, 让named运行于jail模式下
配置文件: rpm -lq bind|head -10
    主: /etc/named.conf
    其他:
        /etc/named.iscdlv.key
        /etc/named.rfc1912.zones
        /etc/named.root.key
    解析库文件:
        /var/named目录下:
            一般名字为: ZONE_NAME.zone
        注意:
            1) 可以配置多个区域提供解析
            2) 根区域解析库文件: /var/named/named.ca
            3) 正向解析localhost区域解析库文件: /var/named/named.localhost
               反向解析localhost区域解析库文件: /var/named/named.loopback
    rndc: remote name domain contoller
        127.0.0.1:953/tcp
    主配置文件格式:
        全局配置段:
            options{...}
        日志配置段
            logging{...}
        区域配置段
            zone{...} : 那些由本级负责解析的区域, 或者转发的区域

            注意: 每个配置语句 必须分号结尾;

        缓存名称服务器的配置:
            监听能与外部主机通信的地址;
                listen-on port 53 { 172.16.76.220;127.0.0.1; };
            学习时,建议关闭
                dnssec-enable no;
                dnssec-validation no;
                dnssec-lookaside no;
            关闭仅允许本地查询:(注释以下内容)
                allow-query     { localhost; };
        检查配置文件语法错误:
            /usr/sbin/named-checkconf [/etc/named.conf]
        启动:
            systemctl start named

        测试工具
            dig : dig [-t RR_TYPE] name [@SERVER] [query options]

                查询选项:
                    +[no]trace : 跟踪解析过程
                    +[no]recurese : 进行递归解析;

                    # 追踪查询解析的全过程
                    dig +trace -t A www.baidu.com
                注意: 反向解析测试
                    dig -x 140.205.41.17

                模拟完全区域传送:
                    dig -t axfr DOMAIN [@SERVER]
            host : host [-t RR_TYPE] name [SERVER]
            nslookup : nslookup [-options] [name] [server]
                &gt; 交互式
                &gt; server 114.114.114.114
                &gt; set q=A

            rndc命令: named 服务控制命令
                status : 统计
                flush  : 清空缓存
                reload [zone]


        配置解析一个正向区域:
            1) 定义区域:
                zone &quot;ZONE_NAME&quot; IN {
                    type {master|slave|hint|forward};    //主|从|跟|转发
                    file &quot;ZONE_NAME.zone&quot;;
                };

                ~]# tail -4 /etc/named.rfc1912.zones
                zone &quot;test.com&quot; IN {
                	type master;
                	file &quot;test.com.zone&quot;;
                };

                注意: 区域名字即域名

            2) 建立区域数据文件(/var/named, 内容主要是A记录)
                ~]# cat /var/named/test.com.zone
                $TTL 600
                $ORIGIN test.com.               //后面简写的结果自动追加该内容
                @   IN SOA @  mail.test.com. (    // @ 代表 test.com.
                        2021062801 1H 10M 3D 1D )
                    IN NS    ns1                    // 这里可以简写, 不能带.
                    IN NS    ns2.test.com.          // 必须最后一位加.
                    IN MX 10 mx1                    
                    IN MX 20 mx2.test.com.      
                ns1 IN A     172.16.76.220
                ns2 IN A     172.16.76.220
                mx1 IN A     172.16.76.220
                mx2 IN A     172.16.76.220
                www IN A     172.16.76.220
                web IN CNAME www

                ~]# chmod 640 test.com.zone
                ~]# chown :named test.com.zone
            3) 检查zone配置
                ~]# named-checkzone test.com /var/named/test.com.zone
                ~]# systemctl reload named

        配置解析一个反向区域:
            1) 定义区域:
                zone &quot;ZONE_NAME&quot; IN {
                    type {master|slave|hint|forward};    //主|从|跟|转发
                    file &quot;ZONE_NAME.zone&quot;;
                };
                注意: 反向域名的名字
                    反写的网段地址: .in-addr.arpa
                    76.16.172.in-addr.arpa

            2) 建立区域数据文件(/var/named, 内容主要是A记录)
            ~]# cat /var/named/172.16.76.zone
                $TTL 600
                $ORIGIN 76.16.172.in-addr.arpa.               //后面简写的结果自动追加该内容
                @   IN SOA @  mail.test.com. (    // @ 代表 test.com.
                        2021062801 1H 10M 3D 1D )
                    IN NS    ns1                    // 这里可以简写, 不能带.
                    IN NS    ns2.test.com.          // 必须最后一位加.
                220 IN PTR   ns1.test.com.  
                220 IN PTR   ns2.test.com.         

</code></pre><h4 id="bind主从">bind主从</h4>
<blockquote>
<p>仅仅是某个区域级别作为从</p>
</blockquote>
<pre><code>如何配置从区域:
  On Slave:
    1) 定义区域;
        zone &quot;ZONE_NAME&quot; IN {
            type slave;
            file &quot;slaves/ZONE_NAME.zone&quot;;
            master { master_ip; };
        配置语法检查: named-checkconf
    2) 重载
        rndc reload 或者systemctl reload named
    }
  On Master :
    1) 确保区域数据文件中 为每个从服务器配置NS记录,并且在正向区域文件中需要配置NS记录的A记录, 且A记录地址就是从服务器ip
            @   IN SOA @  mail.test.com. (    // @ 代表 test.com.
                2021062802 1H 10M 3D 1D )
                IN NS    ns2
            ns2 IN A     172.16.76.221

        &gt; 序列号+1,改变了序列号, 从库才更新
    2) 重载

手工传送配置:( 从172.16.76.220上同步配置 )
    ~]# dig -t axfr test.com @172.16.76.220
</code></pre><h4 id="子域授权">子域授权</h4>
<blockquote>
<p>magedu.com -&gt; ops.magedu.com</p>
</blockquote>
<pre><code>正向解析区域授权子域的方法:
    ops.magedu.com.      IN NS ns1.ops.magedu.com.
    ns1.ops.magedu.com.  IN A  IPAddress1
    ops.magedu.com.      IN NS ns2.ops.magedu.com.
    ns2.ops.magedu.com.  IN A  IPAddress2

定义转发:
    注意: 被转发的服务器, 必须允许为当前服务器做递归
    1) 区域转发: 仅转发某特定区域
        zone &quot;ZONE_NAME&quot; {
            type forward;
            forward { first|only };
            forwarders { server_ip; };
        };

        first: 首先转发,找不到, 就自己去迭代找根
        only: 只转发,一般是内部使用的域名

    2) 全局转发: 只要不是自己的都转发
        编辑named.conf-&gt;options{
            forward only;
            forwarders { server_ip; }
        }
</code></pre><h4 id="bind中的安全相关的配置">bind中的安全相关的配置</h4>
<pre><code>acl : 访问控制列表; 把一个或多个地址归并为一个命名的结合,随后通过此名称即可对此结合内的所有主机统一调用;
    配置文件: /etc/named.conf
    acl acl_name {
        ip;
        net/prelen;
    }
    示例:
        acl mynet {
            172.16.0.0/16;
            192.168.0.1/24;
        }
bind四个内置的acl
    none:
    any: 任意
    local: 本机
    localnet : 本机所在的ip所属的网络
访问控制指令:(options,zone)
    allow-query { mynet; }; 允许查询的主机; 白名单
    allow-transfer { myslaves; }; 允许向那些主机做区域传送;默认是所有; 应该配置为从服务器
    allow-recursion { mynet; }; 允许哪些主机向当前dns服务器进行递归查询(recursion yes 会修改成允许所有)
    allow-update { none; }; DDNS,允许动态更新区域数据库文件中的内容;
</code></pre><h4 id="bind-view-">bind view :</h4>
<pre><code>视图:
    view VIEW_NAME {
        zone
        zone
    }
    # 比如根据ip(电信的),访问该视图
    view internal {
        match-clients { 172.16.0.0/8; };
        zone &quot;magedu.com&quot; IN {
            type master;
            file &quot;magedu.com/internal&quot;;
        };
    };
    # 视图会按照配置顺序,没有匹配到的走该视图
    view external {
        match-cients { any; };
        zone &quot;magedu.com&quot; IN {
            type master;
            file &quot;magedu.com/external&quot;;
        };
    }
</code></pre><h3 id="http协议">http协议</h3>
<h4 id="tcp协议的特性">TCP协议的特性</h4>
<pre><code>建立连接:
将数据打包成段: 校验和(CRC32)
确认,重传和超时:
排序: 逻辑序号
流量控制: 滑动窗口win
拥塞控制: 慢启动和拥塞避免算法
</code></pre><h4 id="http-hyper-text-transfer-protocol-文本协议">http: hyper text transfer protocol ,文本协议</h4>
<pre><code>&gt; html: hyper text mark language 超文本标记语言
&gt; css : Cascading style sheet
&gt; js : javascript, 客户端脚本;

文本协议:  将内容编码成ascii传输, 但是对于图片使用文本协议直接传输会乱码
协议版本:
    http/0.9 : 原型版本,功能简陋
        method : 仅get
    http/1.0 : cache, MIME, method,
        MIME : Multipurpose Internet Mail Extesion  可以传输非文本内容,
        method : get, post, head, put, delete, trace , options
    http/1.1 : 增强了缓存功能;
    SPDY     : Google
    http/2   : rfc

http工作模式:
    http请求报文: request
    http响应报文: response
        一次http事务: 请求 &lt;--&gt; 响应
    web资源: web resource
        静态资源(无需服务端做出额外处理)
        动态资源(服务端需要通过执行程序做出处理,而后发送给客户端的是程序的运行结果)
    URI = URL+URN
    资源的标识机制: URL (Uniform Resource Locator)
</code></pre><h3 id="iptables-包过滤型的防火墙">iptables: 包过滤型的防火墙</h3>
<pre><code>5个钩子:
    1. prerouting : 在入路由之前
    2. 入route(两种情况)
        2.1 input: 路由到本机的请求
            2.1.1 output : 本机请求返回出去的
        2.2 forward: 路由转发到其他机器的请求
    3. 出route
    4. postrouting : 出路由之后

-&gt; prerouting -&gt; route -&gt; input -&gt;  route -&gt; output -&gt;  postrouting -&gt;
                    \     -&gt;         forward        -&gt;      /



---&gt;[NF_IP_PRE_ROUTING]---&gt;[ROUTE]---&gt;[NF_IP_FORWARD]---&gt;[NF_IP_POST_ROUTING]---&gt;
                              |                        ^
                              |                        |
                              |                     [ROUTE]
                              v                        |
                       [NF_IP_LOCAL_IN]        [NF_IP_LOCAL_OUT]
                              |                        ^
                              |                        |
                              v                        |
</code></pre><blockquote>
<p>以下图右边路由有点问题, forward -&gt;postrouting,  output -&gt; postrouting</p>
</blockquote>
<p><img src="/images/66/markdown-img-paste-20210629112733417.png" alt=""></p>
<h4 id="理论说明">理论说明</h4>
<pre><code>Firewall:
    主机防火墙：
    网络防火墙：

    软件防火墙(软件逻辑)
    硬件防火墙(硬件和软件逻辑)

iptables: 网络层防火墙
	iptables/netfilter

	ipfw --&gt; ipchains --&gt; iptables
		让用户编写规则

	netfilter: framework
		hook function
			PREROUTING：路由前
			INPUT：到达本机内部的报文必经之路
			FORWARD：由本机转发的报文必经之路
			OUTPUT：由本机发出的报文的必经之路
			POSTROUTING：路由后

    规则的功能：
		raw, mangle, nat, filter

		filter: 过滤，定义是否允许通过防火墙
		nat: 地址转换，启用connection_track;(目的是为了隐藏内部主机)
			SNAT 源地址转换
			DNAT 目标地址
			PNAT 目标端口
		mangle: 拆解报文,作出修改, 重新封装
		raw: 关闭nat表上启用的连接追踪功能； 连接追踪表,

    表和链的对应关系：
        raw: PREROUTING, OUTPUT
        mangle: PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING
        nat: PREROUTING（SNAT），POSTROUTING（DNAT），[INPUT，] OUTPUT
        filter: INPUT, FORWARD, OUTPUT

    数据报文流程：
        跟本机内部进程通信：
            进入：PREROUTING, INPUT
            出去：OUTPUT, POSTROUTING

        由本机转发：
            PREROUTING, FORWARD, POSTROUTING


        数据报文的流向：
            源IP和目标IP由流向决定；
            流入报文经由路径：PREROUTING --&gt; INPUT
            流出报文经由路径：OUTPUT --&gt; POSTROUTING
            转发报文经由路径：PREROUTING --&gt; FORWARD --&gt; POSTROUTING

    总结：iptables/netfilter
        5个钩子：生成5个内置链
</code></pre><p><img src="/images/66/markdown-img-paste-20210629150606899.png" alt=""></p>
<h4 id="iptables-使用">iptables 使用</h4>
<p><img src="/images/66/markdown-img-paste-2021062917492962.png" alt=""></p>
<pre><code>
iptables: 用户空间的工具，写规则，并自动发往netfilter，立即生效； 规则都是写在链上
netfilter: 接收并生效规则；

链: 链上的规则次序, 即为检查的次序,因此隐含一定的应用法则
    1) 同类规则(访问同一应用), 匹配范围小的放上面
    2) 不同类规则(访问不同应用),匹配到报文频率较大的放上面
    3) 将那些可由一条规则描述的多个规则合并
    4) 设置默认策略

基本语法：
    高度模块化,由诸多扩展模块实现其检测条件或处理动作的定义
        rpm -ql iptables :
            ipv6: /usr/lib64/xtables/libip6t
            ipv4: /usr/lib64/xtables/libipt,/usr/lib64/xtables/libxt


    iptables [-t TABLE] COMMAND CHAIN  CRETIRIA -j TARGET
    Iptables [-t table] COMMAND chain [-m matchname [per-match-options]] - targetname [per-target-options]

    -t TABLE:
        nat, mangle, raw, filter
        默认为filter

    COMMAND: 管理命令
        链：
            -N：new, 自建一条链
                iptables -N in_web_rules
            -X: delete, 删除一条自定义的空链
                注意: 仅能删除用户自定义的 引用计数为0的空的链;
                iptables -X in_web_rules
            -P：policy，设置默认策略，对filter表来讲，默认规则为ACCEPT或DROP；
            -E：重命名自定义链
                iptables -E in_web_rules in_web_rules2

        链中的规则：
            -A: append 追加
            -I: insert 插入,指明位置,省略表示第一条
            -D: delete
                1) 指定规则序号
                    iptables -D FORWARD 1
                2) 指定规则本身
            -R: replace
            -F：flush, 清空规则链；
            -Z：zero，计数器归零

        查询：
            -L
                -n: 数字格式显示主机地址和端口；
                -v: 详细格式，-vv, -vvv
                --line-numbers: 显示规则编号

                    pkts bytes  target     prot opt in        out         source               destination
                    包数 字节数   目标       协议  流入的接口  流出的接口   源地址               目标地址

                -x: exactly，不要对计数器的计数结果做单位换算，而显示其精确值

                例如:( L是命令, 必须放在最后, 其他的是修饰L的)
                    iptables -n nat -nvxL --line-numbers
                    iptables -nxvL INPUT --line-numbers

    iptables [-t TABLE] -A 链名 匹配条件 -j 处理目标
        匹配条件：
            通用匹配: 无需加载任何模块
                [!] -s 地址：指定报文源IP地址匹配的范围；可以是IP，也可以是网络地址；可使用!取反；
                    --src, --source
                [!] -d 地址：指定报文目标IP地址匹配的范围；
                    --dst, --destination
                [!] -p 协议：指定匹配报文的协议类型，一般有三种tcp, udp和icmp;
                [!] -i INTERFACE: 数据报文流入的接口；PREROUTING, INPUT, FORWARD
                [!] -o INTERFACE: 数据报文流出的接口；OUTPUT, FORWARD, POSTROUITING

                例如:
                    # 设置默认只能被172.16.0.0/16 网段访问
                    iptables -t filter -A INPUT -s 172.16.0.0/16 -d 172.16.76.220 -p tcp -j ACCEPT
                    # 设置默认只能访问172.16.0.0/16 网段
                    iptables -t filter -A OUTPUT -s 172.16.76.220 -d 172.16.0.0/16 -p tcp -j ACCEPT
                    # 设置默认入口和出口为DROP
                    iptables -P INPUT DROP
                    iptables -P OUTPUT DROP

                    # 仅允许172.16.76.0/24 网段ping
                    iptables -A INPUT ! -s 172.16.76.0/24 -d 172.16.76.220 -p icmp -j DROP

            扩展匹配
                隐式扩展：当使用-p {tcp|udp|icmp}中的一种时，可以直接使用扩展专用选项；
                    -p tcp:
                        [!] --sport PORT[-PORT]: 指定源端口,可以是范围
                        [!] --dport PORT[-PORT]: 指定目标端口,可以是范围
                        [!] --tcp-flags mask comp
                            例如:
                                # 三次握手的第一次: FIN=1,ACK=0,FIN=0,RST=0
                                &quot;--tcp-flags SYN,ACK,FIN,RST FIN&quot; : 表示第一个参数四个表示位是需要检查的, 第二个参数FIN则必须是1
                        [!] --syn : 常用,简写; 相当于&quot;--tcp-flags SYN,ACK,FIN,RST FIN&quot;

                    -p udp:
                        [!] --sport
                        [!] --dport
                    -p icmp
                        [!] --icmp-type 8 : ping 的请求包
                        [!] --icmp-type 0 : ping 的返回包

                        例如:
                            # 我们想要让局域网可以ping本机, 但是不允许本机ping外网
                            #1. 首先加上禁止规则
                            iptables -A INPUT -d 172.16.76.220 -p icmp -j REJECT
                            iptables -A OUTPUT -s 172.16.76.220 -p icmp -j REJECT
                            #2. 首先允许 接收 --icmp-type 8 的请求 (此时ping数据只能进不能出)
                            iptables -I INPUT 1 -s 172.16.76.0/24 -d 172.16.76.220 -p icmp --icmp-type 8 -j ACCEPT
                            #3. 再允许出
                            iptables -I OUTPUT 1 -s 172.16.76.220 -d 172.16.76.0/24 -p icmp --icmp-type 0 -j ACCEPT

                显式扩展(装入模块)：必须明确说明使用哪个模块进行扩展，而后才能使用其扩展专用选项；
                    -m 扩展模块名称

                    模块：iptables，netfilter各拥有一部分代码

                    1. multiport: 多端口匹配
                        可用于匹配非连续或连续端口；最多指定15个端口；

                        专用选项：
                            [!] --source-ports, --sports port[,port,port:port]
                            [!] --destination-ports, --dports
                            [!] --ports

                        例子：
                            ~]# iptables -I INPUT -d 172.16.100.7 -p tcp -m multiport --dports 22,80 -j ACCEPT
                            ~]# iptables -I OUTPUT -s 172.16.100.7 -p tcp -m multiport --sports 22,80 -j ACCEPT
                            ~]# iptables -I INPUT -s 172.16.0.0/16 -d 172.16.100.7 -p tcp -m multiport --dports 30000:31000,22,80 -j ACCEPT

                    2. iprange: 匹配指定范围内的地址；
                        匹配一段连续的地址而非整个网络时有用；

                        专用选项：
                            [!] --src-ragne IP[-IP]
                            [!] --dst-range

                        ~]# iptables -A INPUT -d 172.16.100.7 -p tcp --dport 23 -m iprange --src-range 172.16.100.1-172.16.100.100 -j ACCEPT
                        ~]# iptables -A OUTPUT -s 172.16.100.7 -p tcp --sport 23 -m iprange --dst-range 172.16.100.1-172.16.100.100 -j ACCEPT

                    3. time: 基于时间做访问控制
                        专用选项：
                            --datestart YYYY[-MM][-DD[Thh[:mm[:ss]]]]
                            --datestop

                            [!] --timestart hh:mm[:ss]
                            [!] --timestop hh:mm[:ss]

                            --weekdays day[,day]
                                Mon, Tue,
                            --kerneltz : 使用内核配置的时区而非默认的UTC ;

                            ~]# iptables -I INPUT -d 172.16.100.7 -p tcp --dport 80 -m time --timestart 08:20 --timestop 18:40 --weekdays Mon,Tue,Thu,Fri -j REJECT
                            ~]# iptables -I INPUT -d 172.16.100.7 -p tcp --dport 80 -m time --timestart 08:20 --timestop 18:40 --weekdays 1,2,3,4,5 --kerneltz -j REJECT

                    4. string: 字符串匹配，能够检测报文应用层中的字符串
                        注意: 只能检测明文, 对于https,ssh协议的编码的无法过滤

                        字符匹配检查高效算法
                            kmp, bm

                        专用选项：
                            --algo {kmp|bm}
                            [!] --string &quot;STRING&quot;
                            [!] --hex-string &quot;HEX_STRING&quot;: HEX_STRING为编码成16进制格式的字串；

                        ~]# iptables -I OUTPUT -m string --algo kmp --string &quot;sex&quot; -j DROP

                    5. connlimit: 连接数限制，对每IP所能够发起并发连接数做限制；
                        专用选项：
                            [!] --connlimit-above [n] 大于等于 拒绝
                            [!] --connlimit-upto [n]  小于等于允许
                            ~]# iptables -I INPUT -d 172.16.76.220 -p tcp --dport 22 -m connlimit --connlimit-above 2 -j DROP
                            ~]# iptables -R INPUT 1 -s 172.16.0.0/16 -d 172.16.76.220 -p tcp --dport 22 -m connlimit --connlimit-upto 2 -j ACCEPT

                    6. limit: 速率限制; 限制的是每秒的报文

                        注意: 令牌桶的方式限制速率, 比如发5个令牌, 拿一个通过一个,没有令牌了就阻塞

                        专用选项：
                            --limit n[/second|/minute|/hour|/day]
                            --limit-burst n

                        例子：
                        # iptables -A INPUT -d 172.16.76.220 -p icmp --icmp-type 8 -m limit --limit 20/minute --limit-burst 5 -j ACCEPT
                        # 限制 本机某tcp服务接收新请求的速率: 使用--syn + -m limit

                    7. state: 状态检查,连接追踪
                        &gt; 内核内存空间保存 客户端的访问记录

						专用选项：
							--state

						连接追踪中的状态：
							NEW: 新建立一个会话(跟协议无关, 可以追踪tcp,udp,icmp )
							ESTABLISHED：已建立的连接
                            UNTRACKED: 未追踪的
							RELATED: 有关联关系的连接
							INVALID: 无法识别的连接


						调整连接追踪功能所能容纳的连接的最大数目：
							/proc/sys/net/nf_conntrack_max

						当前追踪的所有连接
							/proc/net/nf_conntrack

						不同协议或连接类型追踪时的属性：
							/proc/sys/net/netfilter目录：

						放行被动模式下的FTP服务：
							1、装载模块/lib/modules/KERNEL_VERSION/kernel/net/netfilter/
								模块：nf_conntrack_ftp
                                命令: modprobe nf_conntrack_ftp

							2、放行请求报文：
							 	1）放行NEW状态对21端口请求的报文；
							 	2) 放行ESTABLISHED以及RELATED状态的报文

							 3、旅行响应报文：
							 	(1) 放行ESTABLISHED以及RELATED状态的报文

                        例如:
                            ~]# iptables -A INPUT -d 172.16.76.220 -p tcp -m multiport --dports 22,8011,80,3306 -m state --state NEW -j ACCEPT
                            ~]# iptables -A INPUT -d 172.16.76.220 -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT
                            ~]# iptables -A OUTPUT -s 172.16.76.220 -m state --state ESTABLISHED,RELATED -j ACCEPT

        处理动作:
            基本处理动作: ACCEPT, DROP
            扩展处理动作: REJECT, RETURN , LOG, REDIRECT ,...
                REJECT:
                    --reject-with type
                    The type  given  can  be  icmp-net-unreachable,  icmp-host-unreachable,  icmp-port-unreachable,  icmp-proto-unreachable,  icmp-net-prohibited,icmp-host-prohibited,  or  icmp-admin-prohibited  (*), which return the appropriate ICMP error message (icmp-port-unreachable is the default).

                LOG :
                    --log-level
                    --log-prefix
                    默认日志保存于/var/log/message
                    ~]# iptables -R INPUT 1 -d 172.16.76.220 -p tcp ! --dport 22 -j LOG --log-prefix &quot;mylog &quot; --log-level 2
            用户自定义链:

                ~]# iptables -N in_ping_rules
                ~]# iptables -A in_ping_rules -s 172.16.76.0/24 -d 172.16.76.220 -p icmp --icmp-type 8 -j ACCEPT
                ~]# iptables -A in_ping_rules  -d 172.16.76.220 -p icmp  -j REJECT
                ~]# iptables -A INPUT -d 172.16.76.220 -j in_ping_rules


    centos6:
        保存启用中的规则于规则文件中：
                1、# iptables-save &gt; /etc/sysconfig/iptables
                2、# service iptables save

        生效规则文件中的规则：
                1、# iptables-restore &lt; /etc/sysconfig/iptables
                2、# service iptables restart
                    执行的操作：清空现有规则，读取并生效规则文件中的规则
    centos7:
        1) 自定义unit file, 进行iptables-restore
        2) firewalld服务
        3) 自定义脚本

</code></pre><h4 id="练习">练习</h4>
<pre><code>
练习：INPUT和OUTPUT默认策略为DROP；

	1、限制本地主机的web服务器在周一不允许访问；新请求的速率不能超过100个每秒；web服务器包含了admin字符串的页面不允许访问；web服务器仅允许响应报文离开本机；
		iptables -I INPUT -d 172.16.76.220 -p tcp -m multiport --dports 8011,80,443 -m time --weekdays 2,3,4,5,6,7 -j ACCEPT  

        iptables -I INPUT -d 172.16.76.220 -p tcp -m multiport --dports 8011,80,443 -m state --state NEW -m limit --limit 100/second -j ACCEPT

        iptables -I INPUT -d 172.16.76.220 -p tcp -m multiport --dports 8011,80,443 -m string --algo kmp --string &quot;admin&quot; -j REJECT

        iptables -I OUTPUT -s 172.16.76.220 -tcp -m multiport --dports 8011,80,443 -m state --state ESTABLISHED,RELATED -j ACCEPT

	2、在工作时间，即周一到周五的8:30-18:00，开放本机的ftp服务给172.16.0.0网络中的主机访问；数据下载请求的次数每分钟不得超过5个；
        iptables -I  INPUT 3 -s 172.16.0.0/16 -d 172.16.76.220 -p tcp -m multiport --dports 21,1024:65535 -m time --timestart 8:30 --timestop 18:00 --kerneltz -j ACCEPT  

        iptables -I INPUT 4 -s 172.16.0.0/16 -d 172.16.76.220 -p tcp -m multiport --dports 1024: -m limit --limit 5/minute -j ACCEPT

	3、开放本机的ssh服务给172.16.x.1-172.16.x.100中的主机，x为你的座位号，新请求建立的速率一分钟不得超过2个；仅允许响应报文通过其服务端口离开本机；

        iptables -I INPUT -p tcp -m iprange --src-range 172.16.x.1-172.16.x.100 -m state --state NEW -m limit --limit 2/minute -j ACCEPT
        iptables -I OUTPUT -p tcp --sport 22 -j ACCEPT

	4、拒绝TCP标志位全部为1及全部为0的报文访问本机；
        iptales -I INPUT -d 172.16.76.220 -p tcp --tcp-flags SYN,ACK,FIN,RST SYN,ACK,FIN,RST  -j REJECT
        iptales -I INPUT -d 172.16.76.220 -p tcp --tcp-flags SYN,ACK,FIN,RST   -j REJECT

        [root@centos7 ~]#iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
        [root@centos7 ~]#iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

	5、允许本机ping别的主机；但不开放别的主机ping本机；

        iptables -I INPUT -p icmp --icmp-type 8 -j REJECT
        iptables -I INPUT -p icmp --icmp-type 0 -j ACCEPT  
        iptables -I OUTPUT  -p icmp --icmp-type 8 -j ACCEPT





	练习：判断下述规则的意义：
	# iptables -N clean_in
        创建自定义链 clean_in
	# iptables -A clean_in -d 255.255.255.255 -p icmp -j DROP
        自定义链clean_in 最后一行追加规则, 禁止目标地址是255.255.255.255的icmp报文
	# iptables -A clean_in -d 172.16.255.255 -p icmp -j DROP
        禁止目标地址是172.16.255.255的icmp报文
	# iptables -A clean_in -p tcp ! --syn -m state --state NEW -j DROP
        所有新建连接 不是三次握手第一次的 都拒绝
	# iptables -A clean_in -p tcp --tcp-flags ALL ALL -j DROP
        拒绝tcp报文标志位是全1的报文
	# iptables -A clean_in -p tcp --tcp-flags ALL NONE -j DROP
        拒绝tcp报文标志位是全0的报文
	# iptables -A clean_in -d 172.16.100.7 -j RETURN
        目标地址是172.16.100.7的直接返回
	# iptables -A INPUT -d 172.16.100.7 -j clean_in
        目标地址是172.16.100.7 的匹配自定义链clean_in中的规则

	# iptables -A INPUT  -i lo -j ACCEPT
        本地回环网卡输入请求全部通过
	# iptables -A OUTPUT -o lo -j ACCEPT
        本地回环网卡输出请求全部通过


	# iptables -A INPUT  -i eth0 -m multiport -p tcp --dports 53,113,135,137,139,445 -j DROP
        本地eth0网卡 53,113,135,137,139,445端口的tcp请求全部拒绝
	# iptables -A INPUT  -i eth0 -m multiport -p udp --dports 53,113,135,137,139,445 -j DROP
        本地eth0网卡 53,113,135,137,139,445端口的udp请求全部拒绝
	# iptables -A INPUT  -i eth0 -p udp --dport 1026 -j DROP
        本地eth0网卡 1026端口的udp请求拒绝
	# iptables -A INPUT  -p icmp -m limit --limit 10/second -j ACCEPT
        仅允许每秒10次的ping报文
</code></pre><h4 id="命令总结">命令总结</h4>
<pre><code>iptables:
    [-t table ] COMMAND [chain] rule-specification
        -m matchname [per-match-options]
        -t targetname [per-target-options]
        [options]
    匹配条件：
    	基本匹配条件：-s，-d，-p，-m-，-扩展匹配条件：
    		隐式扩展：
    	 		-p tcp: --dport, --sport, -tcp-flags,--syn
    	 		-p udp:--dport,--sport
    	 		-p imcp:--icmp-type
    		显式扩展：
    	 		multiport: --sports, --dports
    	 		iprange: --src-range,-dst-range
    	 		time: -timestart, -timestop, --weekdays, -monthdays, --datestart,--datestop
    	 		string: --algo {bm kmp), --string
    	 		connlimit: --connlimit-upto, -connllimit-above
    	 		limit: --limit, --limit-burst
    	 		state: --state
    	 			NEW, ESTABLISHED, RELATED, INVALID, UNTRACKED

    Target:
    	-j:
    		ACCEPT/DROP
    		REJECT: --reject-with
    		LOG: --log-level, -log-prefix
            自定义链
            RETURN
</code></pre><h4 id="iptables-forward链">iptables forward链</h4>
<p><img src="/images/66/markdown-img-paste-20210702134647247.png" alt=""></p>
<pre><code>iptalbes -A FORWARD -j REJECT
# 因为forward 在入和出都是经过的链路
iptables -I FORWARD -s 192.168.10.0/24 -p tcp --dport 80 -j ACCEPT
iptables -I FORWARD -d 192.168.10.0/24 -p tcp --dport 80 -j ACCEPT

#  默认设置允许出
iptables -I FORWARD -m state --state ESTABLISHED -j ACCEPT
# 允许网络 192.168.10.0/24 访问 (172.16.0.67) 80 端口
iptables -I FORWARD -s 192.168.10.0/24 -p tcp --dport 80 -m state --state NEW -j ACCEPT
# 允许 访问192.168.10.2的80
iptables -I FORWARD -d 192.168.10.2 -p tcp --dprot 80 -m state --state NEW -j ACCEPT
</code></pre><h4 id="iptables-nat">iptables NAT</h4>
<pre><code>为了解决内网ip不暴露给外网
同事解决了ipv4不足的问题

# SNAT : 客户端出去的时候, 路由修改源ip地址(保护客户端的本地ip)
# DNAT : 服务端被请求的时候, 服务端的路由修改报文的目的ip(保护服务端的内网ip)
# PAT  : 端口地址转换(更多是修改目标端口)

DNAT 是应该在iptables的哪个链路修改呢?
比如 client =&gt; server -&gt; prerouting -&gt; router -&gt; input   ❌这就会路由本机请求了
                                |            \_&gt; forward ❌这就是直接路由了, 只是修改mac地址
                                 \_&gt; ✅ 在pretouring的时候修改就可以了

SNAT 应该是在iptables  POSTROUTING的时候修改


    SNAT
        --to-sourece 转到静态ip
        --random  实现负载均衡
        --persistent
    MASQUERADE (SNAT功能, 动态ip的场景)
    DNAT
        --to-destination [addr:port] 转到静态ip
        --random  实现负载均衡
        --persistent
    REDIRECT
        --to-ports port

&gt; 但是现在我们都不使用iptables来实现了,有专门的lvs

&gt; 注意: 虽然路由器上没有监听对应的端口来转发, 但是它在内核已经具有了转发功能, 不需要在用户态假装开启了某个端口作为转发

</code></pre><p><img src="/images/66/markdown-img-paste-20210702134647247.png" alt=""></p>
<pre><code># 例子 隐藏内部网络客户端ip -&gt; SNAT
iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -j SNAT --to-source 172.16.0.6
</code></pre><p><img src="/images/66/markdown-img-paste-20210702143310515.png" alt=""></p>
<pre><code># 例子 因此内部往来服务器ip -&gt; DNAT
iptables -t nat -A PREROUTING -d 172.16.0.67 -p tcp --dport 80 -j DNAT --to-destination 192.168.10.2
# 此时如果要拒绝, 由于dnat已经修改了目标地址,所以-d 不是172, 而是192
iptables -A FORWARD -s 172.16.0.200 -p tcp --dport 80 -d 192.168.10.2 -j REJECT
</code></pre><h3 id="io模型">IO模型</h3>
<pre><code>I/O模型：
    模型:
	   阻塞型、 一般io阻塞是不可中断的状态
       非阻塞型、
       复用型、
       信号驱动型、
       异步

    一次文件O请求，都会由两阶段组成：
       第一步：等待数据，即数据从磁盘到内核内存(消耗时间)
       第二步：复制数据，即数据内核内存到进程内存

       注意:
           阻塞型: 第一步和第二步 都是阻塞
           非阻塞型: 第一步非阻塞,第二步是阻塞

	同步/异步：
		关注消息通知机制
		消息通知：
			同步：等待对方返回消息
			异步：被调用者通过状态、通知或回调机制通知调用者被调用者的运行状态
	阻塞/非阻塞：
		关注调用者在等待结果返回之前所处的状态
			阻塞： blocking，调用结果返回之前，调用者被挂起
			非阻塞： nonblocking，调用结果返回之前，调用者不会被挂起

	复用型io调用：
        &gt; 在特殊的组件上阻塞,io复用器可以帮助某个用户进程监控io阻塞, 只不过不会阻塞用户进程, 阻塞的位置不同
 		select(): 最高并发1024
 		poll():

        event-driven: (信号驱动型)
            epoll(linux): libevent
            kqueue(bsd)
            /dev/poll(solaris)
</code></pre><p><img src="/images/66/markdown-img-paste-2021070215362884.png" alt=""></p>
<h3 id="缓存">缓存</h3>
<pre><code>二八模型
使用线上数据先对缓存进行压测, 等待缓存服务器warm up

缓存命中率
    页面命中率
    字节命中率
缓存与否
    私有数据
    公共数据
缓存模式
    代理式缓存:
        未命中, 缓存服务器去找后端RS
        http+缓存 (squid,varnish )
        squid 和varnish的关系就像 apache 和nginx
    旁挂式缓存:
        未命中, 客户端自己去找后端RS
        专用缓存(memorycache,redis )


cache-response-directive =
      &quot;public&quot;                               
    | &quot;private&quot; [ &quot;=&quot; &lt;&quot;&gt; 1#field-name &lt;&quot;&gt; ]
    | &quot;no-cache&quot; [ &quot;=&quot; &lt;&quot;&gt; 1#field-name &lt;&quot;&gt; ] ,可以缓存,但是响应给客户端之前需要请求服务端条件式验证缓存是否有效,
    | &quot;no-store&quot;   , 不允许存储响应内容于缓存中                         
    | &quot;no-transform&quot;                         
    | &quot;must-revalidate&quot; 同 no-cache                     
    | &quot;proxy-revalidate&quot;                    
    | &quot;max-age&quot; &quot;=&quot; delta-seconds            
    | &quot;s-maxage&quot; &quot;=&quot; delta-seconds           
    | cache-extension            
</code></pre><p><img src="/images/66/markdown-img-paste-20210709182934970.png" alt=""></p>
<p><img src="/images/66/markdown-img-paste-20210709183834825.png" alt="">
<img src="/images/66/markdown-img-paste-20210709184000155.png" alt="">
<img src="/images/66/markdown-img-paste-20210709183933301.png" alt=""></p>
<h4 id="varnish">varnish</h4>
<pre><code>操作符:
    ==,!=,~,&gt;,&gt;=,&lt;,&lt;=
    逻辑 &amp;&amp;,||,!
    赋值 =

内建变量
    req.*   : 客户端发来的请求报文
        (be)req.http.*
            req.http.User-Agent ~ &quot;chrome&quot;
            req.http.Cookie
            (be)req.http.Reffer
            (be)req.http.HEADERS
        (be)req.request : 请求方法
        (be)req.url  请求url
        (be)req.proto
        (be)req.backend
    resp.*   : varnish发送给client
        (be)resp.http.HEADERS
        (be)resp.status
        (be)resp.backend.name backend主机名
        (be)resp.ttl
        (be)resp.proto
    bereq.*  : 由varnish发给backend主机的httpd请求
    beresp.* : 由backend响应给varnish的报文
    obj.*    : 保存在缓存空间的缓存对象
        ojb.hits
        obj.ttl
    server.*
        server.ip
        server.hostname
    client.*
        client.ip
内建函数
    regsub(str,regex,sub)
    regsuball(str,regex,sub)
    ban(boolean expression)
    hash_data(input)
client side :
    vcl_deliver: 直接发送客户端
    vcl_pipe: 没有匹配到的规则
    vcl_pass:

</code></pre><ul>
<li>
<p>内置变量是否可以修改
<img src="/images/66/markdown-img-paste-20210712110939380.png" alt=""></p>
</li>
<li>
<p>示例1 obj.hits 内建变量</p>
</li>
</ul>
<pre><code>sub vcl_deliver {
    if (obj.hits &gt; 0 ) {
        set resp.http.X-cache = &quot;Hit via &quot;+server.ip;
        set resp.http.X-hit-count =  &quot;Hit &quot;+obj.hits ;
    } else {
        set resp.http.X-cache = &quot;Miss from &quot;+server.ip;
    }
}
</code></pre><ul>
<li>示例2 是否区分大小写</li>
</ul>
<pre><code>sub vcl_recv {
    # 禁用curl请求
    if (req.http.User-Agent ~ &quot;(?i)curl&quot;) {
		return(synth(403));
	}
    # login或者admin开头的不缓存
    if (req.url ~ &quot;(?i)^/(login|admin)&quot; ) {
    		return(pass);
    	}
}

</code></pre><ul>
<li>示例3 特定类型的资源,例如公开的图片等,取消其私有标识,并强行设定其可以由varnish缓存的时长</li>
</ul>
<pre><code>sub vcl_backend_response {
    if (beresp.http.Cache-Control !~ &quot;(?i)s-maxage&quot;) {
        if (bereq.url ~ &quot;(?i)\.(jpg|jpeg|png|gif|css|js)&quot;) {
            unset beresp.http.Set-Cookie ;
            set beresp.ttl = 3600s;
        }
    }
}
</code></pre><ul>
<li>示例4 透传真实客户端ip</li>
</ul>
<pre><code>#
sub vcl_recv {
    # 是否是新连接
    if (req.restarts == 0) {
        if (req.http.X-Fowarded-For) {
            set req.http.X-Forwarded-For = req.http.X-Forwarded-For + &quot;,&quot;+client.ip;
        }else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }
}
</code></pre><ul>
<li>示例5 清理缓存,修建方式</li>
</ul>
<blockquote>
<p><a href="https://book.varnish-software.com/4.0/chapters/Cache_Invalidation.html">https://book.varnish-software.com/4.0/chapters/Cache_Invalidation.html</a></p>
</blockquote>
<ul>
<li>purge配置</li>
</ul>
<pre><code>#定义允许清理缓存的IP
acl purgeip {
    &quot;127.0.0.1&quot;;
    &quot;localhost&quot;;
    &quot;10.10.53.197&quot;;
}

sub vcl_recv {
     #匹配清理缓存的请求
     if (req.method == &quot;PURGE&quot;) {
        #如果发起请求的客户端IP 不是在acl purge里面定义的 就拒绝
         if (client.ip ~ purgeip) {
	            return (purge);  #清除缓存
         }
         return (synth(405, &quot;This IP is not allowed to send PURGE requests.&quot;));
     }
sub vcl_purge {
     return (synth(200, &quot;Purged&quot;));
}

# 测试
curl -X PURGE http://xxx
</code></pre><ul>
<li>banning配置</li>
</ul>
<pre><code>1. 命令行执行(临时批量操作)
# 清理^/javascript的缓存
ban req.url ~ ^/javascript
# 请求 .js结尾的缓存
ban req.url ~ .js$

2. 写入到配置文件,使用ban() 函数
sub vcl_recv {
    if (req.method == &quot;BAN&quot;) {
        ban(&quot;req.http.host == &quot; + req.http.host + &quot; &amp;&amp; req.url == &quot; + req.url);
        # Throw a synthetic page so the request won't go to the backend.
        return(synth(200, &quot;Ban added&quot;));
    }
}
# 然后执行命令
# 清理http://www.ngirl.xyz/javascript 的所有缓存
ban req.http.host == &quot;www.ngirl.xyz&quot; &amp;&amp; req.url == &quot;/javascript&quot;

</code></pre><ul>
<li>配置多个后端服务器</li>
</ul>
<pre><code>backend imgsrv1 {
    .host = &quot;192.168.0.11&quot;;
    .port = &quot;80&quot;;
}
backend imgsrv2 {
    .host = &quot;192.168.0.12&quot;;
    .port = &quot;80&quot;;
}
backend appsrv1 {
    .host = &quot;192.168.0.111&quot;;
    .port = &quot;80&quot;;
}
backend appsrv2 {
    .host = &quot;192.168.0.112&quot;;
    .port = &quot;80&quot;;
}
sub vcl_init {
    new imgsrvs = directors.random();
    imgsrvs.add_backend(imgsrv1,10);
    imgsrvs.add_backend(imgsrv2,10);

    new appsrvs = directors.round_robin();
    imgsrvs.add_backend(appsrv1);
    imgsrvs.add_backend(appsrv2);

    ...
}

sub vcl_recv {
    if (req.url ~ &quot;(?i)\.(js|css)$&quot;) {
        set req.backend_hint = staticksrv.backend();
    }
    if (req.url ~ &quot;(?i)\.(jpg|jpeg|png|gif)&quot;) {
        set req.backend_hint = imgsrvs.backend();
    } else {
        set req.backend_hint = appsrvs.backend();
    }
}
</code></pre><ul>
<li>基于cookie的session sticky</li>
</ul>
<pre><code>sub vcl_init {
    new h = directors.hash();
    h.add_backend(one, 1);   // backend 'one' with weight '1'
    h.add_backend(two, 1);   // backend 'two' with weight '1'
}

sub vcl_recv {
    // pick a backend based on the cookie header of the client
    set req.backend_hint = h.backend(req.http.cookie);
}
</code></pre><ul>
<li>官方示例地址</li>
</ul>
<ul>
<li><a href="https://book.varnish-software.com/4.0/chapters/Cache_Invalidation.html">配置缓存修减</a></li>
<li><a href="https://book.varnish-software.com/4.0/chapters/Saving_a_Request.html">配置多个后端服务器</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Docker部署jira8全家桶破解</title>
			<link>https://www.ngirl.xyz/posts/65-docker%E9%83%A8%E7%BD%B2jira8%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</link>
			<pubDate>Wed, 27 Jan 2021 18:13:13 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/65-docker%E9%83%A8%E7%BD%B2jira8%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</guid>
			<description>参考文档
   通过atlassian-agent.jar全家桶破解: https://www.cnblogs.com/zhmiao/p/10620903.html
  通过altassian-agent.jar全家桶破解插件(超详细 推荐): https://www.dqzboy.com/atlassian全家桶以及插件破解详细教程
  通过自己覆盖jar包的方式: https://www.cnblogs.com/tchua/p/10862670.html
  atlassian-agent.jar官方下载: https://gitee.com/pengzhile/atlassian-agent/releases/v1.2.3
   说明 1. atlassian-agent.jar版本: v1.2.3 2. 通过docker swarm 部署 3. jira版本为: 8.1.0 4. mysql版本: 5.7.24  安装mysql步骤 编写 docker-compose.yml version:&amp;#39;3&amp;#39;services:mysql:image:xxx.com/mysql:5.7.24volumes:- /data/container/jira8-mysql/data/:/var/lib/mysql:rw- /data/container/jira8-mysql/etc-mysql:/etc/mysql:rwdeploy:replicas:1resources:limits:cpus:&amp;#39;2&amp;#39;memory:4Genvironment:MYSQL_ROOT_PASSWORD:&amp;#34;root默认密码&amp;#34;ports:- &amp;#34;13336:3306&amp;#34;networks:- jira8networks:jira8:按照jira的mysql5.7配置参数要求配置以下 #etc-mysql 是从mysql5.7内cp下来的, 方便后续直接修改, 挂载到本地 #/data/container/jira8-mysql/etc-mysql/conf.d/docker.cnf [mysqld] skip-host-cache skip-name-resolve character_set_server=utf8mb4 innodb_default_row_format=DYNAMIC default-storage-engine=INNODB innodb_large_prefix=ON innodb_file_format=Barracuda innodb_log_file_size=2G sql_mode = NO_AUTO_VALUE_ON_ZERO docker swarm启动 mysql cd /data/container/jira8-mysql docker stack deploy -c docker-compose.</description>
			<content type="html"><![CDATA[<blockquote>
<p>参考文档</p>
</blockquote>
<ul>
<li>
<p>通过atlassian-agent.jar全家桶破解: <a href="https://www.cnblogs.com/zhmiao/p/10620903.html">https://www.cnblogs.com/zhmiao/p/10620903.html</a></p>
</li>
<li>
<p>通过altassian-agent.jar全家桶破解插件(超详细 推荐): <a href="https://www.dqzboy.com/atlassian%e5%85%a8%e5%ae%b6%e6%a1%b6%e4%bb%a5%e5%8f%8a%e6%8f%92%e4%bb%b6%e7%a0%b4%e8%a7%a3%e8%af%a6%e7%bb%86%e6%95%99%e7%a8%8b">https://www.dqzboy.com/atlassian全家桶以及插件破解详细教程</a></p>
</li>
<li>
<p>通过自己覆盖jar包的方式: <a href="https://www.cnblogs.com/tchua/p/10862670.html">https://www.cnblogs.com/tchua/p/10862670.html</a></p>
</li>
<li>
<p>atlassian-agent.jar官方下载: <a href="https://gitee.com/pengzhile/atlassian-agent/releases/v1.2.3">https://gitee.com/pengzhile/atlassian-agent/releases/v1.2.3</a></p>
</li>
</ul>
<hr>
<h3 id="说明">说明</h3>
<pre><code>1. atlassian-agent.jar版本: v1.2.3
2. 通过docker swarm 部署
3. jira版本为: 8.1.0
4. mysql版本: 5.7.24
</code></pre><hr>
<h3 id="安装mysql步骤">安装mysql步骤</h3>
<h4 id="编写-docker-composeyml">编写 docker-compose.yml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">mysql</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.com/mysql:5.7.24</span><span class="w">
</span><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">/data/container/jira8-mysql/data/:/var/lib/mysql:rw</span><span class="w">
</span><span class="w">      </span>- <span class="l">/data/container/jira8-mysql/etc-mysql:/etc/mysql:rw</span><span class="w">
</span><span class="w">    </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">cpus</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2&#39;</span><span class="w">
</span><span class="w">          </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">4G</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">MYSQL_ROOT_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;root默认密码&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="s2">&#34;13336:3306&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">jira8</span><span class="w">
</span><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">jira8</span><span class="p">:</span><span class="w">
</span></code></pre></div><h4 id="按照jira的mysql57配置参数要求配置以下">按照jira的mysql5.7配置参数要求配置以下</h4>
<pre><code>#etc-mysql 是从mysql5.7内cp下来的, 方便后续直接修改, 挂载到本地

#/data/container/jira8-mysql/etc-mysql/conf.d/docker.cnf
[mysqld]
skip-host-cache
skip-name-resolve
character_set_server=utf8mb4
innodb_default_row_format=DYNAMIC
default-storage-engine=INNODB
innodb_large_prefix=ON
innodb_file_format=Barracuda
innodb_log_file_size=2G
sql_mode = NO_AUTO_VALUE_ON_ZERO
</code></pre><h4 id="docker-swarm启动-mysql">docker swarm启动 mysql</h4>
<pre><code>cd /data/container/jira8-mysql
docker stack deploy -c docker-compose.yml jira8
</code></pre><h4 id="创建数据库">创建数据库</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 这里通过root账号和默认密码登录
</span><span class="c1"></span><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">jiradb</span> <span class="nb">CHARACTER</span> <span class="k">SET</span> <span class="n">utf8mb4</span> <span class="k">COLLATE</span> <span class="n">utf8mb4_bin</span><span class="p">;</span>
<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">on</span> <span class="n">jiradb</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">&#39;jira&#39;</span><span class="o">@</span><span class="s1">&#39;%&#39;</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">&#39;xxxxxxxx&#39;</span><span class="p">;</span>

</code></pre></div><hr>
<h3 id="安装jira步骤">安装jira步骤</h3>
<h4 id="下载atlassian-agent-v123zip并解压">下载atlassian-agent-v1.2.3.zip并解压</h4>
<h4 id="拉取镜像">拉取镜像</h4>
<pre><code>docker pull cptactionhank/atlassian-jira-software:8.1.0
</code></pre><h4 id="修改下dockerfile">修改下Dockerfile</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="l">from cptactionhank/atlassian-jira-software:8.1.0</span><span class="w">
</span><span class="w"></span><span class="l">USER root</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="l">COPY &#34;atlassian-agent.jar&#34; /opt/atlassian/jira/</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="l">RUN echo &#39;export CATALINA_OPTS=&#34;-javaagent:/opt/atlassian/jira/atlassian-agent.jar ${CATALINA_OPTS}&#34;&#39; &gt;&gt; /opt/atlassian/jira/bin/setenv.sh</span><span class="w">
</span><span class="w">
</span></code></pre></div><h4 id="build镜像并上传到内网镜像服务器">build镜像并上传到内网镜像服务器</h4>
<pre><code>docker build -t xxx.com/atlassian-jira-software:8.1.0-free .
docker push xxx.com/atlassian-jira-software:8.1.0-free
</code></pre><h4 id="编写-docker-composeyml-1">编写 docker-compose.yml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">web</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.com/atlassian-jira-software:8.1.0-free</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">TZ</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Asia/Shanghai&#39;</span><span class="w">
</span><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">/etc/localtime:/etc/localtime:ro</span><span class="w">
</span><span class="w">      </span>- <span class="l">/data/container/jira8/data:/var/atlassian/jira:rw</span><span class="w">
</span><span class="w">    </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">cpus</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;4&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">restart_policy</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="kc">on</span>-<span class="l">failure</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="s2">&#34;8081:8080&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">jira8</span><span class="w">
</span><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">jira8</span><span class="p">:</span><span class="w">
</span></code></pre></div><h4 id="启动jira-server服务">启动jira server服务</h4>
<pre><code>cd /data/container/jira8
docker stack deploy -c docker-compose.yml jira8
# 获取id
export jiraId=$(docker ps|grep &quot;atlassian-jira-software:8.1.0-free&quot;|awk '{print $1}')
查看日志
docker logs -f ${jiraId}
</code></pre><h4 id="破解">破解</h4>
<blockquote>
<p>这里通过ip访问, 后续可以配置nginx反向代理</p>
</blockquote>
<p>jira页面流程-选择language和I&rsquo;ll set it up myself(盗图)</p>
<p><img src="/images/65/1.png" alt=""></p>
<p>jira页面流程-这里复制 服务器ID(盗图)</p>
<p><img src="/images/65/2.png" alt=""></p>
<h3 id="生成破解需要的许可证这里不用去jira官方获取">生成破解需要的许可证(这里不用去jira官方获取)</h3>
<pre><code>docker exec -ti ${jiraId} bash
cd /opt/atlassian/jira/
# 生成许可证
java -jar atlassian-agent.jar -d -m test@test.com -n BAT -p jira -o http://xxx.com -s xxxxxx

# 复制生成的许可证, 贴到如下图位置:
</code></pre><p><img src="/images/65/3.png" alt=""></p>
<p>之后继续下一步即可, 查看是否已经破解</p>
<p><img src="/images/65/4.png" alt=""></p>
<h3 id="生成破解第三方插件需要的许可证不用去jira官方获取">生成破解第三方插件需要的许可证(不用去jira官方获取)</h3>
<pre><code>docker exec -ti ${jiraId} bash
cd /opt/atlassian/jira/
# 复制第三方插件的 插件密钥, 生成许可证
java -jar /opt/atlassian/jira/atlassian-agent.jar -d -m test@test.com -n BAT -p com.innovalog.jmwe.jira-misc-workflow-extensions -o http://xxx.com -s xxxxxx

# 复制生成的许可证, 贴到如下图位置:
</code></pre><p><img src="/images/65/5.png" alt=""></p>
<h3 id="声明">声明：</h3>
<ul>
<li>本文提供的破解方法和程序只做个人学习研究之⽤，不得⽤于商业用途！</li>
<li>商业使⽤请向Atlassian购买正版，谢谢合作！</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Mysql5.7-alter锁表问题</title>
			<link>https://www.ngirl.xyz/posts/64-mysql5.7-alter%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/</link>
			<pubDate>Tue, 19 Jan 2021 11:28:39 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/64-mysql5.7-alter%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/</guid>
			<description>由于需要更新 my_test_table 的 style字段 由 tinyint(2) 为 int(10)  由于认为 mysql5.6和5.7 alter table 不会锁表, 因此在执行时 导致了锁表无法 update my_test_table
  根据官方说明 Changing the column data type 不支持 online ddl
  https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html  新增临时表做测试 准备临时表, 导入部分数据 -- 主库执行 create table my_test_table_tmp_20210119 like my_test_table; show create table my_test_table\G ENGINE=InnoDB AUTO_INCREMENT=48544733 DEFAULT CHARSET=utf8 COMMENT=&amp;#39;测试表&amp;#39; alter table my_test_table_tmp_20210119 AUTO_INCREMENT=49000000; 测试执行alter table 修改字段data type是否会锁表 -- 首先终端1 执行 alter alter table my_test_table_tmp_20210119 modify style int(10) not null default 0 comment &amp;#39;下单方式&amp;#39;; -- 首先终端2 执行 update(是会卡住) update my_test_table_tmp_20210119 set status =1 limit 1; -- 查看 processlist (如下图,出现Waiting for table metadata lock) show full processlist 开始测试 pt-online-schema-change 工具  参考文档: https://www.</description>
			<content type="html"><![CDATA[<h3 id="由于需要更新-my_test_table-的-style字段-由-tinyint2-为-int10">由于需要更新 my_test_table 的 style字段 由 tinyint(2) 为 int(10)</h3>
<blockquote>
<p>由于认为 mysql5.6和5.7 alter table 不会锁表, 因此在执行时 导致了锁表无法 update my_test_table</p>
</blockquote>
<blockquote>
<p>根据官方说明 Changing the column data type 不支持 online ddl</p>
</blockquote>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html">https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html</a></li>
</ul>
<h3 id="新增临时表做测试">新增临时表做测试</h3>
<h4 id="准备临时表-导入部分数据">准备临时表, 导入部分数据</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 主库执行
</span><span class="c1"></span><span class="k">create</span> <span class="k">table</span> <span class="n">my_test_table_tmp_20210119</span> <span class="k">like</span> <span class="n">my_test_table</span><span class="p">;</span>

<span class="k">show</span> <span class="k">create</span> <span class="k">table</span> <span class="n">my_test_table</span><span class="err">\</span><span class="k">G</span>
<span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">48544733</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span> <span class="k">COMMENT</span><span class="o">=</span><span class="s1">&#39;测试表&#39;</span>

<span class="k">alter</span> <span class="k">table</span> <span class="n">my_test_table_tmp_20210119</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">49000000</span><span class="p">;</span>

</code></pre></div><h3 id="测试执行alter-table-修改字段data-type是否会锁表">测试执行alter table 修改字段data type是否会锁表</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 首先终端1 执行 alter
</span><span class="c1"></span><span class="k">alter</span> <span class="k">table</span> <span class="n">my_test_table_tmp_20210119</span> <span class="k">modify</span> <span class="n">style</span> <span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span> <span class="k">default</span> <span class="mi">0</span> <span class="k">comment</span> <span class="s1">&#39;下单方式&#39;</span><span class="p">;</span>
<span class="c1">-- 首先终端2 执行 update(是会卡住)
</span><span class="c1"></span><span class="k">update</span> <span class="n">my_test_table_tmp_20210119</span> <span class="k">set</span> <span class="n">status</span> <span class="o">=</span><span class="mi">1</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
<span class="c1">-- 查看 processlist (如下图,出现Waiting for table metadata lock)
</span><span class="c1"></span><span class="k">show</span> <span class="k">full</span> <span class="n">processlist</span>
</code></pre></div><h3 id="开始测试-pt-online-schema-change-工具">开始测试 pt-online-schema-change 工具</h3>
<ul>
<li>参考文档: <a href="https://www.cnblogs.com/xinysu/p/6758170.html">https://www.cnblogs.com/xinysu/p/6758170.html</a></li>
</ul>
<h4 id="简单安装说明">简单安装说明</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 从官方下载包
</span><span class="c1"></span><span class="n">wget</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">downloads</span><span class="p">.</span><span class="n">percona</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">downloads</span><span class="o">/</span><span class="n">percona</span><span class="o">-</span><span class="n">toolkit</span><span class="o">/</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">13</span><span class="o">/</span><span class="nb">binary</span><span class="o">/</span><span class="n">redhat</span><span class="o">/</span><span class="mi">6</span><span class="o">/</span><span class="n">x86_64</span><span class="o">/</span><span class="n">percona</span><span class="o">-</span><span class="n">toolkit</span><span class="o">-</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">13</span><span class="o">-</span><span class="mi">1</span><span class="p">.</span><span class="n">el6</span><span class="p">.</span><span class="n">x86_64</span><span class="p">.</span><span class="n">rpm</span>
<span class="c1">-- yum 安装
</span><span class="c1"></span><span class="n">yum</span> <span class="n">localinstall</span> <span class="n">percona</span><span class="o">-</span><span class="n">toolkit</span><span class="o">-</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">13</span><span class="o">-</span><span class="mi">1</span><span class="p">.</span><span class="n">el6</span><span class="p">.</span><span class="n">x86_64</span><span class="p">.</span><span class="n">rpm</span>

<span class="c1">-- 订单库主库test库添加表dsns
</span><span class="c1"></span><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">dsns</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="o">`</span><span class="n">parent_id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">dsn</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">6</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span>

<span class="c1">-- insert从库信息，有2个从库(添加之后不会有主从延迟)
</span><span class="c1"></span><span class="k">insert</span> <span class="k">into</span> <span class="n">dsns</span><span class="p">(</span><span class="n">dsn</span><span class="p">)</span> <span class="k">select</span> <span class="s2">&#34;h=从库 ip&#34;</span><span class="p">;</span>
<span class="k">insert</span> <span class="k">into</span> <span class="n">dsns</span><span class="p">(</span><span class="n">dsn</span><span class="p">)</span> <span class="k">select</span> <span class="s2">&#34;h=从库2 ip&#34;</span><span class="p">;</span>
</code></pre></div><h4 id="编写脚本">编写脚本</h4>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="o">[</span> <span class="nv">$#</span> !<span class="o">=</span> <span class="m">3</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&#34;Please input dbname and tablename and alter statement!&#34;</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span> <span class="m">0</span>
<span class="nv">dbname</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">tablename</span><span class="o">=</span><span class="nv">$2</span>
<span class="nv">alter_statement</span><span class="o">=</span><span class="nv">$3</span>
<span class="nv">MYSQL_USER</span><span class="o">=</span>dba用户
<span class="nv">MYSQL_HOST</span><span class="o">=</span>主库地址
<span class="nv">MYSQL_PWD</span><span class="o">=</span>dba用户密码
<span class="nv">exec_time</span><span class="o">=</span><span class="sb">`</span>date +%Y%m%d%H%M%S<span class="sb">`</span>

<span class="c1">#num_triggers=`mysql -u$MYSQL_USER -h$MYSQL_HOST -p$MYSQL_PWD $dbname -e &#34;show triggers like \&#34;$tablename\&#34;&#34; | wc -l`</span>
<span class="c1">#[ $num_triggers -gt 0 ] &amp;&amp; { echo -e &#34;\033[31mException: $dbname.$tablename have triggers!\033[0m&#34;;exit;}</span>

<span class="nv">log_file</span><span class="o">=</span><span class="s2">&#34;/root/pt_osc_log/&#34;</span><span class="si">${</span><span class="nv">tablename</span><span class="si">}</span>_<span class="si">${</span><span class="nv">exec_time</span><span class="si">}</span>.log
<span class="nv">exec_statement</span><span class="o">=</span><span class="s2">&#34;nohup pt-online-schema-change --nocheck-replication-filters --max-load \&#34;Threads_connected:200\&#34; --alter \&#34;</span><span class="nv">$alter_statement</span><span class="s2">\&#34; A=utf8,u=</span><span class="nv">$MYSQL_USER</span><span class="s2">,h=</span><span class="nv">$MYSQL_HOST</span><span class="s2">,p=</span><span class="nv">$MYSQL_PWD</span><span class="s2">,D=</span><span class="nv">$dbname</span><span class="s2">,t=</span><span class="nv">$tablename</span><span class="s2"> --recursion-method dsn=D=test,t=dsns --execute &gt;</span><span class="nv">$log_file</span><span class="s2"> 2&gt;&amp;1 &amp;&#34;</span>
<span class="nv">exec_statement</span><span class="o">=</span><span class="si">${</span><span class="nv">exec_statement</span><span class="p">//</span><span class="se">\`</span><span class="p">/</span><span class="se">\\\`</span><span class="si">}</span>

<span class="nb">echo</span> -e <span class="s2">&#34;\033[32m执行命令为：\033[0m&#34;</span>
<span class="nb">echo</span> -e <span class="s2">&#34;\033[35m</span><span class="nv">$exec_statement</span><span class="s2">\033[0m&#34;</span>
<span class="nb">echo</span> -e -n <span class="s2">&#34;\033[32m请确认,继续执行按\033[31m【y|Y】\033[32m，否则按任意键退出：\033[0m&#34;</span>
<span class="nb">read</span> -n1 isexec
<span class="nb">echo</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$isexec</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;y&#34;</span> -o <span class="s2">&#34;</span><span class="nv">$isexec</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;Y&#34;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
  <span class="nb">eval</span> <span class="nv">$exec_statement</span>
  <span class="nb">echo</span> -e <span class="s2">&#34;\033[32m查看执行结果：\033[33m</span><span class="nv">$log_file</span><span class="s2">\033[0m&#34;</span>
<span class="k">else</span>
  <span class="nb">echo</span> -e <span class="s2">&#34;\033[31m中断执行\033[0m&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>
</code></pre></div><h4 id="执行命令测试">执行命令测试</h4>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sh pt_osc.sh hzkj_zh my_test_table_tmp_20210119 <span class="s2">&#34;modify style int(11) not null default 0 comment &#39;方式&#39;;&#34;</span>
</code></pre></div><h3 id="总结">总结</h3>
<pre><code>1. 根据官方文档, 在change column data type的时候 默认是通过 copy to tmp table 方法, 不支持 algorithm=inplace
    执行: 	alter table my_test_table_tmp_20210119 modify issendbean int(10) not null default 0 comment '下单方式',algorithm=inplace;
    报错: 	ERROR 1846 (0A000): ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
2. 所以在执行 change column data type 的sql时候, 需要通过 pt-online-schema-change 工具执行 alter table
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Gitlab-Ce的https开启问题</title>
			<link>https://www.ngirl.xyz/posts/63-gitlab-ce%E7%9A%84https%E5%BC%80%E5%90%AF%E9%97%AE%E9%A2%98/</link>
			<pubDate>Tue, 15 Dec 2020 11:15:52 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/63-gitlab-ce%E7%9A%84https%E5%BC%80%E5%90%AF%E9%97%AE%E9%A2%98/</guid>
			<description>前言
 首先需要开启https并不会因为之前没有开启, 之前已经是https访问, 通过nginx反向代理到gitlab-ce:10080端口
但是由于新版Chrome浏览器对于https的域名内部post调用http时 会提示不安全
这种情况下才准备将gitlab直接通过https启动, 然后nginx反代到https的gitlab-ce上
首先修改下gitlab.rb  external_url &#39;https://gitlab.xxx.com&#39; nginx[&#39;redirect_http_to_https&#39;] = true nginx[&#39;redirect_http_to_https_port&#39;] = 80 nginx[&#39;listen_port&#39;] = 80 nginx[&#39;ssl_certificate&#39;] = &amp;quot;/etc/gitlab/ssl/server.pem&amp;quot; nginx[&#39;ssl_certificate_key&#39;] = &amp;quot;/etc/gitlab/ssl/server.key&amp;quot;  这里有个插曲, 因为我之前配置的时候docker 端口映射是10080:10080, 所以容器的gitlab.rb配置是这样:
  nginx[&#39;redirect_http_to_https_port&#39;] = 10080 nginx[&#39;listen_port&#39;] = 10080 这样就导致开启https的redirect 可能有点问题(可能漏改, 或者某些默认配置的问题), 其实没必要, 目前改成容器内默认的80
然后reconfigure即可 gitlab-ctl reconfigure 由于我是docker swarm启动 version:&amp;#34;3&amp;#34;services:gitlab:image:hub.xxx.com/bq/gitlab-ce:11.5.4hostname:&amp;#39;gitlab.xxx.com&amp;#39;environment:TZ:&amp;#39;Asia/Shanghai&amp;#39;GITLAB_OMNIBUS_CONFIG:|gitlab_rails[&amp;#39;time_zone&amp;#39;] = &amp;#39;Asia/Shanghai&amp;#39;volumes:- /data/container/gitlab-ce/logs:/var/log/gitlab- /data/container/gitlab-ce/data/:/var/opt/gitlab:rw- /data/container/gitlab-ce/config/:/etc/gitlab:rwdeploy:replicas:1restart_policy:condition:on-failureports:- 10443:443- 10080:80- 10022:22networks:- gitlabnetenvironment:HOSTNAME:gitlab.xxx.comnetworks:gitlabnet:nginx代理修改 server { listen 80; listen 443 ssl http2; charset utf-8; server_name gitlab.</description>
			<content type="html"><![CDATA[<blockquote>
<p>前言</p>
</blockquote>
<p>首先需要开启https并不会因为之前没有开启, 之前已经是https访问, 通过nginx反向代理到gitlab-ce:10080端口</p>
<p>但是由于新版Chrome浏览器对于https的域名内部post调用http时 会提示不安全</p>
<p><img src="/images/63/63-1.png" alt=""></p>
<p>这种情况下才准备将gitlab直接通过https启动, 然后nginx反代到https的gitlab-ce上</p>
<h3 id="首先修改下gitlabrb">首先修改下gitlab.rb</h3>
<pre><code> external_url 'https://gitlab.xxx.com'
 nginx['redirect_http_to_https'] = true
 nginx['redirect_http_to_https_port'] = 80
 nginx['listen_port'] = 80
 nginx['ssl_certificate'] = &quot;/etc/gitlab/ssl/server.pem&quot;
 nginx['ssl_certificate_key'] = &quot;/etc/gitlab/ssl/server.key&quot;
</code></pre><blockquote>
<p>这里有个插曲, 因为我之前配置的时候docker 端口映射是10080:10080, 所以容器的gitlab.rb配置是这样:</p>
</blockquote>
<pre><code> nginx['redirect_http_to_https_port'] = 10080
 nginx['listen_port'] = 10080
</code></pre><p>这样就导致开启https的redirect 可能有点问题(可能漏改, 或者某些默认配置的问题), 其实没必要, 目前改成容器内默认的80</p>
<h3 id="然后reconfigure即可">然后reconfigure即可</h3>
<pre><code>gitlab-ctl reconfigure
</code></pre><h3 id="由于我是docker-swarm启动">由于我是docker swarm启动</h3>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">gitlab</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/bq/gitlab-ce:11.5.4</span><span class="w">
</span><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gitlab.xxx.com&#39;</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">TZ</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Asia/Shanghai&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">GITLAB_OMNIBUS_CONFIG</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        </span><span class="w">        </span><span class="l">gitlab_rails[&#39;time_zone&#39;] = &#39;Asia/Shanghai&#39;</span><span class="w">
</span><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">/data/container/gitlab-ce/logs:/var/log/gitlab</span><span class="w">
</span><span class="w">      </span>- <span class="l">/data/container/gitlab-ce/data/:/var/opt/gitlab:rw</span><span class="w">
</span><span class="w">      </span>- <span class="l">/data/container/gitlab-ce/config/:/etc/gitlab:rw</span><span class="w">
</span><span class="w">    </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">      </span><span class="nt">restart_policy</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="kc">on</span>-<span class="l">failure</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="m">10443</span><span class="p">:</span><span class="m">443</span><span class="w">
</span><span class="w">      </span>- <span class="m">10080</span><span class="p">:</span><span class="m">80</span><span class="w">
</span><span class="w">      </span>- <span class="m">10022</span><span class="p">:</span><span class="m">22</span><span class="w">
</span><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">gitlabnet</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">HOSTNAME</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab.xxx.com</span><span class="w">
</span><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">gitlabnet</span><span class="p">:</span><span class="w">
</span></code></pre></div><h3 id="nginx代理修改">nginx代理修改</h3>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">server <span class="o">{</span>
        listen  80<span class="p">;</span>
        listen <span class="m">443</span> ssl http2<span class="p">;</span>
        charset utf-8<span class="p">;</span>
        server_name gitlab.xxx.com<span class="p">;</span>

        ssl_certificate   /etc/nginx/server.pem<span class="p">;</span>
        ssl_certificate_key   /etc/nginx/server.key<span class="p">;</span>
        ssl_session_timeout 5m<span class="p">;</span>
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="p">;</span>
        ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL<span class="p">;</span>
        ssl_prefer_server_ciphers on<span class="p">;</span>

        client_max_body_size 300M<span class="p">;</span>
        access_log  /nginx_logs/gitlab.xxx.com.access.log  server_name_main<span class="p">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="nv">$scheme</span> <span class="o">=</span> http<span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="m">301</span> https://<span class="nv">$server_name$request_uri</span><span class="p">;</span>
        <span class="o">}</span>

        location / <span class="o">{</span>
            <span class="c1">#add_header Strict-Transport-Security &#34;max-age=31536000;includeSubDomains&#34; ;</span>
            proxy_pass https://xxx:10443<span class="p">;</span>		//修改这里
            proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
            proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
            proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
            proxy_set_header X-Forwarded-Proto  <span class="nv">$scheme</span><span class="p">;</span>
        <span class="o">}</span>

        error_page   <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span>  /50x.html<span class="p">;</span>
        <span class="nv">location</span> <span class="o">=</span> /50x.html <span class="o">{</span>
            root   html<span class="p">;</span>
        <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="其他一些说明">其他一些说明</h3>
<pre><code> gitlab_rails['gitlab_shell_ssh_port'] = 10022
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Tcpdump抓包分析tcp三次握手和四次挥手</title>
			<link>https://www.ngirl.xyz/posts/62-tcpdump%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
			<pubDate>Fri, 13 Nov 2020 17:28:38 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/62-tcpdump%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
			<description>命令参数说明  -n 主机名域名显示成ip -S 用绝对而非相对数值列出TCP关联数。 -i 接口名,指定网卡名 host 请求地址: www.baidu.com tcp 请求端口: tcp:80  标志说明  Flags [S]: 请求连接(SYN) Flags [S.]: sync+ack(SYN+ACK) Flags [.]: ack(ACK) Flags [P.]: 发送数据包(PUSH) Flags [F]: 发送方没有更多包发送了(FIN) Flags [R]: 表明packet的发送方马上就要断开当前连接了(RST)   参考官方手册
 本次抓取的结果  通过curl http://www.baiu.com得到
 # 抓取 enp0s3 网卡请求 http://www.baidu.com 的包并显示ip和实际发送seq和ack tcpdump -n -S -i enp0s3 host www.baidu.com and tcp port 80 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on enp0s3, link-type EN10MB (Ethernet), capture size 262144 bytes # 三次握手包 15:35:23.</description>
			<content type="html"><![CDATA[<h3 id="命令参数说明">命令参数说明</h3>
<ul>
<li>-n 主机名域名显示成ip</li>
<li>-S 用绝对而非相对数值列出TCP关联数。</li>
<li>-i 接口名,指定网卡名</li>
<li>host 请求地址: <a href="http://www.baidu.com">www.baidu.com</a></li>
<li>tcp  请求端口: tcp:80</li>
</ul>
<h3 id="标志说明">标志说明</h3>
<ul>
<li>Flags [S]: 请求连接(SYN)</li>
<li>Flags [S.]: sync+ack(SYN+ACK)</li>
<li>Flags [.]: ack(ACK)</li>
<li>Flags [P.]: 发送数据包(PUSH)</li>
<li>Flags [F]: 发送方没有更多包发送了(FIN)</li>
<li>Flags [R]: 表明packet的发送方马上就要断开当前连接了(RST)</li>
</ul>
<blockquote>
<p>参考<a href="http://www.tcpdump.org/manpages/tcpdump.1.html">官方手册</a></p>
</blockquote>
<h3 id="本次抓取的结果">本次抓取的结果</h3>
<blockquote>
<p>通过<code>curl http://www.baiu.com</code>得到</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 抓取 enp0s3 网卡请求 http://www.baidu.com 的包并显示ip和实际发送seq和ack</span>
tcpdump -n -S -i enp0s3 host www.baidu.com and tcp port <span class="m">80</span>
tcpdump: verbose output suppressed, use -v or -vv <span class="k">for</span> full protocol decode
listening on enp0s3, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, capture size <span class="m">262144</span> bytes


<span class="c1"># 三次握手包</span>
15:35:23.254118 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>S<span class="o">]</span>, seq 2358640817, win 29200, options <span class="o">[</span>mss 1460,sackOK,TS val <span class="m">1164279598</span> ecr 0,nop,wscale 7<span class="o">]</span>, length <span class="m">0</span>
15:35:23.262005 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>S.<span class="o">]</span>, seq 1212165121, ack 2358640818, win 8192, options <span class="o">[</span>mss 1452,sackOK,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,wscale 5<span class="o">]</span>, length <span class="m">0</span>
15:35:23.262068 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>.<span class="o">]</span>, ack 1212165122, win 229, length <span class="m">0</span>

<span class="c1"># 数据传输包</span>
15:35:23.262260 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 2358640818:2358640895, ack 1212165122, win 229, length 77: HTTP: GET / HTTP/1.1
15:35:23.272385 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>.<span class="o">]</span>, ack 2358640895, win 908, length <span class="m">0</span>
15:35:23.273343 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 1212165122:1212167903, ack 2358640895, win 908, length 2781: HTTP: HTTP/1.1 <span class="m">200</span> OK
15:35:23.273403 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>.<span class="o">]</span>, ack 1212167903, win 272, length <span class="m">0</span>

<span class="c1"># 四次挥手包</span>
15:35:23.273657 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>F.<span class="o">]</span>, seq 2358640895, ack 1212167903, win 272, length <span class="m">0</span>
15:35:23.282240 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>.<span class="o">]</span>, ack 2358640896, win 908, length <span class="m">0</span>
15:35:23.282290 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>F.<span class="o">]</span>, seq 1212167903, ack 2358640896, win 908, length <span class="m">0</span>
15:35:23.282322 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>.<span class="o">]</span>, ack 1212167904, win 272, length <span class="m">0</span>

<span class="c1"># RST包</span>
15:35:26.295824 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>R<span class="o">]</span>, seq 1212167904, win 0, length <span class="m">0</span>

</code></pre></div><p><img src="/images/tcp_open_close.jpg" alt=""></p>
<blockquote>
<p>说明: 这边write()传输数据为0的时候,默认+1,否则进入死循环,seq=ack就同一个值在校验了,所以seq=x+1,ACK=y+1是没问题的, 我这边请求百度的数据发送是: 77,后面百度服务端回复的数据长度是: 2781, 所以如果length不为空的时候,seq=x+len</p>
</blockquote>
<blockquote>
<p>这里我<code>telnet 80</code> 端口测试连接 并发送数据<code>1</code>,结果当然nginx会给<code>400</code>, 可以看到这边<code>length=3</code></p>
<p>为啥是3呢?</p>
<p>(猜测哈)&hellip; 首先回车应该也算了一个字节,数据<code>1</code>算一个字节, 现在就两个字节了, 还有一个应该是每次ack的<code>+1</code>吧? 但好像有点牵强&hellip;</p>
</blockquote>
<p>参考: <a href="http://c.biancheng.net/view/2352.html">详细分析TCP数据的传输过程</a></p>
<blockquote>
<p>所以: 1669015475 = 1669015472 + 2(发送字节数) +1 ???  那为啥 length要记成3呢&hellip; 记录成2更合理吧,感觉还是有点问题</p>
</blockquote>
<pre><code>17:44:35.874189 IP 172.xx.xx.xx.58623 &gt; 172.16.56.116.http: Flags [P.], seq 1669015472:1669015475, ack 2645576909, win 4117, options [nop,nop,TS val 531802073 ecr 1306189625], length 3: HTTP
17:44:35.874291 IP 172.16.56.116.http &gt; 172.xx.xx.xx.58623: Flags [.], ack 1669015475, win 227, options [nop,nop,TS val 1306191841 ecr 531802073], length 0
17:44:35.874869 IP 172.16.56.116.http &gt; 172.xx.xx.xx.58623: Flags [P.], seq 2645576909:2645577234, ack 1669015475, win 227, options [nop,nop,TS val 1306191842 ecr 531802073], length 325: HTTP: HTTP/1.1 400 Bad Request
</code></pre><h3 id="分析三次握手包">分析三次握手包</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">15:35:23.254118 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>S<span class="o">]</span>, seq 2358640817, win 29200, options <span class="o">[</span>mss 1460,sackOK,TS val <span class="m">1164279598</span> ecr 0,nop,wscale 7<span class="o">]</span>, length <span class="m">0</span>
15:35:23.262005 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>S.<span class="o">]</span>, seq 1212165121, ack 2358640818, win 8192, options <span class="o">[</span>mss 1452,sackOK,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,wscale 5<span class="o">]</span>, length <span class="m">0</span>
15:35:23.262068 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>.<span class="o">]</span>, ack 1212165122, win 229, length <span class="m">0</span>
</code></pre></div><ul>
<li>
<ol>
<li>客户端发起关闭,发送SYN包,   <code>Flags [S]</code> 代表<code>syn</code>标志,  发送随机数<code>seq=2358640817</code>, <code>win=29200</code>, 发送数据<code>length=0</code></li>
</ol>
</li>
<li>
<ol start="2">
<li>服务端回复确认包并且发送SYN包, <code>Flags [S.]</code>中的. 代表<code>ack</code>, 这里<code>ack=2358640817+1</code>, 新的服务端发送随机数<code>seq=2358640817</code>, <code>win=8192</code>,</li>
</ol>
</li>
<li>
<ol start="3">
<li>客户端回复SYN确认包,    回复<code>ack=1212165121+1</code></li>
</ol>
</li>
</ul>
<h3 id="分析数据传输包">分析数据传输包</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">15:35:23.262260 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 2358640818:2358640895, ack 1212165122, win 229, length 77: HTTP: GET / HTTP/1.1
15:35:23.272385 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>.<span class="o">]</span>, ack 2358640895, win 908, length <span class="m">0</span>
15:35:23.273343 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 1212165122:1212167903, ack 2358640895, win 908, length 2781: HTTP: HTTP/1.1 <span class="m">200</span> OK
15:35:23.273403 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>.<span class="o">]</span>, ack 1212167903, win 272, length <span class="m">0</span>

</code></pre></div><ul>
<li>
<ol>
<li><code>Flags [P.]</code>  <code>P</code>表示发送数据, <code>.</code>表示ack回复, 这里seq中 <code>2358640895=2358640818+77</code>(数据长度) 2358640818就是上次的<code>ack</code>值, <code>ack=1212165122</code></li>
</ol>
</li>
<li>
<ol start="2">
<li><code>Flags [.]</code>   <code>.</code>表示<code>ack 2358640895=2358640818+77</code></li>
</ol>
</li>
<li>
<ol start="3">
<li><code>Flags [P.]</code>  P表示发送数据, .表示ack回复, 这里seq中 <code>1212167903=1212165122+2781</code>(数据长度), <code>ack=2358640895</code></li>
</ol>
</li>
<li>
<ol start="4">
<li><code>Flags [.]</code>   <code>.</code>表示<code>ack 1212167903=1212165122+2781</code></li>
</ol>
</li>
</ul>
<h3 id="四次挥手包">四次挥手包</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">15:35:23.273657 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>F.<span class="o">]</span>, seq 2358640895, ack 1212167903, win 272, length <span class="m">0</span>
15:35:23.282240 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>.<span class="o">]</span>, ack 2358640896, win 908, length <span class="m">0</span>
15:35:23.282290 IP 180.101.49.11.http &gt; 172.xx.xx.xx.54646: Flags <span class="o">[</span>F.<span class="o">]</span>, seq 1212167903, ack 2358640896, win 908, length <span class="m">0</span>
15:35:23.282322 IP 172.xx.xx.xx.54646 &gt; 180.101.49.11.http: Flags <span class="o">[</span>.<span class="o">]</span>, ack 1212167904, win 272, length <span class="m">0</span>
</code></pre></div><ul>
<li>
<ol>
<li><code>Flags [F.]</code>  客户端发起fin包,  <code>F</code>表示发起挥手FIN,<code>.</code>表示<code>ack</code>, <code>seq=2358640895</code>就是上次的<code>ack</code>值, <code>ack=1212167903</code></li>
</ol>
</li>
<li>
<ol start="2">
<li><code>Flags [.]</code>   服务端回复确认包, <code>.</code>表示<code>ack</code>,<code>ack=2358640895+1</code>,</li>
</ol>
</li>
<li>
<ol start="3">
<li><code>Flags [F.]</code>  服务端发起fin包, <code>F</code>表示发起挥手FIN,<code>.</code>表示<code>ack</code>,  <code>seq=1212167903</code>是上次的<code>ack</code>值,, <code>ack=2358640895+1</code></li>
</ol>
</li>
<li>
<ol start="4">
<li><code>Flags [.]</code>   客户端回复确认包, <code>.</code>表示<code>ack=1212167903+1</code>,</li>
</ol>
</li>
</ul>
<h3 id="其他文章">其他文章</h3>
<ul>
<li><a href="https://www.cnblogs.com/nzbbody/p/8622497.html">什么是win</a></li>
<li><a href="https://blog.csdn.net/Mr_rsq/article/details/81082127">TCP三次握手四次断开及11种状态转变</a></li>
<li><a href="https://testerhome.com/topics/22107">Tcpdump 结果说明</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Kubectl命令简单熟悉</title>
			<link>https://www.ngirl.xyz/posts/61-kubectl%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E7%86%9F%E6%82%89/</link>
			<pubDate>Thu, 29 Oct 2020 11:15:58 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/61-kubectl%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E7%86%9F%E6%82%89/</guid>
			<description>kubectl命令熟悉 # 创建namespace kubectl create ns test # 查看namespace kubectl get ns # 命令创建deployment kubectl create deployment my-nginx --image=nginx --replicas=1 -n test # 命令删除deployment kubectl delete deployments.apps my-nginx -n test # 容器执行命令 kubectl exec -ti deployments.apps/nginx -n test -- nginx -v nginx version: nginx/1.16.0 # 通过yaml创建deployment kubectl apply -f nginx.yaml --record # 通过新增或修改注释方式更新deployment kubectl patch -f nginx.yaml -p &amp;#34;{\&amp;#34;spec\&amp;#34;:{\&amp;#34;template\&amp;#34;:{\&amp;#34;metadata\&amp;#34;:{\&amp;#34;annotations\&amp;#34;:{\&amp;#34;test-last-updated\&amp;#34;:\&amp;#34;$(date +&amp;#39;%F %T&amp;#39;)\&amp;#34;}}}}}&amp;#34; # 修改image kubectl set image deployment/nginx nginx=nginx:1.16.0 -n test # 滚动升级 kubectl scale deployment nginx --replicas=2 -n test # 加上--record history就能看到变更信息(但感觉左右不大) kubectl rollout history deployment nginx -n test # describe 其实更详细 kubectl describe deployment nginx -n test # 查看yaml配置 kubectl get deployment.</description>
			<content type="html"><![CDATA[<h3 id="kubectl命令熟悉">kubectl命令熟悉</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 创建namespace</span>
kubectl create ns <span class="nb">test</span>

<span class="c1"># 查看namespace</span>
kubectl get ns

<span class="c1"># 命令创建deployment</span>
kubectl create deployment my-nginx --image<span class="o">=</span>nginx --replicas<span class="o">=</span><span class="m">1</span> -n <span class="nb">test</span> 

<span class="c1"># 命令删除deployment</span>
kubectl delete deployments.apps my-nginx -n <span class="nb">test</span>

<span class="c1"># 容器执行命令</span>
kubectl <span class="nb">exec</span> -ti deployments.apps/nginx -n <span class="nb">test</span> -- nginx -v
nginx version: nginx/1.16.0

<span class="c1"># 通过yaml创建deployment</span>
kubectl apply -f nginx.yaml --record 

<span class="c1"># 通过新增或修改注释方式更新deployment</span>
kubectl patch -f nginx.yaml -p <span class="s2">&#34;{\&#34;spec\&#34;:{\&#34;template\&#34;:{\&#34;metadata\&#34;:{\&#34;annotations\&#34;:{\&#34;test-last-updated\&#34;:\&#34;</span><span class="k">$(</span>date +<span class="s1">&#39;%F %T&#39;</span><span class="k">)</span><span class="s2">\&#34;}}}}}&#34;</span>

<span class="c1"># 修改image</span>
kubectl <span class="nb">set</span> image deployment/nginx <span class="nv">nginx</span><span class="o">=</span>nginx:1.16.0 -n <span class="nb">test</span>

<span class="c1"># 滚动升级</span>
kubectl scale deployment nginx --replicas<span class="o">=</span><span class="m">2</span> -n <span class="nb">test</span>

<span class="c1"># 加上--record history就能看到变更信息(但感觉左右不大)</span>
kubectl rollout <span class="nb">history</span> deployment nginx -n <span class="nb">test</span>

<span class="c1"># describe 其实更详细</span>
kubectl describe deployment nginx -n <span class="nb">test</span>

<span class="c1"># 查看yaml配置</span>
kubectl get deployment.apps/nginx -n <span class="nb">test</span> -o yaml

<span class="c1"># 设置资源限制</span>
kubectl <span class="nb">set</span> resources deployment nginx --limits<span class="o">=</span><span class="nv">cpu</span><span class="o">=</span>500m,memory<span class="o">=</span>128Mi -n <span class="nb">test</span>

<span class="c1"># 新增labels</span>
kubectl label deployments.apps nginx <span class="nv">test</span><span class="o">=</span><span class="nb">true</span> -n <span class="nb">test</span>

<span class="c1"># 查看labels</span>
kubectl get deployments.apps nginx  -n <span class="nb">test</span> --show-labels
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   LABELS
nginx   2/2     <span class="m">2</span>            <span class="m">2</span>           11m   <span class="nv">app</span><span class="o">=</span>nginx,test<span class="o">=</span><span class="nb">true</span>

<span class="c1"># 回滚版本(滚到第一个版本)</span>
kubectl rollout undo deployment nginx -n <span class="nb">test</span> --to-revision<span class="o">=</span><span class="m">1</span>

<span class="c1"># 回到上个版本</span>
kubectl rollout undo deployment nginx -n <span class="nb">test</span>


<span class="c1"># 创建一个service</span>
kubectl create service nodeport nginx --tcp<span class="o">=</span>31112:80 -n <span class="nb">test</span>
</code></pre></div><h3 id="附录">附录</h3>
<h4 id="1-nginxyaml">1. nginx.yaml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">test</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">test-last-updated</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2020-10-29&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Goland使用记录</title>
			<link>https://www.ngirl.xyz/posts/60-goland%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Tue, 20 Oct 2020 16:42:57 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/60-goland%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
			<description>1. 记录一些常见的goland快捷键(mac) 1. command + alt + ← | → // 回退|前进 到上次浏览的位置  2. command d | x // 复制行 |删除行  3. command b = command + 单击 // 快速打开光标处的类或方法  4. command alt l // 重新格式化代码  5. 代码折叠和展开 - command shift + / - // 代码全部展开 / 折叠 (项目所有go文件全部展开/折叠) - command alt + / - // 代码递归展开 / 折叠 (所选内容行内全部展开/折叠) - command + / - // 代码展开 / 折叠 (所选内容展开/折叠)  6.</description>
			<content type="html"><![CDATA[<h3 id="1-记录一些常见的goland快捷键mac">1. 记录一些常见的goland快捷键(mac)</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="mf">1.</span> <span class="nx">command</span> <span class="o">+</span> <span class="nx">alt</span> <span class="o">+</span> <span class="err">←</span> <span class="p">|</span> <span class="err">→</span>
<span class="c1">//  回退|前进 到上次浏览的位置
</span><span class="c1"></span>
<span class="mf">2.</span> <span class="nx">command</span> <span class="nx">d</span> <span class="p">|</span> <span class="nx">x</span>
<span class="c1">// 复制行 |删除行
</span><span class="c1"></span>
<span class="mf">3.</span> <span class="nx">command</span> <span class="nx">b</span> <span class="p">=</span> <span class="nx">command</span> <span class="o">+</span> <span class="nx">单击</span>
<span class="c1">// 快速打开光标处的类或方法
</span><span class="c1"></span>
<span class="mf">4.</span> <span class="nx">command</span> <span class="nx">alt</span> <span class="nx">l</span>
<span class="c1">// 重新格式化代码
</span><span class="c1"></span>
<span class="mf">5.</span> <span class="nx">代码折叠和展开</span>
<span class="o">-</span> <span class="nx">command</span> <span class="nx">shift</span> <span class="o">+</span> <span class="o">/</span> <span class="o">-</span>
<span class="c1">// 代码全部展开 / 折叠 (项目所有go文件全部展开/折叠)
</span><span class="c1"></span><span class="o">-</span> <span class="nx">command</span> <span class="nx">alt</span> <span class="o">+</span> <span class="o">/</span> <span class="o">-</span>
<span class="c1">// 代码递归展开 / 折叠 (所选内容行内全部展开/折叠)
</span><span class="c1"></span><span class="o">-</span> <span class="nx">command</span> <span class="o">+</span> <span class="o">/</span> <span class="o">-</span>
<span class="c1">// 代码展开 / 折叠 (所选内容展开/折叠)
</span><span class="c1"></span>
<span class="mf">6.</span> <span class="nx">列操作</span>
<span class="s">`Shift + option(alt) + 鼠标左键选择`</span>

<span class="mf">7.</span> <span class="nx">重构</span>
<span class="nx">shift</span> <span class="o">+</span> <span class="nx">f6</span>

<span class="mf">8.</span> <span class="nx">导入</span> <span class="nx">type想实现的接口的方法</span>
<span class="nx">control</span> <span class="o">+</span> <span class="nx">i</span>
</code></pre></div><h3 id="2-记录goland遇到的一些常见问题">2. 记录goland遇到的一些常见问题</h3>
<h4 id="21-goland-import-aproto报错">2.1 goland import a.proto报错</h4>
<pre><code>错误: Cannot resolve import 'a.proto'
网上解决办法: https://stackoverflow.com/questions/63526898/cannot-resolve-import-in-proto-file

解决办法:
打开goland的设置按照以下找到Protocol Buffers
setting &gt; Languages &amp; Frameworks &gt; Protocol Buffers
然后去掉默认勾选的 Configure automatically
然后点击&quot;+&quot;号,添加当前项目的目录
file:///Users/zhangzw/work/go/github.com/zhangzw001/learngrpc
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Hugo博客使用记录</title>
			<link>https://www.ngirl.xyz/posts/58-hugo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Fri, 16 Oct 2020 17:01:36 +0800</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/58-hugo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
			<description>&lt;p&gt;由于hexo生成博客整的很慢, 而且很占cpu, 甚至导致老mac卡死了&amp;hellip; hugo真的很香&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>由于hexo生成博客整的很慢, 而且很占cpu, 甚至导致老mac卡死了&hellip; hugo真的很香</p>
<h3 id="1-hugo中如何内嵌html">1. hugo中如何内嵌html</h3>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="c"># config.toml </span><span class="w">
</span><span class="w"></span><span class="p">[</span><span class="l">markup]</span><span class="w">
</span><span class="w">  </span><span class="p">[</span><span class="l">markup.goldmark]</span><span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="l">markup.goldmark.renderer]</span><span class="w">
</span><span class="w">      </span><span class="l">unsafe = true</span><span class="w">
</span></code></pre></div><ul>
<li>然后到md博客中添加如下html</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">center</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;//zhangzw001.github.io/images/dockerniu.jpeg&#34;</span> <span class="na">width </span><span class="o">=</span> <span class="s">&#34;100&#34;</span> <span class="na">height </span><span class="o">=</span> <span class="s">&#34;100&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;border: 0&#34;</span><span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">font</span> <span class="na">color</span><span class="o">=</span><span class="s">&#34;blue&#34;</span> <span class="na">face</span><span class="o">=</span><span class="s">&#34;黑体&#34;</span> <span class="na">size</span><span class="o">=</span><span class="s">5</span><span class="p">&gt;</span> 这个就是效果图咯 <span class="p">&lt;/</span><span class="nt">font</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">center</span><span class="p">&gt;</span>
</code></pre></div><blockquote>
<p>效果如下:</p>
</blockquote>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 这个就是效果图咯 </font>
</center>
<h3 id="2-hugo-drafts">2. hugo Drafts</h3>
<blockquote>
<p>drafts 表示是否build成html</p>
</blockquote>
<pre><code>首先编辑 archetypes/default.md 中 drafts, 默认是true, 表示执行 hugo 命令时不会build 成hmtl文件发布
等到博客完成之后可以手工修改 drafts: false 

本地测试可以手工执行:
hugo serve --buildDrafts
</code></pre>]]></content>
		</item>
		
		<item>
			<title>gin记录说明</title>
			<link>https://www.ngirl.xyz/posts/57-gin%E8%AE%B0%E5%BD%95%E8%AF%B4%E6%98%8E/</link>
			<pubDate>Thu, 15 Oct 2020 14:16:49 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/57-gin%E8%AE%B0%E5%BD%95%E8%AF%B4%E6%98%8E/</guid>
			<description>简单记录一些gin框架学习遇到的一些问题
 ### 1. unknown driver &#34;mysql&#34; (forgotten import?) ``` _ &#34;github.com/go-sql-driver/mysql&#34; ``` </description>
			<content type="html"><![CDATA[<p>简单记录一些gin框架学习遇到的一些问题</p>
<!-- more->>



###  1. unknown driver "mysql" (forgotten import?)

```
 _ "github.com/go-sql-driver/mysql"

```
]]></content>
		</item>
		
		<item>
			<title>centos8初体验</title>
			<link>https://www.ngirl.xyz/posts/56-centos8%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
			<pubDate>Fri, 25 Sep 2020 10:11:28 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/56-centos8%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
			<description>&lt;p&gt;简单记录下 centos8的一些新的内容&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>简单记录下 centos8的一些新的内容</p>
<h3 id="1-时间同步通过chrony-支持">1. 时间同步通过chrony 支持</h3>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">dnf install -y chrony

systemctl start chronyd.service
systemctl <span class="nb">enable</span> chronyd.service

<span class="c1"># 查看所有可用区</span>
timedatectl list-timezones

<span class="c1"># 设置时区</span>
timedatectl set-timezone Asia/Shanghai

<span class="c1"># 手动同步</span>
chronyc -a makestep
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>helm部署metabase简介</title>
			<link>https://www.ngirl.xyz/posts/55-helm%E9%83%A8%E7%BD%B2metabase%E7%AE%80%E4%BB%8B/</link>
			<pubDate>Wed, 16 Sep 2020 18:18:05 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/55-helm%E9%83%A8%E7%BD%B2metabase%E7%AE%80%E4%BB%8B/</guid>
			<description>helm 简单部署metabase
版本统计 1. k8s: 1.15.11 2. metabase: v0.36.3 3. mysql: 5.7.24 首先从charts拉取最新的模板 # 首先search查看一下 helm search metabase NAME CHART VERSION APP VERSION DESCRIPTION stable/metabase 0.3.2 v0.27.2 The easy, open source way for everyone in your company to... # 这里直接通过helm安装只有 v0.27.2的版本, 我们想要安装最新的版本 所以这里我从helm官方克隆了charts git clone https://github.com/helm/charts.git cd charts/stable/metabase # 拉取配置 docker pull metabase/metabase:v0.36.3 docker tag metabase/metabase:v0.36.3 xxx.com/metabase:v0.36.3 docker push xxx.com/metabase:v0.36.3 修改values.yaml配置 # 这里改成私有镜像image:repository:xxx.com/metabase# 修改数据库配置database:type:mysqlhost:k8s-db-t.xxx.comport:3336dbname:metabaseusername:metabasepassword:metabase.123# 修改时区timeZone:Asia/Shanghai# 修改nodeportservice:name:metabasetype:NodePortexternalPort:80internalPort:3000# Used to fix NodePort when service.</description>
			<content type="html"><![CDATA[<p>helm 简单部署metabase</p>
<!-- more-->
<h3 id="版本统计">版本统计</h3>
<pre><code>1. k8s:   1.15.11
2. metabase:  v0.36.3
3. mysql:  5.7.24
</code></pre><h3 id="首先从charts拉取最新的模板">首先从charts拉取最新的模板</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 首先search查看一下</span>
helm search metabase
NAME            CHART VERSION APP VERSION DESCRIPTION
stable/metabase 0.3.2         v0.27.2     The easy, open <span class="nb">source</span> way <span class="k">for</span> everyone in your company to...

<span class="c1"># 这里直接通过helm安装只有 v0.27.2的版本, 我们想要安装最新的版本</span>
所以这里我从helm官方克隆了charts
git clone https://github.com/helm/charts.git

<span class="nb">cd</span> charts/stable/metabase

<span class="c1"># 拉取配置</span>
docker pull metabase/metabase:v0.36.3
docker tag metabase/metabase:v0.36.3 xxx.com/metabase:v0.36.3
docker push xxx.com/metabase:v0.36.3
</code></pre></div><h3 id="修改valuesyaml配置">修改values.yaml配置</h3>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="c"># 这里改成私有镜像</span><span class="w">
</span><span class="w"></span><span class="nt">image</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">repository</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.com/metabase</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># 修改数据库配置</span><span class="w">
</span><span class="w"></span><span class="nt">database</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">mysql</span><span class="w">
</span><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">k8s-db-t.xxx.com</span><span class="w">
</span><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3336</span><span class="w">
</span><span class="w">  </span><span class="nt">dbname</span><span class="p">:</span><span class="w"> </span><span class="l">metabase</span><span class="w">
</span><span class="w">  </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">metabase</span><span class="w">
</span><span class="w">  </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">metabase.123</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># 修改时区</span><span class="w">
</span><span class="w"></span><span class="nt">timeZone</span><span class="p">:</span><span class="w"> </span><span class="l">Asia/Shanghai</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># 修改nodeport</span><span class="w">
</span><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">metabase</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w">  </span><span class="nt">externalPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">  </span><span class="nt">internalPort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span><span class="w">  </span><span class="c"># Used to fix NodePort when service.type: NodePort.</span><span class="w">
</span><span class="w">  </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">33000</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># 这里也同时开启了ingress,</span><span class="w">
</span><span class="w"></span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="c"># Used to create Ingress record (should used with service.type: ClusterIP).</span><span class="w">
</span><span class="w">  </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">metabase-dev.xxx.com</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># 设置资源限制</span><span class="w">
</span><span class="w"></span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">1000m</span><span class="w">
</span><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">4096Mi</span><span class="w">
</span><span class="w">  </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">100m</span><span class="w">
</span><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">256Mi</span><span class="w">
</span></code></pre></div><h3 id="k8s-db-t上部署metabase">k8s-db-t上部署metabase</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nb">cd</span> /data/k8s-config/helm/charts/stable/metabase

<span class="c1">## 首次安装</span>
helm install --name android-metabase-dev --namespace android .

<span class="c1">## 更新</span>
helm upgrade android-metabase-dev --namespace android .

</code></pre></div><h3 id="部署mysql-configmap">部署mysql-configmap</h3>
<ul>
<li>k8s-android-metabase-mysql-dev-configmap.yml</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">db</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">my.cnf</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">    [client]
</span><span class="sd">    port = 3306
</span><span class="sd">    socket = /data/mysql.sock
</span><span class="sd">
</span><span class="sd">    [mysql]
</span><span class="sd">    no-auto-rehash
</span><span class="sd">
</span><span class="sd">    [mysqld]
</span><span class="sd">    #关闭合并索引
</span><span class="sd">    optimizer_switch=&#34;index_merge_intersection=off&#34;
</span><span class="sd">    #skip-slave-start
</span><span class="sd">    sql_mode=&#39;ONLY_FULL_GROUP_BY,NO_ZERO_IN_DATE,ALLOW_INVALID_DATES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;
</span><span class="sd">
</span><span class="sd">    binlog-ignore-db=information_schema
</span><span class="sd">    binlog-ignore-db=mysql
</span><span class="sd">    binlog-ignore-db=performance_schema
</span><span class="sd">    binlog-ignore-db=test
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    user = mysql
</span><span class="sd">    port = 3306
</span><span class="sd">    basedir = /usr/local/mysql
</span><span class="sd">    datadir = /data/
</span><span class="sd">    socket = /data/mysql.sock
</span><span class="sd">    pid-file = /data/metabase.pid
</span><span class="sd">    tmpdir = /data/
</span><span class="sd">    server-id = 0
</span><span class="sd">    character-set-server = utf8
</span><span class="sd">    skip_name_resolve = 1
</span><span class="sd">    innodb_file_per_table = 1
</span><span class="sd">    explicit_defaults_for_timestamp = 0
</span><span class="sd">    read_only = 0
</span><span class="sd">
</span><span class="sd">    # buffer&amp;cache
</span><span class="sd">    table_open_cache = 100
</span><span class="sd">    table_definition_cache = 400
</span><span class="sd">    table_open_cache_instances = 64
</span><span class="sd">    sort_buffer_size = 4M
</span><span class="sd">    join_buffer_size = 4M
</span><span class="sd">    read_buffer_size = 8M
</span><span class="sd">    read_rnd_buffer_size = 4M
</span><span class="sd">
</span><span class="sd">    # thread&amp;connection
</span><span class="sd">    thread_stack = 256K
</span><span class="sd">    thread_cache_size = 768
</span><span class="sd">    back_log = 1024
</span><span class="sd">    max_connections = 3000
</span><span class="sd">    max_connect_errors = 1000000
</span><span class="sd">
</span><span class="sd">    # temptable
</span><span class="sd">    tmp_table_size = 32M
</span><span class="sd">    max_heap_table_size = 32M
</span><span class="sd">
</span><span class="sd">    # network
</span><span class="sd">    max_allowed_packet = 32M
</span><span class="sd">    #lock_wait_timeout = 3600
</span><span class="sd">    #interactive_timeout = 600
</span><span class="sd">    #wait_timeout = 600
</span><span class="sd">
</span><span class="sd">    # query cache
</span><span class="sd">    query_cache_size = 0
</span><span class="sd">    query_cache_type = 0
</span><span class="sd">
</span><span class="sd">    # 设置errorlog、slowlog和generallog的时区，默认UTC
</span><span class="sd">    log_timestamps = SYSTEM
</span><span class="sd">
</span><span class="sd">    # error-log
</span><span class="sd">    log_error = /data/mysqld.log
</span><span class="sd">
</span><span class="sd">    # slow-log
</span><span class="sd">    slow_query_log = 1
</span><span class="sd">    slow_query_log_file = /data/metabase_slow.log
</span><span class="sd">    long_query_time = 1
</span><span class="sd">    log_queries_not_using_indexes =1
</span><span class="sd">    log_throttle_queries_not_using_indexes = 60
</span><span class="sd">    min_examined_row_limit = 100
</span><span class="sd">    log_slow_admin_statements = 1
</span><span class="sd">    log_slow_slave_statements = 1
</span><span class="sd">
</span><span class="sd">    # general log
</span><span class="sd">    #general-log = 1
</span><span class="sd">    general_log_file=/data/query.log
</span><span class="sd">
</span><span class="sd">    # binlog
</span><span class="sd">    binlog_format = row
</span><span class="sd">    binlog_checksum = 1
</span><span class="sd">    log-bin = /data/metabase-bin
</span><span class="sd">    log-bin-index = /data/metabase-bin.index
</span><span class="sd">    sync_binlog = 0
</span><span class="sd">    binlog_cache_size = 4M
</span><span class="sd">    max_binlog_size = 512M
</span><span class="sd">    expire_logs_days = 15
</span><span class="sd">
</span><span class="sd">    # GTID
</span><span class="sd">    gtid_mode = off
</span><span class="sd">    enforce_gtid_consistency = 1
</span><span class="sd">    log_slave_updates
</span><span class="sd">
</span><span class="sd">    # Replication
</span><span class="sd">    master_info_repository = TABLE
</span><span class="sd">    relay_log_info_repository = TABLE
</span><span class="sd">    slave-rows-search-algorithms = &#39;INDEX_SCAN,HASH_SCAN&#39;
</span><span class="sd">    relay_log_recovery = 1
</span><span class="sd">    relay_log_purge = 1
</span><span class="sd">    relay-log=/data/metabase-relay-bin
</span><span class="sd">    relay-log-index=/data/metabase-relay-bin.index
</span><span class="sd">
</span><span class="sd">    # innodb-buffer&amp;cache
</span><span class="sd">    innodb_buffer_pool_size = 1G
</span><span class="sd">    innodb_buffer_pool_instances = 4
</span><span class="sd">    #innodb_additional_mem_pool_size = 16M
</span><span class="sd">    innodb_max_dirty_pages_pct = 50
</span><span class="sd">
</span><span class="sd">    # innodb log
</span><span class="sd">    innodb_data_file_path = ibdata1:512M:autoextend
</span><span class="sd">    innodb_log_file_size = 512M
</span><span class="sd">    innodb_log_files_in_group = 2
</span><span class="sd">    innodb_flush_log_at_trx_commit = 2
</span><span class="sd">    innodb_log_buffer_size = 32M
</span><span class="sd">    #innodb_max_undo_log_size = 4G
</span><span class="sd">    #innodb_undo_directory = undolog
</span><span class="sd">    innodb_undo_tablespaces = 0
</span><span class="sd">
</span><span class="sd">    # innodb-io
</span><span class="sd">    innodb_flush_method = O_DIRECT
</span><span class="sd">    innodb_io_capacity = 600
</span><span class="sd">    innodb_io_capacity_max = 2000
</span><span class="sd">    innodb_flush_sync = 0
</span><span class="sd">    innodb_flush_neighbors = 0
</span><span class="sd">    #innodb_lru_scan_depth = 4000
</span><span class="sd">    innodb_write_io_threads = 8
</span><span class="sd">    innodb_read_io_threads = 8
</span><span class="sd">    innodb_purge_threads = 4
</span><span class="sd">    innodb_page_cleaners = 4
</span><span class="sd">
</span><span class="sd">    # transaction,lock
</span><span class="sd">    #innodb_sync_spin_loops = 100
</span><span class="sd">    #innodb_spin_wait_delay = 30
</span><span class="sd">    innodb_lock_wait_timeout = 10
</span><span class="sd">    innodb_print_all_deadlocks = 1
</span><span class="sd">    innodb_rollback_on_timeout = 1
</span><span class="sd">
</span><span class="sd">    innodb_open_files = 65535
</span><span class="sd">
</span><span class="sd">    innodb_online_alter_log_max_size = 1G
</span><span class="sd">
</span><span class="sd">    # innodb status
</span><span class="sd">    innodb_status_file = 1
</span><span class="sd">    # 注意: 开启 innodb_status_output &amp; innodb_status_output_locks 后, 可能会导致log-error文件增长较快
</span><span class="sd">    innodb_status_output = 0
</span><span class="sd">    innodb_status_output_locks = 0
</span><span class="sd">
</span><span class="sd">    #performance_schema
</span><span class="sd">    performance_schema = 1
</span><span class="sd">    performance_schema_instrument = &#39;%=on&#39;
</span><span class="sd">
</span><span class="sd">    #innodb monitor
</span><span class="sd">    innodb_monitor_enable=&#34;module_innodb&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_server&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_dml&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_ddl&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_trx&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_os&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_purge&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_log&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_lock&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_buffer&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_index&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_ibuf_system&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_buffer_page&#34;
</span><span class="sd">    innodb_monitor_enable=&#34;module_adaptive_hash&#34;
</span><span class="sd">
</span><span class="sd">    # MyISAM
</span><span class="sd">    key_buffer_size = 4G
</span><span class="sd">    bulk_insert_buffer_size = 64M
</span><span class="sd">    myisam_sort_buffer_size = 256M
</span><span class="sd">    myisam_repair_threads = 1
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    [mysqldump]
</span><span class="sd">    quick
</span><span class="sd">    max_allowed_packet = 32M</span><span class="w">    
</span></code></pre></div><h3 id="部署mysql">部署mysql</h3>
<ul>
<li>k8s-android-metabase-mysql-dev.yml</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">       </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">         </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.com/mysql:5.7.24</span><span class="w">
</span><span class="w">         </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">         </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span><span class="w">           </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">db-port</span><span class="w">
</span><span class="w">         </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">           </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">             </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;50m&#34;</span><span class="w">
</span><span class="w">           </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">             </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000m&#34;</span><span class="w">
</span><span class="w">         </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">         </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MYSQL_ROOT_PASSWORD</span><span class="w">
</span><span class="w">           </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xxx.123&#34;</span><span class="w">
</span><span class="w">         </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">         </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev-data</span><span class="w">
</span><span class="w">           </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/data</span><span class="w">
</span><span class="w">         </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev-conf</span><span class="w">
</span><span class="w">           </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/mysql/my.cnf</span><span class="w">
</span><span class="w">           </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">my.cnf</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev-data</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.xxx.xxx.194</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s-db-t/android-metabase-mysql-dev</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev-conf</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">db-port</span><span class="w">
</span><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span><span class="w">      </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">3336</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">android-metabase-mysql-dev</span><span class="w">
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>go单元测试和性能测试</title>
			<link>https://www.ngirl.xyz/posts/54-go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link>
			<pubDate>Wed, 12 Aug 2020 16:44:10 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/54-go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid>
			<description>&lt;p&gt;简单记录一下单元测试 和性能测试的例子&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>简单记录一下单元测试 和性能测试的例子</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="首先这里有三个斐波那契的函数-fibgo">首先这里有三个斐波那契的函数 fib.go</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">
<span class="kd">func</span> <span class="nf">Fib</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span> <span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
 <span class="k">if</span> <span class="nx">n</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mi">1</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="nf">Fib</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nf">Fib</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="nf">Fib2</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
 <span class="kd">var</span> <span class="nx">f</span> <span class="p">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
 <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">Fib3</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
 <span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">m</span> <span class="kt">int</span>
 <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nx">n</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="p">{</span>
   <span class="nx">n</span> <span class="p">=</span> <span class="mi">1</span>
  <span class="p">}</span>
  <span class="nx">n</span><span class="p">,</span><span class="nx">m</span> <span class="p">=</span> <span class="nx">n</span><span class="o">+</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span>
  <span class="k">return</span> <span class="nx">m</span>
 <span class="p">}</span>
<span class="p">}</span>

</code></pre></div><h3 id="先做一个单元测试-fib_testgo">先做一个单元测试 fib_test.go</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">testFib</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">89</span><span class="p">,</span><span class="mi">144</span><span class="p">,</span><span class="mi">233</span><span class="p">,</span><span class="mi">377</span><span class="p">,</span><span class="mi">610</span><span class="p">,</span><span class="mi">987</span><span class="p">,</span><span class="mi">1597</span><span class="p">,</span><span class="mi">2584</span><span class="p">,</span><span class="mi">4181</span><span class="p">,</span><span class="mi">6765</span><span class="p">,</span><span class="mi">10946</span><span class="p">,</span><span class="mi">17711</span><span class="p">,</span><span class="mi">28657</span><span class="p">,</span><span class="mi">46368</span><span class="p">,</span><span class="mi">75025</span><span class="p">,</span><span class="mi">121393</span><span class="p">,</span><span class="mi">196418</span><span class="p">,</span><span class="mi">317811</span><span class="p">,</span><span class="mi">514229</span><span class="p">,</span><span class="mi">832040</span><span class="p">,</span><span class="mi">1346269</span><span class="p">,</span><span class="mi">2178309</span><span class="p">,</span><span class="mi">3524578</span><span class="p">,</span><span class="mi">5702887</span><span class="p">,</span><span class="mi">9227465</span><span class="p">,</span><span class="mi">14930352</span><span class="p">,</span><span class="mi">24157817</span><span class="p">,</span><span class="mi">39088169</span><span class="p">,</span><span class="mi">63245986</span><span class="p">,</span><span class="mi">102334155</span><span class="p">,</span><span class="mi">165580141</span><span class="p">,</span><span class="mi">267914296</span><span class="p">,</span><span class="mi">433494437</span><span class="p">,</span><span class="mi">701408733</span><span class="p">,</span><span class="mi">1134903170</span><span class="p">,</span><span class="mi">1836311903</span><span class="p">,</span><span class="mi">2971215073</span><span class="p">,</span><span class="mi">4807526976</span><span class="p">,</span><span class="mi">7778742049</span><span class="p">,</span><span class="mi">12586269025</span><span class="p">,</span><span class="mi">20365011074</span><span class="p">,</span><span class="mi">32951280099</span><span class="p">,</span><span class="mi">53316291173</span><span class="p">,</span><span class="mi">86267571272</span><span class="p">,</span><span class="mi">139583862445</span><span class="p">,</span><span class="mi">225851433717</span><span class="p">,</span><span class="mi">365435296162</span><span class="p">,</span><span class="mi">591286729879</span><span class="p">,</span><span class="mi">956722026041</span><span class="p">,</span><span class="mi">1548008755920</span><span class="p">,</span><span class="mi">2504730781961</span><span class="p">,</span><span class="mi">4052739537881</span><span class="p">,</span><span class="mi">6557470319842</span><span class="p">,</span><span class="mi">10610209857723</span><span class="p">,</span><span class="mi">17167680177565</span><span class="p">,</span><span class="mi">27777890035288</span><span class="p">,</span><span class="mi">44945570212853</span><span class="p">,</span><span class="mi">72723460248141</span><span class="p">,</span><span class="mi">117669030460994</span><span class="p">,</span><span class="mi">190392490709135</span><span class="p">,</span><span class="mi">308061521170129</span><span class="p">,</span><span class="mi">498454011879264</span><span class="p">,</span><span class="mi">806515533049393</span><span class="p">,</span><span class="mi">1304969544928657</span><span class="p">,</span><span class="mi">2111485077978050</span><span class="p">,</span><span class="mi">3416454622906707</span><span class="p">,</span><span class="mi">5527939700884757</span><span class="p">,</span><span class="mi">8944394323791464</span><span class="p">,</span><span class="mi">14472334024676221</span><span class="p">,</span><span class="mi">23416728348467685</span><span class="p">,</span><span class="mi">37889062373143906</span><span class="p">,</span><span class="mi">61305790721611591</span><span class="p">,</span><span class="mi">99194853094755497</span><span class="p">,</span><span class="mi">160500643816367088</span><span class="p">,</span><span class="mi">259695496911122585</span><span class="p">,</span><span class="mi">420196140727489673</span><span class="p">,</span><span class="mi">679891637638612258</span><span class="p">,</span><span class="mi">1100087778366101931</span><span class="p">,</span><span class="mi">1779979416004714189</span><span class="p">}</span>


<span class="kd">func</span> <span class="nf">TestFib</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">40</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nx">f</span> <span class="o">:=</span> <span class="nf">Fib</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="nx">f</span> <span class="o">!=</span> <span class="nx">testFib</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">{</span>
   <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Fib(%d) returned %d, want %d \n&#34;</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">testFib</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestFib2</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">40</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nx">f</span> <span class="o">:=</span> <span class="nf">Fib2</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="nx">f</span> <span class="o">!=</span> <span class="nx">testFib</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">{</span>
   <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Fib2(%d) returned %d, want %d \n&#34;</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">testFib</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestFib3</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">f3</span> <span class="o">:=</span> <span class="nf">Fib3</span><span class="p">()</span>
 <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">40</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nx">f</span> <span class="o">:=</span> <span class="nf">f3</span><span class="p">();</span> <span class="nx">f</span> <span class="o">!=</span> <span class="nx">testFib</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">{</span>
   <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Fib3(%d) returned %d, want %d \n&#34;</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">testFib</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><blockquote>
<p>命令行执行</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="k">go</span> <span class="nx">test</span> <span class="o">-</span><span class="nx">v</span>
<span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">TestFib</span>
<span class="o">---</span> <span class="nx">PASS</span><span class="p">:</span> <span class="nf">TestFib</span> <span class="p">(</span><span class="mf">1.34</span><span class="nx">s</span><span class="p">)</span>
<span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">TestFib2</span>
<span class="o">---</span> <span class="nx">PASS</span><span class="p">:</span> <span class="nf">TestFib2</span> <span class="p">(</span><span class="mf">0.00</span><span class="nx">s</span><span class="p">)</span>
<span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">TestFib3</span>
<span class="o">---</span> <span class="nx">PASS</span><span class="p">:</span> <span class="nf">TestFib3</span> <span class="p">(</span><span class="mf">0.00</span><span class="nx">s</span><span class="p">)</span>
<span class="nx">PASS</span>
<span class="nx">ok</span>
</code></pre></div><h3 id="然后性能测试-fib_testgo">然后性能测试 fib_test.go</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">BenchmarkFib</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">30</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
   <span class="nf">Fib</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">BenchmarkFib2</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">90</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
   <span class="nf">Fib2</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">BenchmarkFib3</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">f3</span> <span class="o">:=</span> <span class="nf">Fib3</span><span class="p">()</span>
 <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">90</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
   <span class="nf">f3</span><span class="p">()</span>
  <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>

</code></pre></div><blockquote>
<p>命令行执行</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"> go <span class="nb">test</span> -bench<span class="o">=</span>.
goos: darwin
goarch: amd64
pkg: xxx
BenchmarkFib-4          <span class="m">100</span>   <span class="m">10504036</span> ns/op
BenchmarkFib2-4      <span class="m">128184</span>       <span class="m">8989</span> ns/op
BenchmarkFib3-4     <span class="m">3908799</span>        <span class="m">307</span> ns/op
PASS
ok
</code></pre></div><h3 id="gomod使用说明">go.mod使用说明</h3>
<blockquote>
<p>目录结构</p>
</blockquote>
<pre><code>├── fib
│   ├── fib.go
│   └── fib_test.go
├── main.go
└── go.mod
</code></pre><blockquote>
<p>main.go</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
 <span class="s">&#34;fib&#34;</span>
 <span class="s">&#34;fmt&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span><span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span><span class="p">&lt;</span> <span class="mi">40</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%d,&#34;</span><span class="p">,</span><span class="nx">fib</span><span class="p">.</span><span class="nf">Fib</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
 <span class="p">}</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
 <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span><span class="mi">1</span> <span class="p">;</span> <span class="nx">i</span><span class="p">&lt;</span> <span class="mi">90</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%d,&#34;</span><span class="p">,</span><span class="nx">fib</span><span class="p">.</span><span class="nf">Fib2</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
 <span class="p">}</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
 <span class="nx">f3</span> <span class="o">:=</span> <span class="nx">fib</span><span class="p">.</span><span class="nf">Fib3</span><span class="p">()</span>
 <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span><span class="mi">1</span> <span class="p">;</span> <span class="nx">i</span><span class="p">&lt;</span> <span class="mi">90</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%d,&#34;</span><span class="p">,</span><span class="nf">f3</span><span class="p">())</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><blockquote>
<p>说明</p>
</blockquote>
<pre><code>1. go版本最好是1.13 (go1.11开始支持)
2. 首先 go mod init , 并修改go.mod
    增加: replace fib =&gt; ./fib
3. 然后进去到fib目录, 执行go mod init
4. 在执行main.go 即可

</code></pre><h3 id="说明">说明</h3>
<pre><code>1. 测试函数必须导入testing包
2. 测试函数的名字必须以Test开头，可选的后缀名必须以大写字母开头：
</code></pre><h3 id="一些常用命令">一些常用命令</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="mf">1.</span> <span class="k">go</span> <span class="nx">test</span> 	<span class="c1">// 返回正确 或者返回错误详情
</span><span class="c1"></span><span class="mf">2.</span> <span class="k">go</span> <span class="nx">test</span> <span class="o">-</span><span class="nx">v</span> 	<span class="c1">// 返回详情,包括正确的测试案例
</span><span class="c1"></span><span class="mf">3.</span> <span class="k">go</span> <span class="nx">test</span> <span class="o">-</span><span class="nx">v</span> <span class="o">-</span><span class="nx">run</span><span class="p">=</span><span class="s">&#34;French|Can.*l&#34;</span>	<span class="c1">// 执行指定的测试案例(参数-run对应一个正则表达式)
</span><span class="c1"></span><span class="mf">4.</span> <span class="k">go</span> <span class="nx">test</span> <span class="o">-</span><span class="nx">run</span><span class="p">=</span><span class="nx">Fib</span> <span class="o">-</span><span class="nx">coverprofile</span><span class="p">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">out</span> <span class="p">.</span> <span class="c1">//生成c.out
</span><span class="c1"></span><span class="mf">5.</span> <span class="k">go</span> <span class="nx">tool</span> <span class="nx">cover</span> <span class="o">-</span><span class="nx">html</span><span class="p">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">out</span> <span class="c1">//将c.out转成html格式打开
</span><span class="c1"></span><span class="mf">6.</span> <span class="k">go</span> <span class="nx">test</span> <span class="o">-</span><span class="nx">bench</span><span class="p">=</span><span class="nx">Fib</span> <span class="o">-</span><span class="nx">benchmem</span> <span class="c1">// 基准测试 显示内存和内存分配次数
</span><span class="c1"></span><span class="mf">7.</span> <span class="k">go</span> <span class="nx">test</span> <span class="o">-</span><span class="nx">bench</span> <span class="p">.</span> <span class="o">-</span><span class="nx">cpuprofile</span> <span class="nx">cpu</span><span class="p">.</span><span class="nx">out</span>	<span class="c1">// 生成cpu.out
</span><span class="c1"></span><span class="mf">8.</span> <span class="k">go</span> <span class="nx">tool</span> <span class="nx">pprof</span> <span class="nx">cpu</span><span class="p">.</span><span class="nx">out</span>   
   <span class="c1">// 然后交互式输入web查看图形界面(但是需要安装brew install graphviz )
</span><span class="c1"></span>   <span class="c1">// 或者交互式输入png,会得到类型profile001.png的文件, 打开查看即可
</span><span class="c1"></span><span class="mf">9.</span> <span class="k">go</span> <span class="nx">run</span> <span class="o">-</span><span class="nx">race</span> <span class="nx">a</span><span class="p">.</span><span class="k">go</span> <span class="c1">// 查看是否存在锁
</span><span class="c1"></span><span class="mf">10.</span>  <span class="nx">godoc</span> <span class="o">-</span><span class="nx">http</span> <span class="p">:</span><span class="mi">8000</span> <span class="c1">//启动一个godoc
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>hexo部署到coding.net开启静态网站</title>
			<link>https://www.ngirl.xyz/posts/53-hexo%E9%83%A8%E7%BD%B2%E5%88%B0coding-net%E5%BC%80%E5%90%AF%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</link>
			<pubDate>Fri, 07 Aug 2020 16:00:08 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/53-hexo%E9%83%A8%E7%BD%B2%E5%88%B0coding-net%E5%BC%80%E5%90%AF%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</guid>
			<description>&lt;p&gt;由于访问github会比较慢,百度抓取问题等, hexo同时部署到coding.net并开启静态网站&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>由于访问github会比较慢,百度抓取问题等, hexo同时部署到coding.net并开启静态网站</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="首先得有codingnet-网站的账户并配置自己的公钥">首先得有coding.net 网站的账户,并配置自己的公钥</h3>
<blockquote>
<p>右上角点击 个人账户设置 -&gt; SSH公钥</p>
</blockquote>
<h3 id="创建好项目之后-修改hexo的_configyml">创建好项目之后, 修改hexo的_config.yml</h3>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">git</span><span class="w">
</span><span class="w"></span><span class="c">#  repository: git@github.com:zhangzw001/zhangzw001.github.io.git</span><span class="w">
</span><span class="w">  </span><span class="nt">repo</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">github</span><span class="p">:</span><span class="w"> </span><span class="l">git@github.com:zhangzw001/zhangzw001.github.io.git</span><span class="w">
</span><span class="w">    </span><span class="nt">coding</span><span class="p">:</span><span class="w"> </span><span class="l">git@e.coding.net:k1s/blog/blog.git</span><span class="w">
</span><span class="w">  </span><span class="nt">branch</span><span class="p">:</span><span class="w"> </span><span class="l">master</span><span class="w">
</span></code></pre></div><h3 id="开启-静态网站-部署功能">开启 静态网站 部署功能</h3>
<blockquote>
<p>点击项目进去 -&gt; 左下角项目设置 -&gt; 功能开关 -&gt; 持续部署
<img src="//zhangzw001.github.io/images/53/img1.jpg" alt=""></p>
</blockquote>
<blockquote>
<p>回到项目 持续部署 -&gt; 静态网站</p>
</blockquote>
<p><img src="//zhangzw001.github.io/images/53/img2.jpg" alt=""></p>
<h3 id="现在将自己的域名绑定到该项目">现在将自己的域名绑定到该项目</h3>
<blockquote>
<p>点击 设置</p>
</blockquote>
<p><img src="//zhangzw001.github.io/images/53/img3.jpg" alt=""></p>
<blockquote>
<p>注意绑定域名前, 先去dns添加一条cname记录(记录值为你的coding-pages.com)</p>
</blockquote>
<p><img src="//zhangzw001.github.io/images/53/img4.jpg" alt=""></p>]]></content>
		</item>
		
		<item>
			<title>istio环境下配置nginx&#43;php</title>
			<link>https://www.ngirl.xyz/posts/52-istio%E6%B5%8B%E8%AF%95nginx-php%E9%A1%B9%E7%9B%AE/</link>
			<pubDate>Tue, 04 Aug 2020 16:22:10 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/52-istio%E6%B5%8B%E8%AF%95nginx-php%E9%A1%B9%E7%9B%AE/</guid>
			<description>&lt;p&gt;将nginx+php的环境结合istio的智能路由功能做一个简单实践&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>将nginx+php的环境结合istio的智能路由功能做一个简单实践</p>
<ul>
<li><a href="https://istio.io/latest/zh/docs/ops/configuration/traffic-management/protocol-selection/">istio中文官方-协议选择</a></li>
<li><a href="https://istio.io/latest/zh/docs/reference/config/networking/virtual-service/">istio中文官方-virtualService</a></li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<blockquote>
<p>安装部署请参考官方 <a href="https://istio.io/latest/zh/docs/setup/getting-started/">https://istio.io/latest/zh/docs/setup/getting-started/</a></p>
</blockquote>
<h3 id="一-部署nginxphp并设置简单智能路由">一 部署nginx+php,并设置简单智能路由</h3>
<blockquote>
<p>环境说明</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">1. k8s:     1.15.11
2. istio:   1.6.7
3. istio-alpha ns设置了自动注入:
    kubectl label namespace istio-alpha istio-injection<span class="o">=</span>enabled
    kubectl get namespaces istio-alpha --show-labels
</code></pre></div><h4 id="11-安装部署php-fpm">1.1 安装部署php-fpm</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm-v1</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/bq/php:7.0.13-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tcp</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;50m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;100m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm-v1-data</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/webwww</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm-v1-data</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">x.x.x.x</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s1-t/php-fpm-7-0-13/webwww-data        </span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm-v2</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/bq/php:7.0.13-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tcp</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;50m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;100m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm-v2-data</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/webwww</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm-v2-data</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">x.x.x.x</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s1-t/php-fpm-7-0-13/webwww-data</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tcp</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span></code></pre></div><h4 id="12-安装部署nginx">1.2 安装部署nginx</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v1</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v1</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/bq/nginx:1.16</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;100m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-www-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/webwww</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v1-cm</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/nginx/conf.d/</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-www-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">x.x.x.x</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s1-t/php-fpm-7-0-13/webwww-data</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v1-cm</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v1-cm</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v1-cm</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v1</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">nginx.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        server {
</span><span class="sd">                listen 80 default_server;
</span><span class="sd">                server_name  _;
</span><span class="sd">                root   /webwww/test-v1;
</span><span class="sd">                add_header &#34;X&#34; &#34;v1&#34;;
</span><span class="sd">                location = /50x.html {
</span><span class="sd">                    root   html;
</span><span class="sd">                }
</span><span class="sd">
</span><span class="sd">               location / {
</span><span class="sd">                    index index.php  index.html index.htm;
</span><span class="sd">                }
</span><span class="sd">
</span><span class="sd">                location ~ \.php$ {
</span><span class="sd">                    fastcgi_pass   php-fpm:9000;
</span><span class="sd">                    fastcgi_index  index.php;
</span><span class="sd">                    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
</span><span class="sd">                    fastcgi_param  HTTP_HOST          $server_name;
</span><span class="sd">                    include        fastcgi_params;
</span><span class="sd">                }
</span><span class="sd">        }</span><span class="w">        
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v2</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v2</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/bq/nginx:1.16</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;100m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-www-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/webwww</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v2-cm</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/nginx/conf.d/</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-www-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">x.x.x.x</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s1-t/php-fpm-7-0-13/webwww-data</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v2-cm</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v2-cm</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v2-cm</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-v2</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">nginx.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        server {
</span><span class="sd">         listen 80 default_server;
</span><span class="sd">                server_name  _;
</span><span class="sd">                root   /webwww/test-v2;
</span><span class="sd">                add_header &#34;X&#34; &#34;v2&#34;;
</span><span class="sd">                location = /50x.html {
</span><span class="sd">                    root   html;
</span><span class="sd">                }
</span><span class="sd">
</span><span class="sd">               location / {
</span><span class="sd">                    index index.php  index.html index.htm;
</span><span class="sd">                }
</span><span class="sd">
</span><span class="sd">                location ~ \.php$ {
</span><span class="sd">                    fastcgi_pass   php-fpm:9000;
</span><span class="sd">                    fastcgi_index  index.php;
</span><span class="sd">                    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
</span><span class="sd">                    fastcgi_param  HTTP_HOST          $server_name;
</span><span class="sd">                    include        fastcgi_params;
</span><span class="sd">                }
</span><span class="sd">        }</span><span class="w">        
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></code></pre></div><h4 id="13-配置默认destinationrule">1.3 配置默认destinationRule</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DestinationRule</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">  </span><span class="nt">subsets</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">    </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">    </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DestinationRule</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">  </span><span class="nt">subsets</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">    </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">    </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span></code></pre></div><h4 id="14-配置nginx的gateway和virtualservice">1.4 配置nginx的gateway和VirtualService</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Gateway</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-gateway</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">istio</span><span class="p">:</span><span class="w"> </span><span class="l">ingressgateway</span><span class="w"> </span><span class="c"># use istio default controller</span><span class="w">
</span><span class="w">  </span><span class="nt">servers</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-80</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">HTTP</span><span class="w">
</span><span class="w">    </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">VirtualService</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-gateway</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">gateways</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">nginx-gateway</span><span class="w">
</span><span class="w">  </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uri</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">exact</span><span class="p">:</span><span class="w"> </span><span class="l">/phpinfo.php</span><span class="w">
</span><span class="w">    </span><span class="nt">route</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">        </span><span class="nt">subset</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">      </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">90</span><span class="w">
</span><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">        </span><span class="nt">subset</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">      </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></code></pre></div><blockquote>
<p>以上配置之后即可在kiali查看 graph</p>
</blockquote>
<p><img src="//zhangzw001.github.io/images/52/img-all.png" alt=""></p>
<h4 id="15-简单配置流量全部切到v1-或v2">1.5 简单配置流量全部切到v1 或v2</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">VirtualService</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-gateway</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">gateways</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">nginx-gateway</span><span class="w">
</span><span class="w">  </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uri</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">exact</span><span class="p">:</span><span class="w"> </span><span class="l">/phpinfo.php</span><span class="w">
</span><span class="w">    </span><span class="nt">route</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">        </span><span class="nt">subset</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span></code></pre></div><blockquote>
<p>当然也可以根据uri match选择不同的路由</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">VirtualService</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-gateway</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">gateways</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">nginx-gateway</span><span class="w">
</span><span class="w">  </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uri</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">exact</span><span class="p">:</span><span class="w"> </span><span class="l">/phpinfo.php</span><span class="w">
</span><span class="w">    </span><span class="nt">route</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">        </span><span class="nt">subset</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uri</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">exact</span><span class="p">:</span><span class="w"> </span><span class="l">/a.php</span><span class="w">
</span><span class="w">    </span><span class="nt">route</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">        </span><span class="nt">subset</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></code></pre></div><h4 id="16-配置php-fpm的virtualservice">1.6 配置php-fpm的virtualService</h4>
<blockquote>
<p>将流量全部转到 v1版本</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">VirtualService</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">php-fpm</span><span class="w">
</span><span class="w">  </span><span class="nt">tcp</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">    </span><span class="nt">route</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">        </span><span class="nt">subset</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></code></pre></div><blockquote>
<p>将流量分成1:9</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">VirtualService</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="l">php-fpm</span><span class="w">
</span><span class="w">  </span><span class="nt">tcp</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">    </span><span class="nt">route</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">        </span><span class="nt">subset</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">      </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">        </span><span class="nt">subset</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span><span class="w">      </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">90</span><span class="w">
</span></code></pre></div><p><img src="//zhangzw001.github.io/images/52/img-fpm-1-9.png" alt=""></p>
<p><img src="//zhangzw001.github.io/images/52/img-all2.jpg" alt=""></p>
<hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="-问题说明">$ 问题说明</h3>
<h4 id="1-协议选择说明">$.1 协议选择说明</h4>
<blockquote>
<p>通过声明一个 Service 端口，协议可以被手动指定 <code>name: &lt;protocol&gt;[-&lt;suffix&gt;]</code>。 下列协议是被支持的：</p>
</blockquote>
<pre><code>grpc
grpc-web
http
http2
https
mongo
mysql*
redis*
tcp
tls
udp
</code></pre><blockquote>
<p>因此注意,我们在部署deployment和service的时候, ports.name 会被istio 认为是协议</p>
</blockquote>
<blockquote>
<p>例如下面的例子中, name: tcp, 如果配置了其他的值, 会导致nginx-&gt;php-fpm 协议异常, 可能会出现错误:</p>
</blockquote>
<p><code>upstream sent unsupported FastCGI protocol version: 72 while reading response header from upstream</code></p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm-v1</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">php:7.0.13-fpm</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tcp</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">          </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">          </span><span class="l">...</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-alpha</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tcp</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">php-fpm</span><span class="w">
</span></code></pre></div><hr>]]></content>
		</item>
		
		<item>
			<title>k8s搭建radius</title>
			<link>https://www.ngirl.xyz/posts/51-k8s%E6%90%AD%E5%BB%BAradius/</link>
			<pubDate>Mon, 27 Jul 2020 10:19:25 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/51-k8s%E6%90%AD%E5%BB%BAradius/</guid>
			<description>搭建lnmp+freeradius的账号认证服务
  一 记录 docker: 17.03.2-ce k8s: 1.15.11 php: 7.0.13 mysql: 5.6 freeraidus: 3.0.21 daloradius: 1.1-2 / 08 Aug 2019  配置修改简单说明:
 1. 数据库创建说明 create database radius; grant all on radius.* to radius@&#39;%&#39; identified by &#39;xxx&#39;; flush privileges; # 导入表结构 mysql -hk8s-db-t.xxx.com -P3326 -uradius -p &amp;lt; mods-config/sql/main/mysql/schema.sql mysql -hk8s-db-t.xxx.com -P3326 -uradius -p &amp;lt; daloradius-php/contrib/db/mysql-daloradius.sql mysql -hk8s-db-t.xxx.com -P3326 -uradius -p &amp;lt; daloradius-php/contrib/db/fr2-mysql-daloradius-and-freeradius.sql 2. 修改freeRADIUS配置 vim /etc/raddb/radiusd.conf # 这里我是配合nginx,php统一路径 logdir = /nginx_logs 3.</description>
			<content type="html"><![CDATA[<p>搭建lnmp+freeradius的账号认证服务</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="一-记录">一 记录</h3>
<pre><code>docker:   17.03.2-ce
k8s:   1.15.11
php:   7.0.13
mysql:   5.6
freeraidus:  3.0.21
daloradius:  1.1-2 / 08 Aug 2019

</code></pre><blockquote>
<p>配置修改简单说明:</p>
</blockquote>
<pre><code>1. 数据库创建说明
create database radius;
grant all on radius.* to radius@'%' identified by 'xxx';
flush privileges;

# 导入表结构
mysql -hk8s-db-t.xxx.com -P3326 -uradius -p &lt; mods-config/sql/main/mysql/schema.sql
mysql -hk8s-db-t.xxx.com -P3326 -uradius -p &lt; daloradius-php/contrib/db/mysql-daloradius.sql
mysql -hk8s-db-t.xxx.com -P3326 -uradius -p &lt; daloradius-php/contrib/db/fr2-mysql-daloradius-and-freeradius.sql

2. 修改freeRADIUS配置
vim /etc/raddb/radiusd.conf
# 这里我是配合nginx,php统一路径
logdir = /nginx_logs 

3. 修改为sql认证
 cd /etc/raddb/mods-enabled
 ln -s ../mods-available/sql

4. 修改FreeRADIUS中的mysql 配置文件
 dialect = &quot;mysql&quot;
 //下列配置前的注释去掉
 server = &quot;k8s-db-t.xxx.com&quot; //mysql服务器地址,如果是同一个k8s集群, 写k8s内网的svc域名即可,例如: freeradius-mysql-dev 或 freeradius-mysql-dev.radius-dev.svc.cluster.local
 port = 3326 //mysql 端口号
 login = &quot;radius&quot; //myqsl 登录用户名
 password = &quot;xxx&quot; //mysql 登录密码
 read_clients = yes

5. 开放daloradius服务器验证权限
vim /etc/raddb/clients.conf
client php-fpm {
 ipaddr = php-fpm
 secret  = testing123
}

6. 修改daloradius默认php配置
vim daloradius-php/library/daloradius.conf.php
$configValues['CONFIG_MAINT_TEST_USER_RADIUSSERVER'] = 'radius';
$configValues['CONFIG_MAINT_TEST_USER_RADIUSSECRET'] = 'testing123';
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="二-首先搭建数据库">二 首先搭建数据库</h3>
<h4 id="k8s-freeradius-mysql-dev_5636-configmapyml">k8s-freeradius-mysql-dev_5.6.36-configmap.yml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">db</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">my.cnf</span><span class="p">:</span><span class="w"> </span><span class="l">|</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="l">mysqld]</span><span class="w">
</span><span class="w">    </span><span class="l">innodb_file_per_table=1</span><span class="w">
</span><span class="w">    </span><span class="l">user=mysql</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="l">datadir=/data</span><span class="w">
</span><span class="w">    </span><span class="l">socket=/data/mysql.sock</span><span class="w">
</span><span class="w">    </span><span class="l">symbolic-links=0</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="l">binlog_format=mixed</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c">#log-bin=mysql-bin</span><span class="w">
</span><span class="w">    </span><span class="l">log-bin=/data/mysql-bin.log</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c">#general_log   = 1</span><span class="w">
</span><span class="w">    </span><span class="c">#general_log_file = /data/general.log</span><span class="w">
</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c">#日志</span><span class="w">
</span><span class="w">    </span><span class="l">log-error=/data/mysqld.log</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="l">innodb_log_file_size = 256M</span><span class="w">
</span><span class="w">    </span><span class="l">thread_cache_size = 50</span><span class="w">
</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="l">max_allowed_packet=16M</span><span class="w">
</span><span class="w">    </span><span class="l">max_binlog_size=500M</span><span class="w">
</span><span class="w">    </span><span class="c">#old_passwords=1</span><span class="w">
</span><span class="w">    </span><span class="l">character-set-server=utf8</span><span class="w">
</span><span class="w">    </span><span class="l">max_connections=3000</span><span class="w">
</span><span class="w">    </span><span class="l">skip-name-resolve</span><span class="w">
</span><span class="w">    </span><span class="l">max_allowed_packet=64M</span><span class="w">
</span><span class="w">    </span><span class="l">tmp_table_size=200M</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="l">server-id=101</span><span class="w">
</span><span class="w">    </span><span class="l">port=3306</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="l">skip_slave_start</span><span class="w">
</span><span class="w">    </span><span class="l">expire_logs_days=7</span><span class="w">
</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="l">mysqld_safe]</span><span class="w">
</span><span class="w">    </span><span class="l">log-error=/data/mysqld.log</span><span class="w">
</span><span class="w">    </span><span class="l">pid-file=/data/mysqld.pid</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="l">mysql]</span><span class="w">
</span><span class="w">    </span><span class="kc">no</span>-<span class="l">auto-rehash</span><span class="w">
</span><span class="w">    </span><span class="l">user=root</span><span class="w">
</span><span class="w">    </span><span class="l">default-character-set=utf8</span><span class="w">
</span><span class="w">    </span><span class="l">socket=/data/mysql.sock</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="l">client]</span><span class="w">
</span><span class="w">    </span><span class="l">socket=/data/mysql.sock</span><span class="w">
</span></code></pre></div><h4 id="k8s-freeradius-mysql-dev_5636yml">k8s-freeradius-mysql-dev_5.6.36.yml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">       </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">         </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/mysql:5.6.36-Asia</span><span class="w">
</span><span class="w">         </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">         </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span><span class="w">           </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">db-port</span><span class="w">
</span><span class="w">         </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">           </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">             </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;50m&#34;</span><span class="w">
</span><span class="w">           </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">             </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1&#34;</span><span class="w">
</span><span class="w">         </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">         </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MYSQL_ROOT_PASSWORD</span><span class="w">
</span><span class="w">           </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xxx&#34;</span><span class="w">
</span><span class="w">         </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">         </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev-data</span><span class="w">
</span><span class="w">           </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/data</span><span class="w">
</span><span class="w">         </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev-conf</span><span class="w">
</span><span class="w">           </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/mysql/my.cnf</span><span class="w">
</span><span class="w">           </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">my.cnf</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev-data</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.xxx.xxx.194</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s-db-t/freeradius-mysql-dev</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev-conf</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">db</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">db-port</span><span class="w">
</span><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span><span class="w">      </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">3326</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-mysql-dev</span><span class="w">
</span></code></pre></div><h4 id="创建库和账号">创建库和账号</h4>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">create database radius<span class="p">;</span>
grant all on radius.* to radius@<span class="s1">&#39;%&#39;</span> identified by <span class="s1">&#39;xxxxxxxxxxxxxxxxxx&#39;</span><span class="p">;</span>
flush privileges<span class="p">;</span>

<span class="c1"># 测试登录</span>
mysql -hk8s-db-t.xxx.com -P3326 -uradius -p
<span class="c1"># 导入表结构</span>
mysql -hk8s-db-t.xxx.com -P3326 -uradius -p &lt; mods-config/sql/main/mysql/schema.sql
mysql -hk8s-db-t.xxx.com -P3326 -uradius -p &lt; daloradius-php/contrib/db/mysql-daloradius.sql
</code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="三-部署freeradius">三 部署freeradius</h3>
<h4 id="deployment-freeradiusyml">deployment-freeradius.yml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/freeradius-server:3.0.21</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">1812</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">port-1812</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">1813</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">port-1813</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-sql-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/raddb/mods-available/sql</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">sql</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-sql-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/raddb/mods-enabled/sql</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">sql</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-radiusd-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/raddb/radiusd.conf</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">radiusd.conf</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-clients-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/raddb/clients.conf</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">clients.conf</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-log</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/nginx_logs</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-sql-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-sql-dev</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-radiusd-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-radiusd-dev</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-clients-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-clients-dev</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-log</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.xxx.xxx.194</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s1-t/daloradius-php/nginx_logs</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">port-1812</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">1812</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">port-1813</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">1813</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev-svc</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">port-1812</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">1812</span><span class="w">
</span><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">1812</span><span class="w">
</span><span class="w">      </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">1812</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">port-1813</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">1813</span><span class="w">
</span><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">1813</span><span class="w">
</span><span class="w">      </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">1813</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">freeradius-dev</span><span class="w">
</span></code></pre></div><h4 id="configmap-freeradius-radiusd-confyaml">configmap-freeradius-radiusd-conf.yaml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-radiusd-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-radiusd-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">radiusd.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">    prefix = /usr
</span><span class="sd">    exec_prefix = /usr
</span><span class="sd">    sysconfdir = /etc
</span><span class="sd">    localstatedir = /var
</span><span class="sd">    sbindir = ${exec_prefix}/sbin
</span><span class="sd">    logdir = /nginx_logs
</span><span class="sd">    raddbdir = /etc/freeradius
</span><span class="sd">    radacctdir = ${logdir}/radacct
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    name = freeradius
</span><span class="sd">    confdir = ${raddbdir}
</span><span class="sd">    modconfdir = ${confdir}/mods-config
</span><span class="sd">    certdir = ${confdir}/certs
</span><span class="sd">    cadir   = ${confdir}/certs
</span><span class="sd">    run_dir = ${localstatedir}/run/${name}
</span><span class="sd">
</span><span class="sd">    # Should likely be ${localstatedir}/lib/radiusd
</span><span class="sd">    db_dir = ${raddbdir}
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    libdir = /usr/lib/freeradius
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    pidfile = ${run_dir}/${name}.pid
</span><span class="sd">
</span><span class="sd">    correct_escapes = true
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    max_request_time = 30
</span><span class="sd">
</span><span class="sd">    cleanup_delay = 5
</span><span class="sd">
</span><span class="sd">    max_requests = 16384
</span><span class="sd">
</span><span class="sd">    hostname_lookups = no
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    log {
</span><span class="sd">
</span><span class="sd">     destination = files
</span><span class="sd">
</span><span class="sd">     colourise = yes
</span><span class="sd">
</span><span class="sd">     file = ${logdir}/radius.log
</span><span class="sd">
</span><span class="sd">     syslog_facility = daemon
</span><span class="sd">
</span><span class="sd">     stripped_names = no
</span><span class="sd">
</span><span class="sd">     auth = yes
</span><span class="sd">
</span><span class="sd">     # auth_accept = no
</span><span class="sd">     # auth_reject = no
</span><span class="sd">     auth_badpass = yes
</span><span class="sd">     auth_goodpass = yes
</span><span class="sd">     msg_denied = &#34;You are already logged in - access denied&#34;
</span><span class="sd">    }
</span><span class="sd">
</span><span class="sd">    checkrad = ${sbindir}/checkrad
</span><span class="sd">
</span><span class="sd">    ENV {
</span><span class="sd">
</span><span class="sd">    }
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    security {
</span><span class="sd">
</span><span class="sd">     user = freerad
</span><span class="sd">     group = freerad
</span><span class="sd">
</span><span class="sd">     allow_core_dumps = no
</span><span class="sd">
</span><span class="sd">     max_attributes = 200
</span><span class="sd">
</span><span class="sd">     reject_delay = 1
</span><span class="sd">
</span><span class="sd">     status_server = yes
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    }
</span><span class="sd">
</span><span class="sd">    proxy_requests  = yes
</span><span class="sd">    $INCLUDE proxy.conf
</span><span class="sd">
</span><span class="sd">    $INCLUDE clients.conf
</span><span class="sd">
</span><span class="sd">    thread pool {
</span><span class="sd">
</span><span class="sd">     start_servers = 5
</span><span class="sd">
</span><span class="sd">     max_servers = 32
</span><span class="sd">
</span><span class="sd">     min_spare_servers = 3
</span><span class="sd">     max_spare_servers = 10
</span><span class="sd">
</span><span class="sd">     max_requests_per_server = 0
</span><span class="sd">
</span><span class="sd">     auto_limit_acct = no
</span><span class="sd">    }
</span><span class="sd">
</span><span class="sd">    modules {
</span><span class="sd">
</span><span class="sd">     $INCLUDE mods-enabled/
</span><span class="sd">    }
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    instantiate {
</span><span class="sd">
</span><span class="sd">    }
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    policy {
</span><span class="sd">     $INCLUDE policy.d/
</span><span class="sd">    }
</span><span class="sd">
</span><span class="sd">    $INCLUDE sites-enabled/</span><span class="w">    
</span><span class="w">
</span><span class="w">
</span></code></pre></div><h4 id="configmap-freeradius-clients-confyaml">configmap-freeradius-clients-conf.yaml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-clients-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-freeradius-clients-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">clients.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">    client php-fpm {
</span><span class="sd">     ipaddr = php-fpm
</span><span class="sd">     secret  = testing123
</span><span class="sd">    }
</span><span class="sd">    client localhost {
</span><span class="sd">     ipaddr = 127.0.0.1
</span><span class="sd">     proto = *
</span><span class="sd">     secret = testing123
</span><span class="sd">     require_message_authenticator = no
</span><span class="sd">     nas_type  = other # localhost isn&#39;t usually a NAS...
</span><span class="sd">     limit {
</span><span class="sd">      max_connections = 16
</span><span class="sd">      lifetime = 0
</span><span class="sd">      idle_timeout = 30
</span><span class="sd">     }
</span><span class="sd">    }
</span><span class="sd">    client localhost_ipv6 {
</span><span class="sd">     ipv6addr = ::1
</span><span class="sd">     secret  = testing123
</span><span class="sd">    }</span><span class="w">    
</span></code></pre></div><h4 id="configmap-freeradius-sqlyaml">configmap-freeradius-sql.yaml</h4>
<blockquote>
<p>主要是修改 Connection info 的内容</p>
</blockquote>
<pre><code>---
kind: ConfigMap
metadata:
  name: daloradius-freeradius-sql-dev
  labels:
    app: daloradius-freeradius-sql-dev
  namespace: radius-dev
apiVersion: v1
data:
  sql: |
    sql {
        dialect = &quot;mysql&quot;
        driver = &quot;rlm_sql_mysql&quot;
        sqlite {
            filename = &quot;/tmp/freeradius.db&quot;
            busy_timeout = 200
            bootstrap = &quot;${modconfdir}/${..:name}/main/sqlite/schema.sql&quot;
    }

    mysql {
        }
        warnings = auto
    }

    postgresql {
        send_application_name = yes
    }

    mongo {
        appname = &quot;freeradius&quot;
        tls {
             certificate_file = /path/to/file
             certificate_password = &quot;password&quot;
             ca_file = /path/to/file
             ca_dir = /path/to/directory
             crl_file = /path/to/file
             weak_cert_validation = false
             allow_invalid_hostname = false
            }
    }

    server = &quot;k8s-db-t.xxx.com&quot;
    port = 3326
    login = &quot;radius&quot;
    password = &quot;xxxxxxxxxxxxxxxxxx&quot;
    read_clients = yes
    radius_db = &quot;radius&quot;
    acct_table1 = &quot;radacct&quot;
    acct_table2 = &quot;radacct&quot;
    postauth_table = &quot;radpostauth&quot;
    authcheck_table = &quot;radcheck&quot;
    groupcheck_table = &quot;radgroupcheck&quot;
    authreply_table = &quot;radreply&quot;
    groupreply_table = &quot;radgroupreply&quot;
    usergroup_table = &quot;radusergroup&quot;
    delete_stale_sessions = yes

    pool {
        start = ${thread[pool].start_servers}
        min = ${thread[pool].min_spare_servers}
        max = ${thread[pool].max_servers}
        spare = ${thread[pool].max_spare_servers}
        uses = 0
        retry_delay = 30
        lifetime = 0
        idle_timeout = 60
    }
    client_table = &quot;nas&quot;
    group_attribute = &quot;SQL-Group&quot;
    $INCLUDE ${modconfdir}/${.:name}/main/${dialect}/queries.conf
    }
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="四-部署nignxphp7的daloradius-web管理后台">四 部署nignx+php7的daloradius web管理后台</h3>
<h4 id="php7部署配置">php7部署配置</h4>
<h5 id="php镜像安装扩展-dockerfile">php镜像安装扩展 Dockerfile</h5>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="l">from hub.xxx.com/php:develop</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="l">user root</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="l">RUN pear install DB \</span><span class="w">
</span><span class="w">  </span><span class="cp">&amp;&amp;</span><span class="w"> </span><span class="l">pear install -a Mail \</span><span class="w">
</span><span class="w">  </span><span class="cp">&amp;&amp;</span><span class="w"> </span><span class="l">pear install -a Mail_Mime</span><span class="w">
</span></code></pre></div><h5 id="deployment-phpyml">deployment-php.yml</h5>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">rollingUpdate</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">maxSurge</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">      </span><span class="nt">maxUnavailable</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RollingUpdate</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/php:radius</span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fpm-9000</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;50m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;600m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/webwww</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-cfg-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/usr/local/etc/php/php.ini&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">php.ini</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-fpm-cfg-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/usr/local/etc/php-fpm.d/www.conf&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">www.conf</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.xxx.xxx.194</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s1-t/daloradius-php</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-cfg-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-cfg-dev</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-fpm-cfg-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-fpm-cfg-dev</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fpm-9000</span><span class="w">
</span><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev-svc</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">   </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fpm-9000</span><span class="w">
</span><span class="w">     </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">     </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">9000</span><span class="w">
</span><span class="w">     </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">32101</span><span class="w">
</span><span class="w">     </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></code></pre></div><h5 id="configmap-php-fpmyaml">configmap-php-fpm.yaml</h5>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-fpm-cfg-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-fpm-cfg-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">www.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        [www]
</span><span class="sd">        user = 101
</span><span class="sd">        group = 101
</span><span class="sd">        listen = 127.0.0.1:9000
</span><span class="sd">        pm = static
</span><span class="sd">        pm.max_children = 20
</span><span class="sd">        pm.start_servers = 10
</span><span class="sd">        pm.min_spare_servers = 5
</span><span class="sd">        pm.max_spare_servers = 5</span><span class="w">        
</span></code></pre></div><h5 id="configmap-phpyaml">configmap-php.yaml</h5>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-cfg-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-php-cfg-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">php.ini</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        [PHP]
</span><span class="sd">        engine = On
</span><span class="sd">        short_open_tag = Off
</span><span class="sd">        precision = 14
</span><span class="sd">        output_buffering = 4096
</span><span class="sd">        zlib.output_compression = Off
</span><span class="sd">        implicit_flush = Off
</span><span class="sd">        unserialize_callback_func =
</span><span class="sd">        serialize_precision = 17
</span><span class="sd">        disable_functions =
</span><span class="sd">        disable_classes =
</span><span class="sd">        zend.enable_gc = On
</span><span class="sd">        expose_php = On
</span><span class="sd">        max_execution_time = 30
</span><span class="sd">        max_input_time = 60
</span><span class="sd">        memory_limit = 128M
</span><span class="sd">        max_input_vars = 10000
</span><span class="sd">        error_reporting = E_ALL &amp; ~E_DEPRECATED &amp; ~E_STRICT
</span><span class="sd">        display_errors = On
</span><span class="sd">        display_startup_errors = Off
</span><span class="sd">        log_errors = On
</span><span class="sd">        log_errors_max_len = 1024
</span><span class="sd">        ignore_repeated_errors = Off
</span><span class="sd">        ignore_repeated_source = Off
</span><span class="sd">        report_memleaks = On
</span><span class="sd">        track_errors = Off
</span><span class="sd">        html_errors = On
</span><span class="sd">        error_log = php_errors.log
</span><span class="sd">        variables_order = &#34;GPCS&#34;
</span><span class="sd">        request_order = &#34;GP&#34;
</span><span class="sd">        register_argc_argv = Off
</span><span class="sd">        auto_globals_jit = On
</span><span class="sd">        post_max_size = 8M
</span><span class="sd">        auto_prepend_file =
</span><span class="sd">        auto_append_file =
</span><span class="sd">        default_mimetype = &#34;text/html&#34;
</span><span class="sd">        default_charset = &#34;UTF-8&#34;
</span><span class="sd">        doc_root =
</span><span class="sd">        user_dir =
</span><span class="sd">        enable_dl = Off
</span><span class="sd">        file_uploads = On
</span><span class="sd">        upload_max_filesize = 2M
</span><span class="sd">        max_file_uploads = 20
</span><span class="sd">        allow_url_fopen = On
</span><span class="sd">        allow_url_include = Off
</span><span class="sd">        default_socket_timeout = 60
</span><span class="sd">        [CLI Server]
</span><span class="sd">        cli_server.color = On
</span><span class="sd">        [Date]
</span><span class="sd">        date.timezone =Asia/Shanghai
</span><span class="sd">        [filter]
</span><span class="sd">        [iconv]
</span><span class="sd">        [intl]
</span><span class="sd">        [sqlite3]
</span><span class="sd">        [Pcre]
</span><span class="sd">        [Pdo]
</span><span class="sd">        [Pdo_mysql]
</span><span class="sd">        pdo_mysql.cache_size = 2000
</span><span class="sd">        pdo_mysql.default_socket=
</span><span class="sd">        [Phar]
</span><span class="sd">        [mail function]
</span><span class="sd">        SMTP = localhost
</span><span class="sd">        smtp_port = 25
</span><span class="sd">        mail.add_x_header = On
</span><span class="sd">        [SQL]
</span><span class="sd">        sql.safe_mode = Off
</span><span class="sd">        [ODBC]
</span><span class="sd">        odbc.allow_persistent = On
</span><span class="sd">        odbc.check_persistent = On
</span><span class="sd">        odbc.max_persistent = -1
</span><span class="sd">        odbc.max_links = -1
</span><span class="sd">        odbc.defaultlrl = 4096
</span><span class="sd">        odbc.defaultbinmode = 1
</span><span class="sd">        [Interbase]
</span><span class="sd">        ibase.allow_persistent = 1
</span><span class="sd">        ibase.max_persistent = -1
</span><span class="sd">        ibase.max_links = -1
</span><span class="sd">        ibase.timestampformat = &#34;%Y-%m-%d %H:%M:%S&#34;
</span><span class="sd">        ibase.dateformat = &#34;%Y-%m-%d&#34;
</span><span class="sd">        ibase.timeformat = &#34;%H:%M:%S&#34;
</span><span class="sd">        [MySQLi]
</span><span class="sd">        mysqli.max_persistent = -1
</span><span class="sd">        mysqli.allow_persistent = On
</span><span class="sd">        mysqli.max_links = -1
</span><span class="sd">        mysqli.cache_size = 2000
</span><span class="sd">        mysqli.default_port = 3306
</span><span class="sd">        mysqli.default_socket =
</span><span class="sd">        mysqli.default_host =
</span><span class="sd">        mysqli.default_user =
</span><span class="sd">        mysqli.default_pw =
</span><span class="sd">        mysqli.reconnect = Off
</span><span class="sd">        [mysqlnd]
</span><span class="sd">        mysqlnd.collect_statistics = On
</span><span class="sd">        mysqlnd.collect_memory_statistics = Off
</span><span class="sd">        [OCI8]
</span><span class="sd">        [PostgreSQL]
</span><span class="sd">        pgsql.allow_persistent = On
</span><span class="sd">        pgsql.auto_reset_persistent = Off
</span><span class="sd">        pgsql.max_persistent = -1
</span><span class="sd">        pgsql.max_links = -1
</span><span class="sd">        pgsql.ignore_notice = 0
</span><span class="sd">        pgsql.log_notice = 0
</span><span class="sd">        [bcmath]
</span><span class="sd">        bcmath.scale = 0
</span><span class="sd">        [browscap]
</span><span class="sd">        [Session]
</span><span class="sd">        session.save_handler = redis
</span><span class="sd">        session.save_path = &#34;tcp://xxx.xxx.xxx.194:6399&#34;
</span><span class="sd">        session.use_strict_mode = 0
</span><span class="sd">        session.use_cookies = 1
</span><span class="sd">        session.use_only_cookies = 1
</span><span class="sd">        session.name = PHPSESSID
</span><span class="sd">        session.auto_start = 0
</span><span class="sd">        session.cookie_lifetime = 0
</span><span class="sd">        session.cookie_path = /
</span><span class="sd">        session.cookie_domain =
</span><span class="sd">        session.cookie_httponly =
</span><span class="sd">        session.serialize_handler = php
</span><span class="sd">        session.gc_probability = 1
</span><span class="sd">        session.gc_divisor = 1000
</span><span class="sd">        session.gc_maxlifetime = 1440
</span><span class="sd">        session.referer_check =
</span><span class="sd">        session.cache_limiter = nocache
</span><span class="sd">        session.cache_expire = 180
</span><span class="sd">        session.use_trans_sid = 0
</span><span class="sd">        session.hash_function = 0
</span><span class="sd">        session.hash_bits_per_character = 5
</span><span class="sd">        url_rewriter.tags = &#34;a=href,area=href,frame=src,input=src,form=fakeentry&#34;
</span><span class="sd">        [Assertion]
</span><span class="sd">        zend.assertions = -1
</span><span class="sd">        tidy.clean_output = Off
</span><span class="sd">        [soap]
</span><span class="sd">        soap.wsdl_cache_enabled=1
</span><span class="sd">        soap.wsdl_cache_dir=&#34;/tmp&#34;
</span><span class="sd">        soap.wsdl_cache_ttl=86400
</span><span class="sd">        soap.wsdl_cache_limit = 5
</span><span class="sd">        [sysvshm]
</span><span class="sd">        [ldap]
</span><span class="sd">        ldap.max_links = -1</span><span class="w">        
</span></code></pre></div><h4 id="nginx部署配置">nginx部署配置</h4>
<h5 id="deployment-nginxyml">deployment-nginx.yml</h5>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">hub.xxx.com/nginx:1.16.0-develop</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-80</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-www-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/webwww</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev-cm</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/nginx/nginx.conf</span><span class="w">
</span><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">nginx.conf</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-www-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.xxx.xxx.194</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/disk/k8s-nfs-data/k8s1-t/daloradius-php</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev-cm</span><span class="w">
</span><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev-cm</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w"> </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">   </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w"> </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w"> </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w"> </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span><span class="w"> </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">   </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-80</span><span class="w">
</span><span class="w">     </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">     </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span><span class="w">     </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">32100</span><span class="w">
</span><span class="w">     </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w"> </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span><span class="w">   </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span></code></pre></div><h5 id="configmap-php-nginxyaml">configmap-php-nginx.yaml</h5>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev-cm</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">nginx.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">    user  www-data;
</span><span class="sd">    worker_processes  1;
</span><span class="sd">
</span><span class="sd">    error_log  /var/log/nginx/error.log warn;
</span><span class="sd">    pid        /var/run/nginx.pid;
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    events {
</span><span class="sd">        worker_connections  1024;
</span><span class="sd">    }
</span><span class="sd">
</span><span class="sd">
</span><span class="sd">    http {
</span><span class="sd">        include       /etc/nginx/mime.types;
</span><span class="sd">        default_type  application/octet-stream;
</span><span class="sd">
</span><span class="sd">        log_format  main  &#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;
</span><span class="sd">                          &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;
</span><span class="sd">                          &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;
</span><span class="sd">
</span><span class="sd">        access_log  /var/log/nginx/access.log  main;
</span><span class="sd">
</span><span class="sd">        sendfile        on;
</span><span class="sd">        #tcp_nopush     on;
</span><span class="sd">
</span><span class="sd">        keepalive_timeout  65;
</span><span class="sd">
</span><span class="sd">        #gzip  on;
</span><span class="sd">
</span><span class="sd">        include /etc/nginx/conf.d/*.conf;
</span><span class="sd">        server {
</span><span class="sd">                listen 80 default_server;
</span><span class="sd">                server_name  radius.xxx.com ;
</span><span class="sd">                root   /webwww;
</span><span class="sd">
</span><span class="sd">                location = /50x.html {
</span><span class="sd">                    root   html;
</span><span class="sd">                }
</span><span class="sd">
</span><span class="sd">               location / {
</span><span class="sd">                    index index.php  index.html index.htm;
</span><span class="sd">                }
</span><span class="sd">
</span><span class="sd">                location ~ \.php$ {
</span><span class="sd">                    fastcgi_pass   daloradius-php-dev:9000;
</span><span class="sd">                    fastcgi_index  index.php;
</span><span class="sd">                    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
</span><span class="sd">                    fastcgi_param  HTTP_HOST          $server_name;
</span><span class="sd">                    include        fastcgi_params;
</span><span class="sd">                }
</span><span class="sd">        }
</span><span class="sd">    }</span><span class="w">    
</span></code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="五-测试">五 测试</h3>
<h4 id="通过前端nginx代理转发到nodeport端口">通过前端nginx代理转发到nodeport端口</h4>
<pre><code> server {
        listen  80;
        charset utf-8;
        listen 443 ssl http2;
        server_name radius.xxx.com;

        ssl_certificate   /etc/nginx/server.pem;
        ssl_certificate_key   /etc/nginx/server.key;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;
        ssl_prefer_server_ciphers on;

        #转向预发布环境
        location / {
            proxy_pass http://xxx.xxx.xxx.221:32100/;
            proxy_redirect http://$host:32100  http://$host;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
</code></pre><h4 id="配置k8s的ingress">配置k8s的ingress</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">radius-dev</span><span class="w">
</span><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">kubernetes.io/ingress.class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;traefik&#34;</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">radius.xxx.com</span><span class="w">
</span><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">daloradius-nginx-dev</span><span class="w">
</span><span class="w">          </span><span class="nt">servicePort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></code></pre></div><h4 id="登录测试">登录测试</h4>
<pre><code>登录地址: radius.xxx.com
账号密码: administrator/radius
</code></pre><h4 id="通过后台新建账号之后-测试账号连通性">通过后台新建账号之后, 测试账号连通性</h4>
<h5 id="命令行">命令行</h5>
<pre><code># 在freeradius 容器内支线
radtest xxx xxx 127.0.0.1 0 testing123


</code></pre><h4 id="通过radiusxxxcom-管理页面测试连通性">通过radius.xxx.com 管理页面测试连通性</h4>
<blockquote>
<p>这是认证通过的
<img src="//zhangzw001.github.io/images/51/img2.jpg" alt=""></p>
</blockquote>
<blockquote>
<p>这是被rejected
<img src="//zhangzw001.github.io/images/51/img.jpg" alt=""></p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>记一次windows安装OpenSSH问题</title>
			<link>https://www.ngirl.xyz/posts/50-%E8%AE%B0%E4%B8%80%E6%AC%A1windows%E5%AE%89%E8%A3%85openssh%E9%97%AE%E9%A2%98/</link>
			<pubDate>Fri, 12 Jun 2020 18:06:26 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/50-%E8%AE%B0%E4%B8%80%E6%AC%A1windows%E5%AE%89%E8%A3%85openssh%E9%97%AE%E9%A2%98/</guid>
			<description>&lt;p&gt;windows一次安装openssh server问题&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>windows一次安装openssh server问题</p>
<h3 id="首先是安装">首先是安装</h3>
<p><a href="https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH">官方教程</a>
<a href="https://github.com/PowerShell/Win32-OpenSSH/releases">官方releases版本</a></p>
<blockquote>
<p>这里直接下载最新 : OpenSSH-Win64.zip, Symbols应该是ddl</p>
</blockquote>
<p>SSH-2.0-OpenSSH_for_Windows_8.1</p>
<h4 id="解压包放在目录-cprogram-filesopenssh">解压包放在目录: C:\Program Files\OpenSSH</h4>
<pre><code># 进入到解压目录
cd C:\Program Files\OpenSSH

# 执行安装命令
powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1

</code></pre><h4 id="配置sshd_config">配置sshd_config</h4>
<pre><code># 首先创建authorized_keys文件
cd C:\ProgramData\ssh
echo &quot;&lt;you ssh public key&gt;&quot; &gt; authorized_keys

# 使用icacls命令修改权限(仅允许SYSTEM和Administrators组有权限写,其他用户只读)
icacls authorized_keys /inheritance:r
icacls authorized_keys /grant SYSTEM:(F)
icacls authorized_keys /grant BUILTIN\Administrators:(F)

# sshd_config修改
开启密钥访问：PubkeyAuthentication yes
禁用密码访问：PasswordAuthentication no
禁用空密码：PermitEmptyPasswords no
关闭DNS查找: UseDNS no
设置authorized_keys路径: AuthorizedKeysFile C:/ProgramData/ssh/authorized_keys  
</code></pre><blockquote>
<p>这里配置AuthorizedKeysFile 为全路径, 之前配置变量导致报错</p>
</blockquote>
<h4 id="启动">启动</h4>
<pre><code>net start sshd
net stop sshd

</code></pre><h4 id="卸载">卸载</h4>
<pre><code>powershell.exe -ExecutionPolicy Bypass -File uninstall-sshd.ps1

</code></pre><h3 id="错误1-read-from-socket-failed-connection-reset-by-peer">错误1 Read from socket failed: Connection reset by peer</h3>
<pre><code>AuthorizedKeysFile 的路径配置的变量, 之后改成绝对路径缺成功了
</code></pre>]]></content>
		</item>
		
		<item>
			<title>go简单记录</title>
			<link>https://www.ngirl.xyz/posts/49-go%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Wed, 27 May 2020 17:25:31 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/49-go%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</guid>
			<description>&lt;p&gt;go的一些简单记录&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>go的一些简单记录</p>
<h3 id="0-mac升级go">0. mac升级go</h3>
<pre><code>go get golang.org/dl/go1.17
go1.17 download
go1.17 version
</code></pre><h3 id="1-go中的用法">1. go中'&hellip;&lsquo;的用法</h3>
<ul>
<li>第一个用法: 用于函数有多个不定参数的情况,可以接受多个不确定个数参数, 将多个参数作为slice传递了</li>
<li>第二个用法: 用于slice打散进行传递</li>
</ul>
<h4 id="例一">例一</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">nums</span> <span class="o">...</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span>
 <span class="nx">totols</span> <span class="o">:=</span><span class="mi">0</span>
 <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nums</span><span class="p">{</span>
  <span class="nx">totols</span> <span class="o">+=</span><span class="nx">num</span>
 <span class="p">}</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">totols</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="nx">slice1</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">}</span>
 <span class="c1">//切片被打散传入
</span><span class="c1"></span> <span class="nf">sum</span><span class="p">(</span><span class="nx">slice1</span><span class="o">...</span><span class="p">)</span>
 <span class="nx">slice2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
 <span class="c1">//元素被打散一个个append
</span><span class="c1"></span> <span class="nx">slice2</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">slice2</span><span class="p">,</span><span class="nx">slice1</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><hr>
<h3 id="2-golang中引用类型-slice切片map字典channel管道">2. golang中引用类型 slice(切片)、map(字典)、channel(管道)</h3>
<blockquote>
<p>int类型的零值是0,string类型的零值是&quot;&quot;，引用类型的零值是nil</p>
</blockquote>
<ul>
<li>值类型</li>
</ul>
<blockquote>
<p>这里a数组是值类型, 赋值给b,修改b不会导致a改变</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
<span class="nx">b</span> <span class="o">:=</span> <span class="nx">a</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span>
<span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="mi">4</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span>
</code></pre></div><ul>
<li>引用类型</li>
</ul>
<blockquote>
<p>这里a是个slice引用类型,修改b会改变a, slice的复制是引用类型</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"> <span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
 <span class="nx">b</span> <span class="o">:=</span> <span class="nx">a</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v:\t%p,%v:\t%p\n&#34;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span>	<span class="c1">//[1 2 3]:        0xc000090020,[1 2 3]:   0xc000090020
</span><span class="c1"></span> <span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="mi">4</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v:\t%p,%v:\t%p\n&#34;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span>	<span class="c1">//[1 2 4]:        0xc000090020,[1 2 4]:   0xc000090020
</span><span class="c1"></span> <span class="nx">c</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v:\t%p,%v:\t%p\n&#34;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span>	<span class="c1">//[1 2 4]:        0xc000090020,[2 4]:     0xc000090028
</span><span class="c1"></span>
</code></pre></div><hr>
<h3 id="3-golang查看变量类型">3. golang查看变量类型</h3>
<ul>
<li>第一种</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">arr</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
<span class="nx">sli</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T,%T\n&#34;</span><span class="p">,</span><span class="nx">arr</span><span class="p">,</span><span class="nx">sli</span><span class="p">)</span>  <span class="c1">//[3]int,[]int
</span></code></pre></div><blockquote>
<p>显示的结果可以看到, 一个是数组, 一个是切片</p>
</blockquote>
<ul>
<li>第二种</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"> <span class="nx">arr</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
 <span class="nx">sli</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;type:&#34;</span><span class="p">,</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">)</span>  <span class="c1">//type: [3]int
</span><span class="c1"></span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;type:&#34;</span><span class="p">,</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">sli</span><span class="p">)</span> <span class="p">)</span>  <span class="c1">//type: []int
</span></code></pre></div><h3 id="4-go中内置分配内存函数new和make的用法">4. go中内置分配内存函数new和make的用法</h3>
<p>原文: <a href="https://www.cnblogs.com/xhhgo/p/10916254.html">go语言值类型与引用类型理解</a></p>
<ul>
<li>make 仅用于 slice, map, channel, 返回类型是本身, 并且会初始化</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nb">make</span><span class="p">(</span><span class="nx">t</span> <span class="nx">Type</span><span class="p">,</span> <span class="nx">size</span> <span class="o">...</span><span class="nx">IntegerType</span><span class="p">)</span> <span class="nx">Type</span>
</code></pre></div><ul>
<li>new 返回类型是指针(引用类型)</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// The new built-in function allocates memory. The first argument is a type,
</span><span class="c1">// not a value, and the value returned is a pointer to a newly
</span><span class="c1">// allocated zero value of that type.
</span><span class="c1"></span><span class="kd">func</span> <span class="nb">new</span><span class="p">(</span><span class="nx">Type</span><span class="p">)</span> <span class="o">*</span><span class="nx">Type</span>
<span class="c1">//它只接受一个参数，这个参数是一个类型，分配好内存后，返回一个指向该类型内存地址的指针。同时请注意它同时把分配的内存置为零，也就是类型的零值。
</span></code></pre></div><h3 id="5-查看slice的长度和容量">5. 查看slice的长度和容量</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"> <span class="c1">// 初始化一个3个0的slice,分配内容的容量是10个int
</span><span class="c1"></span> <span class="nx">s3</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s3</span><span class="p">)</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">s3</span><span class="p">))</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">s3</span><span class="p">))</span>
</code></pre></div><h3 id="6-闭包的说明">6. 闭包的说明</h3>
<p>原文: <a href="https://www.jianshu.com/p/faf7ef7fbcf8">闭包与匿名函数</a></p>
<h4 id="闭包与外部函数的生命周期">闭包与外部函数的生命周期</h4>
<blockquote>
<p>内函数对外函数的修改 是对变量的引用, 所以内函数结束后变量不会释放, 变量的内存地址不变</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">A</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">n</span><span class="o">++</span>
    <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">B</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">n</span><span class="o">++</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">A1</span><span class="o">:=</span><span class="nf">A</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">A1</span><span class="p">)</span>  <span class="c1">//0x48e3d0  在这儿已经定义了n=20 ，然后执行++ 操作，所以是21 。
</span><span class="c1"></span>    <span class="nf">A1</span><span class="p">()</span>     <span class="c1">//21 后面对闭包的调用，没有对n执行加一操作，所以一直是21
</span><span class="c1"></span>    <span class="nf">A1</span><span class="p">()</span>     <span class="c1">//21
</span><span class="c1"></span>
    <span class="nx">B1</span><span class="o">:=</span><span class="nf">B</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">B1</span><span class="p">)</span>  <span class="c1">//0x48e340   这儿定义了n 为10
</span><span class="c1"></span>    <span class="nf">B1</span><span class="p">()</span>       <span class="c1">//11  后面对闭包的调用，每次都对n进行加1操作。
</span><span class="c1"></span>    <span class="nf">B1</span><span class="p">()</span>       <span class="c1">//12
</span><span class="c1"></span>
<span class="p">}</span>
</code></pre></div><h3 id="7-反引号">7. 反引号</h3>
<ul>
<li>反引号会原样输出, 不能使用转义, \n也会原样输出</li>
<li>\r 类似python里面的 \r ，每次都覆盖上一次输出的内容</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">spinner</span><span class="p">(</span><span class="nx">delay</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">for</span> <span class="p">{</span>
  <span class="c1">//for _, r := range `-\|/` {
</span><span class="c1"></span>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="s">&#34;-\\|/&#34;</span> <span class="p">{</span>
   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\r%c&#34;</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span>
   <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">delay</span><span class="p">)</span>
  <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><hr>
<h3 id="8-编译命令">8. 编译命令</h3>
<h4 id="不通平台编译命令">不通平台编译命令</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="err">#</span> <span class="mi">1</span><span class="err">、</span><span class="nx">Mac下编译Linux</span><span class="p">,</span> <span class="nx">Windows平台的64位可执行程序</span><span class="err">：</span>
<span class="nx">CGO_ENABLED</span><span class="p">=</span><span class="mi">0</span> <span class="nx">GOOS</span><span class="p">=</span><span class="nx">linux</span> <span class="nx">GOARCH</span><span class="p">=</span><span class="nx">amd64</span> <span class="k">go</span> <span class="nx">build</span> <span class="nx">test</span><span class="p">.</span><span class="k">go</span>
<span class="nx">CGO_ENABLED</span><span class="p">=</span><span class="mi">0</span> <span class="nx">GOOS</span><span class="p">=</span><span class="nx">windows</span> <span class="nx">GOARCH</span><span class="p">=</span><span class="nx">amd64</span> <span class="k">go</span> <span class="nx">build</span> <span class="nx">test</span><span class="p">.</span><span class="k">go</span>
<span class="err">#</span> <span class="mi">2</span><span class="err">、</span><span class="nx">Linux下编译Mac</span><span class="p">,</span> <span class="nx">Windows平台的64位可执行程序</span><span class="err">：</span>

<span class="nx">CGO_ENABLED</span><span class="p">=</span><span class="mi">0</span> <span class="nx">GOOS</span><span class="p">=</span><span class="nx">darwin</span> <span class="nx">GOARCH</span><span class="p">=</span><span class="nx">amd64</span> <span class="k">go</span> <span class="nx">build</span> <span class="nx">test</span><span class="p">.</span><span class="k">go</span>
<span class="nx">CGO_ENABLED</span><span class="p">=</span><span class="mi">0</span> <span class="nx">GOOS</span><span class="p">=</span><span class="nx">windows</span> <span class="nx">GOARCH</span><span class="p">=</span><span class="nx">amd64</span> <span class="k">go</span> <span class="nx">build</span> <span class="nx">test</span><span class="p">.</span><span class="k">go</span>
<span class="err">#</span> <span class="mi">3</span><span class="err">、</span><span class="nx">Windows下编译Mac</span><span class="p">,</span> <span class="nx">Linux平台的64位可执行程序</span><span class="err">：</span>

<span class="nx">SET</span> <span class="nx">CGO_ENABLED</span><span class="p">=</span><span class="mi">0</span><span class="nx">SET</span> <span class="nx">GOOS</span><span class="p">=</span><span class="nx">darwin3</span> <span class="nx">SET</span> <span class="nx">GOARCH</span><span class="p">=</span><span class="nx">amd64</span> <span class="k">go</span> <span class="nx">build</span> <span class="nx">test</span><span class="p">.</span><span class="k">go</span>
<span class="nx">SET</span> <span class="nx">CGO_ENABLED</span><span class="p">=</span><span class="mi">0</span> <span class="nx">SET</span> <span class="nx">GOOS</span><span class="p">=</span><span class="nx">linux</span> <span class="nx">SET</span> <span class="nx">GOARCH</span><span class="p">=</span><span class="nx">amd64</span> <span class="k">go</span> <span class="nx">build</span>  <span class="nx">test</span><span class="p">.</span><span class="k">go</span>
</code></pre></div><h4 id="生成ssa文件">生成ssa文件</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">GOSSAFUNC</span><span class="p">=</span><span class="nx">main</span> <span class="k">go</span> <span class="nx">build</span> <span class="nx">test</span><span class="p">.</span><span class="k">go</span>
</code></pre></div><hr>
<h3 id="9-斐波那契数列">9. 斐波那契数列</h3>
<h4 id="1-递归写法n-越大-就贼慢">1 递归写法(n 越大 就贼慢)</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Fib</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span> <span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">n</span> <span class="o">&lt;=</span><span class="mi">1</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span> <span class="p">}</span>
	<span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nf">fib</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div><h4 id="2-循环的写法">2 循环的写法</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Fib2</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span> <span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">f</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">2</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
		<span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
		<span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="p">}</span>
</code></pre></div><h4 id="3-匿名函数写法">3 匿名函数写法</h4>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Fib3</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
 <span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">m</span> <span class="kt">int</span>
 <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nx">n</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="p">{</span>
   <span class="nx">n</span> <span class="p">=</span> <span class="mi">1</span>
  <span class="p">}</span>
  <span class="nx">n</span><span class="p">,</span><span class="nx">m</span> <span class="p">=</span> <span class="nx">n</span><span class="o">+</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span>
  <span class="k">return</span> <span class="nx">m</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="10-string方法">10. String()方法</h3>
<blockquote>
<p>go中如果类型A实现了String()方法(string() 不行),那么在输出A的时候,会自动调用String() 方法</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">A</span> <span class="kd">struct</span> <span class="p">{</span>
  <span class="kt">string</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="nx">A</span><span class="p">)</span> <span class="nf">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;this is String() : %v\n&#34;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="kt">string</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">A</span><span class="p">{</span><span class="s">&#34;test&#34;</span><span class="p">}</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">//this is String() : test
</span><span class="c1"></span>
<span class="p">}</span>

</code></pre></div><h3 id="11-printf用法">11. Printf用法</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//第一, 通常Printf格式化字符串包含多个%参数时将会包含对应相同数量的额外操作数，但是%之后的[1]副词告诉Printf函数再次使用第一个操作数。
</span><span class="c1">//第二, %后的#副词告诉Printf在用%o、%x或%X输出时生成0、0x或0X前缀,
</span><span class="c1">//     %#v 如果是列表会输出类型,但[]byte{} 例外
</span><span class="c1">//     通过源码 printArg -&gt; p.fmtBytes(f, verb, &#34;[]byte&#34;) 知道,结果不是[]uint8{},而是[]byte{}
</span><span class="c1"></span>
<span class="nx">o</span> <span class="o">:=</span> <span class="mo">0666</span>
<span class="nx">x</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%d %[1]o %#[1]o , %d %[2]x %#[2]x %#[2]X\n&#34;</span><span class="p">,</span> <span class="nx">o</span><span class="p">,</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// &#34;438 666 0666 , 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF&#34;
</span><span class="c1"></span>

</code></pre></div><h3 id="12-fmtprintf">12. fmt.Printf</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="o">%</span><span class="nx">p</span>	<span class="o">-</span><span class="p">&gt;</span> <span class="nx">内存地址</span>
<span class="o">%</span><span class="nx">q</span>	<span class="o">-</span><span class="p">&gt;</span> <span class="nx">该值对应的单引号括起来的go语法字符字面值</span><span class="err">，</span><span class="nx">必要时会采用安全的转义表示</span>
<span class="o">%+</span><span class="nx">v</span>	<span class="o">-</span><span class="p">&gt;</span> <span class="nx">输出结构体时</span><span class="p">,</span> <span class="nx">会打印字段名称</span>
</code></pre></div><ul>
<li>%+v 例子</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">info</span> <span class="kd">struct</span> <span class="p">{</span>
  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
  <span class="nx">Age</span>  <span class="kt">int</span>    <span class="s">`json:&#34;age&#34;`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">i</span> <span class="o">:=</span> <span class="nx">info</span><span class="p">{</span><span class="s">&#34;test&#34;</span><span class="p">,</span><span class="mi">11</span><span class="p">}</span>
	<span class="nx">j</span> <span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v, %+v, %v \n&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">j</span><span class="p">))</span>
	<span class="c1">//{test 11}, {Name:test Age:11}, {&#34;name&#34;:&#34;test&#34;,&#34;age&#34;:11}
</span><span class="c1"></span>
<span class="p">}</span>
</code></pre></div><h3 id="13-类型断言">13. 类型断言</h3>
<ul>
<li>转<a href="https://blog.csdn.net/cbmljs/article/details/82966907">Go-类型断言 问题</a></li>
<li>转<a href="https://www.cnblogs.com/believepd/p/10945700.html">Go-类型断言 最佳实践</a></li>
</ul>
<blockquote>
<p>类型断言：由于接口是一般类型，不知道具体类型，如果要转成具体类型，就需要使用类型断言。</p>
</blockquote>
<blockquote>
<p>struct 是相同的属性, interface 是相同的方法</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
 <span class="s">&#34;fmt&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">Usb</span> <span class="kd">interface</span> <span class="p">{</span>
 <span class="nf">Connect</span><span class="p">()</span>
 <span class="nf">Disconnect</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Phone</span> <span class="kd">struct</span><span class="p">{</span> <span class="nx">Name</span> <span class="kt">string</span> <span class="p">}</span>
<span class="kd">type</span> <span class="nx">Camera</span> <span class="kd">struct</span><span class="p">{</span> <span class="nx">Name</span> <span class="kt">string</span> <span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Phone</span><span class="p">)</span> <span class="nf">Connect</span><span class="p">()</span>     <span class="p">{</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s连接中...\n&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span> <span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Phone</span><span class="p">)</span> <span class="nf">Disconnect</span><span class="p">()</span>  <span class="p">{</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s断开连接中...\n&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span> <span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">Camera</span><span class="p">)</span> <span class="nf">Connect</span><span class="p">()</span>    <span class="p">{</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s连接中...\n&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span> <span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">Camera</span><span class="p">)</span> <span class="nf">Disconnect</span><span class="p">()</span> <span class="p">{</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s断开连接中...\n&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span> <span class="p">}</span>

<span class="c1">// Phone结构体特有的方法Call
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Phone</span><span class="p">)</span> <span class="nf">Call</span><span class="p">()</span> <span class="p">{</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;正在使用%s打电话...\n&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span> <span class="p">}</span>
<span class="c1">// Camera
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">Camera</span><span class="p">)</span> <span class="nf">Photograph</span><span class="p">()</span> <span class="p">{</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;正在使用%s拍照...\n&#34;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">)}</span>
<span class="kd">type</span> <span class="nx">Computer</span> <span class="kd">struct</span><span class="p">{}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">Computer</span><span class="p">)</span> <span class="nf">Working</span><span class="p">(</span><span class="nx">usb</span> <span class="nx">Usb</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">usb</span><span class="p">.</span><span class="nf">Connect</span><span class="p">()</span>
 <span class="nx">usb</span><span class="p">.</span><span class="nf">Disconnect</span><span class="p">()</span>
 <span class="c1">// 如果 usb 是指向 Phone 结构体变量，则还需要调用 Call 方法
</span><span class="c1"></span> <span class="c1">//phone, ok := usb.(Phone) // 类型断言
</span><span class="c1"></span> <span class="c1">//if ok {
</span><span class="c1"></span> <span class="c1">// phone.Call()
</span><span class="c1"></span> <span class="c1">//}
</span><span class="c1"></span> <span class="k">switch</span> <span class="nx">v</span> <span class="o">:=</span> <span class="nx">usb</span><span class="p">.(</span><span class="kd">type</span><span class="p">){</span>
 <span class="k">case</span> <span class="nx">Phone</span><span class="p">:</span>
  <span class="nx">v</span><span class="p">.</span><span class="nf">Call</span><span class="p">()</span>
 <span class="k">case</span> <span class="nx">Camera</span><span class="p">:</span>
  <span class="nx">v</span><span class="p">.</span><span class="nf">Photograph</span><span class="p">()</span>
 <span class="k">default</span><span class="p">:</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;不支持的设备&#34;</span><span class="p">)</span>

 <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="c1">// 定义一个 Usb 接口数组，可以存放 Phone 和 Camera 结构体的实例
</span><span class="c1"></span> <span class="kd">var</span> <span class="nx">usbArr</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="nx">Usb</span>
 <span class="nx">usbArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Phone</span><span class="p">{</span><span class="s">&#34;苹果&#34;</span><span class="p">}</span>
 <span class="nx">usbArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Camera</span><span class="p">{</span><span class="s">&#34;尼康&#34;</span><span class="p">}</span>
 <span class="kd">var</span> <span class="nx">computer</span> <span class="nx">Computer</span>
 <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">usbArr</span> <span class="p">{</span>
  <span class="nx">computer</span><span class="p">.</span><span class="nf">Working</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
 <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">usbArr</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div><h3 id="14-select-和switch">14 select 和switch</h3>
<p>select 操作语句只能是【IO 操作】,一般用于channel</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">
<span class="kd">func</span> <span class="nf">worker</span><span class="p">()</span>  <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span> <span class="p">{</span>
	<span class="nx">workerChan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
	<span class="nx">r</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">rand</span><span class="p">.</span><span class="nf">NewSource</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">()))</span>
	<span class="nx">workTime</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nf">Int63n</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span>
	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">workTime</span><span class="p">)</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">workerChan</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
	<span class="p">}()</span>
	<span class="k">return</span>  <span class="nx">workerChan</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">timeout</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">10</span>
	<span class="nx">timer</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTimer</span><span class="p">(</span><span class="nx">timeout</span><span class="p">)</span>
	<span class="nx">ticker</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTicker</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
	<span class="nx">myWorkerTime</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>

	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">{</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">myWorkerTime</span> <span class="p">=</span> <span class="nf">worker</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">timer</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;timer.c &gt;&gt;&gt; timeout &#34;</span><span class="p">)</span>
			<span class="k">return</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ticker</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;ticker.c &gt;&gt;&gt;&#34;</span><span class="p">)</span>
		<span class="k">case</span> <span class="o">&lt;-</span> <span class="nx">myWorkerTime</span><span class="p">:</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;workerTime &gt;&gt;&gt;&#34;</span><span class="p">)</span>
			<span class="nx">timer</span><span class="p">.</span><span class="nf">Reset</span><span class="p">(</span><span class="nx">timeout</span><span class="p">)</span>
		<span class="k">default</span><span class="p">:</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div><h3 id="15-channel简单例子">15 channel简单例子</h3>
<blockquote>
<p>channel 导致 deadlock 是由于未 close channel</p>
<p>close channel之后,还可以读取 channel</p>
<ol>
<li>
<p>value,ok := &lt;- channel 但是返回value=0,ok=false</p>
</li>
<li>
<p>for value := range channel 的时候会退出 for 循环</p>
</li>
</ol>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">
<span class="kd">func</span> <span class="nf">write</span><span class="p">(</span><span class="nx">ch1</span> <span class="kd">chan</span> <span class="kt">int</span> <span class="p">,</span> <span class="nx">done</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">ch1</span> <span class="o">&lt;-</span> <span class="nx">i</span>
		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
	<span class="p">}</span>

    <span class="c1">// 必须要 close
</span><span class="c1"></span>	<span class="nb">close</span><span class="p">(</span><span class="nx">ch1</span><span class="p">)</span>
    <span class="c1">// 或者通过 done 来退出
</span><span class="c1"></span>    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
    <span class="p">}()</span>

<span class="p">}</span>

<span class="kd">func</span> <span class="nf">read</span><span class="p">(</span><span class="nx">ch1</span> <span class="kd">chan</span> <span class="kt">int</span> <span class="p">,</span> <span class="nx">done</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch1</span><span class="p">:</span>
            <span class="c1">// 如果 close 这里会收到 not ok
</span><span class="c1"></span>			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;not OK&#34;</span><span class="p">,</span><span class="nx">v</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;v:&#34;</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;received done channel finish&#34;</span><span class="p">)</span>
			<span class="k">return</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">ch1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
	<span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">write</span><span class="p">(</span><span class="nx">ch1</span><span class="p">,</span><span class="nx">done</span><span class="p">,</span><span class="o">&amp;</span><span class="nx">wg</span><span class="p">)</span>
	<span class="k">go</span> <span class="nf">read</span><span class="p">(</span><span class="nx">ch1</span><span class="p">,</span><span class="nx">done</span><span class="p">,</span><span class="o">&amp;</span><span class="nx">wg</span><span class="p">)</span>
	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div><h3 id="16-syncwaitgroup-使用">16 sync.WaitGroup 使用</h3>
<blockquote>
<p>同上</p>
</blockquote>
<h3 id="17-包导入的几点说明">17 包导入的几点说明</h3>
<blockquote>
<p>详情见<a href="http://shouce.jb51.net/gopl-zh/ch10/ch10-03.html">go圣经</a></p>
</blockquote>
<ul>
<li>导入路径名的约定</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">关于默认包名一般采用导入路径名的最后一段的约定也有三种例外情况。
1. 第一个例外，包对应一个可执行程序，也就是main包，这时候main包本身的导入路径是无关紧要的。名字为main的包是给go build构建命令一个信息，这个包编译完之后必须调用连接器生成一个可执行程序。

2. 第二个例外，包所在的目录中可能有一些文件名是以_test.go为后缀的Go源文件（译注：前面必须有其它的字符，因为以_或.开头的源文件会被构建工具忽略），并且这些源文件声明的包名也是以_test为后缀名的。这种目录可以包含两种包：一种是普通包，另一种则是测试的外部扩展包。
所有以_test为后缀包名的测试外部扩展包都由go test命令独立编译，普通包和测试的外部扩展包是相互独立的。测试的外部扩展包一般用来避免测试代码中的循环导入依赖

3. 第三个例外，一些依赖版本号的管理工具会在导入路径后追加版本号信息，例如<span class="s2">&#34;gopkg.in/yaml.v2&#34;</span>。这种情况下包的名字并不包含版本号后缀，而是yaml。
</code></pre></div><ul>
<li>匿名导入</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="nx">_</span> <span class="s">&#34;image/png&#34;</span> <span class="c1">// register PNG decoder
</span></code></pre></div><ul>
<li>构建包(go doc go/build)</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">1. 如果一个文件名包含了一个操作系统或处理器类型名字，例如net_linux.go或asm_amd64.s，Go语言的构建工具将只在对应的平台编译这些文件

2. 如果文件中可能包含下面的注释：
  // +build linux darwin	//只在编译程序对应的目标操作系统是Linux或Mac OS X时才编译这个文件
  // +build ignore		//不编译
</code></pre></div><ul>
<li>一些坑</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">1. 导入包如果是大写开头导致go mod tidy，go mod download等命令无法使用。例如: github.com/Unknwon/com, 可以replace为github.com/unknwon/com,目前直接使用go get github.com/unknwon/com 即可
</code></pre></div><h3 id="18-go-get-超时的错误">18 go get 超时的错误</h3>
<blockquote>
<p>如果遇到超时错误&quot;https fetch: Get &hellip; connect: connection timed out&quot;, 请设置代理后重试，详见 <a href="https://www.bfe-networks.net/zh_cn/faq/installation/">安装常见问题</a></p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">go env -w <span class="nv">GO111MODULE</span><span class="o">=</span>on
go env -w <span class="nv">GOPROXY</span><span class="o">=</span>https://goproxy.cn,direct
</code></pre></div><h3 id="19-bitcount的代码解析">19 bitCount的代码解析</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 每次 &amp; 操作都会消耗一个二进制的1
</span><span class="c1">// 10110 &amp; 10101 = 10100   消耗了第四个的1
</span><span class="c1">// 10100 &amp; 10011 = 10000   消耗了第三个的1
</span><span class="c1">// 10000 &amp; 01111 = 0       消耗了第一个的1
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">getCount</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>  <span class="p">{</span>
 <span class="nx">t</span> <span class="o">:=</span> <span class="mi">0</span>
 <span class="k">for</span> <span class="nx">a</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
  <span class="nx">a</span> <span class="o">&amp;=</span> <span class="nx">a</span><span class="o">-</span><span class="mi">1</span>
  <span class="nx">t</span><span class="o">++</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="nx">t</span>
<span class="p">}</span>
</code></pre></div><h3 id="20-简单介绍接口的实现">20 简单介绍接口的实现</h3>
<p><a href="https://blog.csdn.net/think2me/article/details/108149326">go中实现接口的几种方式</a></p>
<p>举个简单例子说明</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//定义一个接口,存在Value方法
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">emptyInterface</span> <span class="kd">interface</span> <span class="p">{</span>
 <span class="nf">Value</span><span class="p">(</span><span class="nx">key</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kd">interface</span><span class="p">{}</span>
<span class="p">}</span>

<span class="c1">// 定义一个empty类型
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">empty</span> <span class="kt">int</span>

<span class="c1">// 定义empty类型的Value方法,实现emptyInterface
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">empty</span><span class="p">)</span> <span class="nf">Value</span><span class="p">(</span><span class="nx">key</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">{</span>
 <span class="k">return</span> <span class="nx">key</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="c1">// 定义一个empty类型结构体
</span><span class="c1"></span> <span class="nx">e</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span>
 <span class="c1">// 定义一个emptyInterface类型接口
</span><span class="c1"></span> <span class="kd">var</span> <span class="nx">eIface</span> <span class="nx">emptyInterface</span>
 <span class="c1">// 接口赋值,完成方法的重写
</span><span class="c1"></span> <span class="nx">eIface</span> <span class="p">=</span> <span class="nx">e</span>
 <span class="c1">// 对接口进行调用
</span><span class="c1"></span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">eIface</span><span class="p">.</span><span class="nf">Value</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
 <span class="c1">// 显然通过结构体也能调用, 但是一般我们不这么做
</span><span class="c1"></span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nf">Value</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></div><p>拿个context例子说明, 首先Context接口有四个方法</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Context</span> <span class="kd">interface</span> <span class="p">{</span>
 <span class="nf">Deadline</span><span class="p">()</span> <span class="p">(</span><span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">ok</span> <span class="kt">bool</span><span class="p">)</span>
 <span class="nf">Done</span><span class="p">()</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
 <span class="nf">Err</span><span class="p">()</span> <span class="kt">error</span>
 <span class="nf">Value</span><span class="p">(</span><span class="nx">key</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kd">interface</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></div><p>并且emptyCtx类型实现了Context接口</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">emptyCtx</span> <span class="kt">int</span>

<span class="kd">func</span> <span class="p">(</span><span class="o">*</span><span class="nx">emptyCtx</span><span class="p">)</span> <span class="nf">Deadline</span><span class="p">()</span> <span class="p">(</span><span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">ok</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">return</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="o">*</span><span class="nx">emptyCtx</span><span class="p">)</span> <span class="nf">Done</span><span class="p">()</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span> <span class="p">{</span>
 <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="o">*</span><span class="nx">emptyCtx</span><span class="p">)</span> <span class="nf">Err</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
 <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="o">*</span><span class="nx">emptyCtx</span><span class="p">)</span> <span class="nf">Value</span><span class="p">(</span><span class="nx">key</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">{</span>
 <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

</code></pre></div><p>那么我们就说emptyCtx 实现了Context 接口, 那实现了这个接口具体要怎么做呢?</p>
<p>比如我们可以像上面的例子一样, 赋值, 但这里使用的函数返回:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="p">(</span>
 <span class="nx">background</span> <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">emptyCtx</span><span class="p">)</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">Background</span><span class="p">()</span> <span class="nx">Context</span> <span class="p">{</span>
 <span class="k">return</span> <span class="nx">background</span>
<span class="p">}</span>

</code></pre></div><h3 id="21-swagger本地测试的一个问题">21. swagger本地测试的一个问题</h3>
<h4 id="211-在执行try-it-out-的时候报错-typeerror-failed-to-fetch">21.1 在执行try it out 的时候报错: TypeError: Failed to fetch</h4>
<p>原因是swagger的配置中 <code>host=&quot;localhost:8880&quot;</code> , 而我浏览器打开的是 <code>127.0.0.1:8880</code> , 从日志也能看到是不同的请求</p>
<pre><code># TypeError: Failed to fetch 错误的请求日志:
[GIN] 2020/12/01 - 16:12:49 | 404 |         790ns |             ::1 | OPTIONS  &quot;/admin_login/login&quot;

# 正常的请求日志:
[GIN] 2020/12/01 - 16:15:24 | 200 |     452.808µs |             ::1 | POST     &quot;/admin_login/login&quot;
</code></pre><p>所以只要保持一致即可, 配置的是<code>localhost</code>请求就不要用<code>127.0.0.1</code></p>
<h4 id="212-打开页面日志报错-not-yet-registered-swag">21.2 打开页面日志报错: not yet registered swag</h4>
<blockquote>
<p>当前配置:</p>
</blockquote>
<pre><code># 首先已经添加了路由规则
e.GET(&quot;/swagger/*any&quot;,ginSwagger.WrapHandler(swaggerFiles.Handler))
</code></pre><blockquote>
<p>解决方法:</p>
</blockquote>
<pre><code># 导入项目中的docs目录
import	_ &quot;github.com/zhangzw001/learnGin/docs&quot;

</code></pre><h3 id="22-gorm">22. gorm.</h3>
<p><a href="https://segmentfault.com/a/1190000021363996">GORM之ErrRecordNotFound采坑记录</a></p>
<blockquote>
<p>gorm.DB 的Find或First等方法, 在传入struc的时候 , 可能返回ErrRecordNotFound, 在传入list的时候, 可能返回nil</p>
</blockquote>
<h3 id="23-go转汇编">23. go转汇编</h3>
<pre><code># 第一种
go tool compile -S go-main-slice.go
# 第二种
GOSSAFUNC=main go build go-main-slice.go
</code></pre><h3 id="24-go比较问题">24. go比较问题</h3>
<ul>
<li>数组比较</li>
</ul>
<pre><code>1. 数组可以比较, 但是必须是相同的数组
2. 数组的长度不同是属于不同的数组,不能比较
</code></pre><ul>
<li>结构体比较</li>
</ul>
<pre><code>1. 结构体只能比较相等,不能比较大小
2. 结构体的属性顺序不同,也是属于不同的结构体, 同样无法比较
3. 不可以比较的属性是: 切片,map,函数, 具体见: https://golang.org/ref/spec#Comparison_operators
</code></pre><h3 id="25-type类型定义和类型别名">25 type类型定义和类型别名</h3>
<pre><code>type的有两个用法, 一个是等号一个是没有等号
type Test1 uint8    //类型定义, 是一个新的独立类型,赋值需要强制转换
type Test2 = uint8  //类型别名, reflect.TypeOf 可以看到都是uint8
</code></pre><h3 id="const">const</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">const</span> <span class="p">(</span>
	<span class="nx">x</span> <span class="p">=</span> <span class="kc">iota</span>	<span class="c1">//0
</span><span class="c1"></span>	<span class="nx">_</span>
	<span class="nx">y</span>			<span class="c1">//2
</span><span class="c1"></span>	<span class="nx">z</span> <span class="p">=</span> <span class="mi">4</span>		<span class="c1">//4
</span><span class="c1"></span>	<span class="nx">k</span>			<span class="c1">//4
</span><span class="c1"></span>	<span class="nx">p</span> <span class="p">=</span> <span class="kc">iota</span>	<span class="c1">//5
</span><span class="c1"></span><span class="p">)</span>
</code></pre></div><h3 id="25-go语言断行规则">25 go语言断行规则</h3>
<ul>
<li><a href="https://gfw.go101.org/article/line-break-rules.html">Go代码断行规则</a></li>
</ul>
<ol>
<li>在Go代码中，注释除外，如果一个代码行的最后一个语法词段（token）为下列所示之一，则一个分号将自动插入在此字段后（即行尾）：
<ul>
<li>一个标识符；</li>
<li>一个整数、浮点数、虚部、码点或者字符串字面量；</li>
<li>这几个跳转关键字之一：break、continue、fallthrough和return；</li>
<li>自增运算符++或者自减运算符&ndash;；</li>
<li>一个右括号：)、]或}。</li>
</ul>
</li>
<li>为了允许一条复杂语句完全显示在一个代码行中，分号可能被插入在一个右小括号)或者右大括号}之前。</li>
</ol>
<ul>
<li>例子1</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">如下是不行的</span><span class="p">,</span> <span class="nx">因为</span><span class="o">++</span><span class="nx">后面会被编译器添加分号</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="o">++</span><span class="p">;)</span>
</code></pre></div><ul>
<li>例子2</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">如下是可行的</span>
<span class="nx">deployClient</span> <span class="o">:=</span> <span class="nx">clientSet</span><span class="p">.</span>
    <span class="nf">AppsV1</span><span class="p">().</span>
    <span class="nf">Deployments</span><span class="p">(</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">NamespaceDefault</span><span class="p">)</span>
<span class="nx">但如下是不行的</span>
<span class="nx">deployClient</span> <span class="o">:=</span> <span class="nx">clientSet</span>       <span class="c1">// 会在标识符后添加分号
</span><span class="c1"></span>    <span class="p">.</span><span class="nf">AppsV1</span><span class="p">()</span>                   <span class="c1">// 会在右括号)后添加分号
</span><span class="c1"></span>    <span class="p">.</span><span class="nf">Deployments</span><span class="p">(</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">NamespaceDefault</span><span class="p">)</span>    
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">alwaysFalse</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">switch</span> <span class="nf">alwaysFalse</span><span class="p">()</span>
	<span class="p">{</span>
	<span class="k">case</span> <span class="kc">true</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;true&#34;</span><span class="p">)</span>
	<span class="k">case</span> <span class="kc">false</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;false&#34;</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="nx">如上代码是可行的</span><span class="p">,</span> <span class="nx">但结果是</span> <span class="kc">true</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>k8s升级(1.10-&gt;1.15)</title>
			<link>https://www.ngirl.xyz/posts/48-k8s%E5%8D%87%E7%BA%A7-1-10-1-15/</link>
			<pubDate>Mon, 18 May 2020 17:43:27 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/48-k8s%E5%8D%87%E7%BA%A7-1-10-1-15/</guid>
			<description>&lt;p&gt;k8s升级一般不能跨版本升级, 所以这里间断介绍升级过程, 每次升级一个大版本&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>k8s升级一般不能跨版本升级, 所以这里间断介绍升级过程, 每次升级一个大版本</p>
<h3 id="k8s升级">k8s升级</h3>
<ul>
<li><a href="https://blog.51cto.com/newfly/2440901?source=dra">kubernetes集群版本升级攻略</a></li>
<li><a href="https://kuboard.cn/install/upgrade-k8s/1.15.x-1.16.x.html">kuboard网址k8s升级攻略</a></li>
<li><a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">官方kubeadm升级文档</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG">官方k8s版本changelog</a></li>
</ul>
<h3 id="版本关系">版本关系</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">Kubernetes 1.18.0 --&gt;Docker版本1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09, 19.03
Kubernetes 1.17.0 --&gt;Docker版本1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09, 19.03
Kubernetes 1.16.0 --&gt;Docker版本1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09
Kubernetes 1.15.0 --&gt;Docker版本1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09
Kubernetes 1.14.0 --&gt;Docker版本1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09
Kubernetes 1.13.0 --&gt;Docker版本1.11.1, 1.12.1, 1.13.1, 17.03, 17.06, 17.09, 18.06
Kubernetes 1.12.0 --&gt;Docker版本1.11.1, 1.12.1, 1.13.1, 17.03, 17.06, 17.09, 18.06
Kubernetes 1.11.* --&gt;Docker版本1.11.2 to 1.13.1 and 17.03.x <span class="o">(</span>ref<span class="o">)</span>
Kubernetes 1.10.* --&gt;Docker版本1.11.2 to 1.13.1 and 17.03.x <span class="o">(</span>ref<span class="o">)</span>
</code></pre></div><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> k8s1.10 -> k8s1.11 </font>
</center>
<h3 id="k8s110---k8s111">k8s1.10 -&gt; k8s1.11</h3>
<ul>
<li>注意我这里是单机,所以没有禁止调度,集群在升级前需要禁止调度:</li>
</ul>
<blockquote>
<p>kubectl taint node master-01 node-role.kubernetes.io/master=&quot;&quot;:NoExecute
kubectl taint node &ndash;all node-role.kubernetes.io/master-</p>
</blockquote>
<ul>
<li>注意备份etcd</li>
</ul>
<pre><code>export ETCDCTL_API=3
# 备份
etcdctl snapshot save backup-$(date +%Y%m%d_%H).db
# 恢复
etcdctl snapshot restore backup-xxxx.db --data-dir=/data/etcd/data

</code></pre><ul>
<li>更稳妥的方法应该是先 k8s1.10 -&gt; k8s1.10.13(小版本最后一个版本) -&gt; k8s1.11.0</li>
</ul>
<h4 id="kubeadm升级准备">kubeadm升级准备</h4>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 保存配置</span>
<span class="nb">export</span> <span class="nv">k8s_old_version</span><span class="o">=</span>1.10.0
<span class="nb">export</span> <span class="nv">k8s_version</span><span class="o">=</span>1.11.0
<span class="nb">export</span> <span class="nv">kubeadm_config</span><span class="o">=</span>kubeadmin-<span class="si">${</span><span class="nv">k8s_old_version</span><span class="si">}</span>-view.conf

kubeadm config view &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>

<span class="c1"># k8s1.10版本要求cni必须是低于kubernetes-cni-0.6.0-0版本</span>
yum makecache all
<span class="nv">version</span><span class="o">=</span><span class="k">$(</span>yum list kubeadm --showduplicates <span class="p">|</span> sort -r<span class="p">|</span>grep <span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span><span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
<span class="nb">echo</span> <span class="nv">$version</span>

<span class="c1"># 这里执行不会升级kubelet</span>
yum install  kubeadm-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> --disableexcludes<span class="o">=</span>kubernetes -y


<span class="c1"># 查看是否可以更新</span>
kubeadm upgrade plan
<span class="o">[</span>preflight<span class="o">]</span> Running pre-flight checks.
<span class="o">[</span>upgrade<span class="o">]</span> Making sure the cluster is healthy:
<span class="o">[</span>upgrade/config<span class="o">]</span> Making sure the configuration is correct:
<span class="o">[</span>upgrade/config<span class="o">]</span> Reading configuration from the cluster...
<span class="o">[</span>upgrade/config<span class="o">]</span> FYI: You can look at this config file with <span class="s1">&#39;kubectl -n kube-system get cm kubeadm-config -oyaml&#39;</span>
I0520 09:32:03.264259   <span class="m">30047</span> feature_gate.go:230<span class="o">]</span> feature gates: <span class="p">&amp;</span><span class="o">{</span>map<span class="o">[]}</span>
<span class="o">[</span>upgrade<span class="o">]</span> Fetching available versions to upgrade to
<span class="o">[</span>upgrade/versions<span class="o">]</span> Cluster version: v1.10.0
<span class="o">[</span>upgrade/versions<span class="o">]</span> kubeadm version: v1.11.0
<span class="o">[</span>upgrade/versions<span class="o">]</span> WARNING: Couldn<span class="s1">&#39;t fetch latest stable version from the internet: unable to get URL &#34;https://dl.k8s.io/release/stable.txt&#34;: Get https://storage.googleapis.com/kubernetes-release/release/stable.txt: dial tcp 34.64.4.80:443: i/o timeout
</span><span class="s1">[upgrade/versions] WARNING: Falling back to current kubeadm version as latest stable version
</span><span class="s1">[upgrade/versions] Latest version in the v1.10 series: v1.10.13
</span><span class="s1">
</span><span class="s1">External components that should be upgraded manually before you upgrade the control plane with &#39;</span>kubeadm upgrade apply<span class="s1">&#39;:
</span><span class="s1">COMPONENT   CURRENT   AVAILABLE
</span><span class="s1">Etcd        3.3.11    3.1.12
</span><span class="s1">
</span><span class="s1">Components that must be upgraded manually after you have upgraded the control plane with &#39;</span>kubeadm upgrade apply<span class="s1">&#39;:
</span><span class="s1">COMPONENT   CURRENT       AVAILABLE
</span><span class="s1">Kubelet     1 x v1.10.1   v1.10.13
</span><span class="s1">
</span><span class="s1">Upgrade to the latest version in the v1.10 series:
</span><span class="s1">
</span><span class="s1">COMPONENT            CURRENT   AVAILABLE
</span><span class="s1">API Server           v1.10.0   v1.10.13
</span><span class="s1">Controller Manager   v1.10.0   v1.10.13
</span><span class="s1">Scheduler            v1.10.0   v1.10.13
</span><span class="s1">Kube Proxy           v1.10.0   v1.10.13
</span><span class="s1">CoreDNS              1.0.6     1.1.3
</span><span class="s1">
</span><span class="s1">You can now apply the upgrade by executing the following command:
</span><span class="s1">
</span><span class="s1"> kubeadm upgrade apply v1.10.13
</span><span class="s1">
</span><span class="s1">_____________________________________________________________________
</span><span class="s1">
</span><span class="s1">External components that should be upgraded manually before you upgrade the control plane with &#39;</span>kubeadm upgrade apply<span class="s1">&#39;:
</span><span class="s1">COMPONENT   CURRENT   AVAILABLE
</span><span class="s1">Etcd        3.3.11    3.2.18
</span><span class="s1">
</span><span class="s1">Components that must be upgraded manually after you have upgraded the control plane with &#39;</span>kubeadm upgrade apply<span class="err">&#39;</span>:
COMPONENT   CURRENT       AVAILABLE
Kubelet     <span class="m">1</span> x v1.10.1   v1.11.0

Upgrade to the latest stable version:

COMPONENT            CURRENT   AVAILABLE
API Server           v1.10.0   v1.11.0
Controller Manager   v1.10.0   v1.11.0
Scheduler            v1.10.0   v1.11.0
Kube Proxy           v1.10.0   v1.11.0
CoreDNS              1.0.6     1.1.3

You can now apply the upgrade by executing the following command:

 kubeadm upgrade apply v1.11.0

_____________________________________________________________________


</code></pre></div><h4 id="执行升级操作">执行升级操作</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>  --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span> --dry-run


<span class="c1"># 修改下kubeadmin-10-view.conf配置 imageRepository: registry.cn-hangzhou.aliyuncs.com/k8sth</span>
vim <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>
imageRepository: registry.cn-hangzhou.aliyuncs.com/k8sth


docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-proxy-amd64:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-controller-manager-amd64:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-scheduler-amd64:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-apiserver-amd64:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/coredns:1.1.3


kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span> --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>

</code></pre></div><h4 id="升级kubelet-kubectl">升级kubelet kubectl</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">yum install -y kubectl-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubelet-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> --disableexcludes<span class="o">=</span>kubernetes

<span class="c1"># 修改下kubelet配置(否则集群会报错)</span>
vim /var/lib/kubelet/kubeadm-flags.env
增加--pod-infra-container-image<span class="o">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1

systemctl daemon-reload
systemctl stop kubelet
systemctl start kubelet
kubectl version
kubelet --version
kubectl get nodes
</code></pre></div><blockquote>
<p>这里执行完, 我的pod mysql和redis等服务器并没有被重启</p>
</blockquote>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> k8s1.11 -> k8s1.12 </font>
</center>
<h3 id="k8s111---k8s112">k8s1.11 -&gt; k8s1.12</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 在这之前先停一下指标 metrics-server 和 prometheus-adapter (我这里会导致api-server无法启动成功,找不到metrics.k8s.io/v1beta1 等)</span>
kubectl delete -f /data/k8s-config/prometheus/prometheus-adapter 
kubectl delete -f /data/k8s-config/metrics-server/metrics-server-0.3.2/deploy/1.8+/


<span class="c1"># 保存配置</span>
<span class="nb">export</span> <span class="nv">k8s_old_version</span><span class="o">=</span>1.11.0
<span class="nb">export</span> <span class="nv">k8s_version</span><span class="o">=</span>1.12.0
<span class="nb">export</span> <span class="nv">kubeadm_config</span><span class="o">=</span>kubeadmin-<span class="si">${</span><span class="nv">k8s_old_version</span><span class="si">}</span>-view.conf

kubeadm config view &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>
<span class="c1"># 或者通过configmap (注意是 ClusterConfiguration)</span>
kubectl get configmap -n kube-system kubeadm-config -o <span class="nv">jsonpath</span><span class="o">={</span>.data.MasterConfiguration<span class="o">}</span> &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>


yum makecache all
<span class="nv">version</span><span class="o">=</span><span class="k">$(</span>yum list kubeadm --showduplicates <span class="p">|</span> sort -r<span class="p">|</span>grep <span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span><span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
<span class="nb">echo</span> <span class="nv">$version</span>

yum install -y kubeadm-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> --disableexcludes<span class="o">=</span>kubernetes


kubeadm upgrade plan
COMPONENT   CURRENT   AVAILABLE
Etcd        3.3.11    3.2.24

Upgrade to the latest version in the v1.11 series:

COMPONENT            CURRENT   AVAILABLE
API Server           v1.11.0   v1.12.0
Controller Manager   v1.11.0   v1.12.0
Scheduler            v1.11.0   v1.12.0
Kube Proxy           v1.11.0   v1.12.0
CoreDNS              1.1.3     1.2.2






<span class="c1">#修改image地址(之前是registry.cn-hangzhou.aliyuncs.com/k8sth)</span>
vim <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>
imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers


kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>  --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span> --dry-run

docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.2
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.2.24

kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span> --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>


yum install -y kubelet-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubectl-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> --disableexcludes<span class="o">=</span>kubernetes

systemctl daemon-reload
systemctl restart kubelet
kubectl version
kubelet --version
kubectl get nodes

</code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> k8s1.12 -> k8s1.13 </font>
</center>
<h3 id="k8s112---k8s113">k8s1.12 -&gt; k8s1.13</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">

<span class="c1"># 保存配置</span>
<span class="nb">export</span> <span class="nv">k8s_old_version</span><span class="o">=</span>1.12.0
<span class="nb">export</span> <span class="nv">k8s_version</span><span class="o">=</span>1.13.0
<span class="nb">export</span> <span class="nv">kubeadm_config</span><span class="o">=</span>kubeadmin-<span class="si">${</span><span class="nv">k8s_old_version</span><span class="si">}</span>-view.conf

<span class="c1"># 通过configmap</span>
kubectl get configmap -n kube-system kubeadm-config -o <span class="nv">jsonpath</span><span class="o">={</span>.data.ClusterConfiguration<span class="o">}</span> &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>

yum makecache all
<span class="nv">version</span><span class="o">=</span><span class="k">$(</span>yum list kubeadm --showduplicates <span class="p">|</span> sort -r<span class="p">|</span>grep <span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span><span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
<span class="nb">echo</span> <span class="nv">$version</span>

yum install -y kubeadm-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> --disableexcludes<span class="o">=</span>kubernetes

kubeadm upgrade plan
External components that should be upgraded manually before you upgrade the control plane with <span class="s1">&#39;kubeadm upgrade apply&#39;</span>:
COMPONENT   CURRENT   AVAILABLE
Etcd        3.3.11    3.2.24

Upgrade to the latest stable version:

COMPONENT            CURRENT   AVAILABLE
API Server           v1.12.0   v1.13.0
Controller Manager   v1.12.0   v1.13.0
Scheduler            v1.12.0   v1.13.0
Kube Proxy           v1.12.0   v1.13.0
CoreDNS              1.2.2     1.2.6





kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>  --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span> --dry-run

docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.6

kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span> --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>

yum install -y kubelet-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubectl-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> --disableexcludes<span class="o">=</span>kubernetes


systemctl daemon-reload
systemctl restart kubelet
kubectl version
kubelet --version
kubectl get nodes
</code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> k8s1.13 -> k8s1.14 </font>
</center>
<h3 id="k8s113---k8s114">k8s1.13 -&gt; k8s1.14</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 保存配置</span>
<span class="nb">export</span> <span class="nv">k8s_old_version</span><span class="o">=</span>1.13.0
<span class="nb">export</span> <span class="nv">k8s_version</span><span class="o">=</span>1.14.0
<span class="nb">export</span> <span class="nv">kubeadm_config</span><span class="o">=</span>kubeadmin-<span class="si">${</span><span class="nv">k8s_old_version</span><span class="si">}</span>-view.conf

<span class="c1"># config view或者通过configmap(2选1)</span>
kubeadm config view &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>
kubectl get configmap -n kube-system kubeadm-config -o <span class="nv">jsonpath</span><span class="o">={</span>.data.ClusterConfiguration<span class="o">}</span> &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>


yum makecache all
<span class="nv">version</span><span class="o">=</span><span class="k">$(</span>yum list kubeadm --showduplicates <span class="p">|</span> sort -r<span class="p">|</span>grep <span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span><span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
<span class="nb">echo</span> <span class="nv">$version</span>


<span class="c1"># 一起安装是因为kubeadm安装时会依赖kubelet, kubelet会安装最新版本(1.18.2) </span>
<span class="c1"># (这里1.14会依赖kubernetes-cni:0.7.5-0)</span>
yum install -y kubeadm-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubelet-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubectl-<span class="si">${</span><span class="nv">version</span><span class="si">}</span>  --disableexcludes<span class="o">=</span>kubernetes


kubeadm upgrade plan


kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>  --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span> --dry-run

docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1


kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span> --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>


systemctl daemon-reload
systemctl restart kubelet
kubectl version
kubelet --version
kubectl get nodes
</code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> k8s1.14 -> k8s1.15 </font>
</center>
<h3 id="k8s114---k8s115">k8s1.14 -&gt; k8s1.15</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 保存配置</span>
<span class="nb">export</span> <span class="nv">k8s_old_version</span><span class="o">=</span>1.14.0
<span class="nb">export</span> <span class="nv">k8s_version</span><span class="o">=</span>1.15.0
<span class="nb">export</span> <span class="nv">kubeadm_config</span><span class="o">=</span>kubeadmin-<span class="si">${</span><span class="nv">k8s_old_version</span><span class="si">}</span>-view.conf

<span class="c1"># config view或者通过configmap(2选1)</span>
kubeadm config view &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>
kubectl get configmap -n kube-system kubeadm-config -o <span class="nv">jsonpath</span><span class="o">={</span>.data.ClusterConfiguration<span class="o">}</span> &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>


yum makecache all
<span class="nv">version</span><span class="o">=</span><span class="k">$(</span>yum list kubeadm --showduplicates <span class="p">|</span> sort -r<span class="p">|</span>grep <span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span><span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>

<span class="c1"># 一起安装是因为kubeadm安装时会依赖kubelet, kubelet会安装最新版本(1.18.2) </span>
yum install -y kubeadm-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubelet-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubectl-<span class="si">${</span><span class="nv">version</span><span class="si">}</span>  --disableexcludes<span class="o">=</span>kubernetes

kubeadm upgrade plan

kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>  --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span> --dry-run

docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1


kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span> --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>


systemctl daemon-reload
systemctl restart kubelet
kubectl version
kubelet --version
kubectl get nodes
</code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> k8s1.15.0 -> k8s1.15.11 </font>
</center>
<h3 id="k8s1150---k8s11511-选择11是因为google_containerskube-proxyv11512-not-found">k8s1.15.0 -&gt; k8s1.15.11 (选择11是因为google_containers/kube-proxy:v1.15.12 not found)</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 保存配置</span>
<span class="nb">export</span> <span class="nv">k8s_old_version</span><span class="o">=</span>1.15.0
<span class="nb">export</span> <span class="nv">k8s_version</span><span class="o">=</span>1.15.11
<span class="nb">export</span> <span class="nv">kubeadm_config</span><span class="o">=</span>kubeadmin-<span class="si">${</span><span class="nv">k8s_old_version</span><span class="si">}</span>-view.conf

<span class="c1"># config view或者通过configmap(2选1)</span>
kubeadm config view &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>
kubectl get configmap -n kube-system kubeadm-config -o <span class="nv">jsonpath</span><span class="o">={</span>.data.ClusterConfiguration<span class="o">}</span> &gt; <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>


yum makecache all
<span class="nv">version</span><span class="o">=</span><span class="k">$(</span>yum list kubeadm --showduplicates <span class="p">|</span> sort -r<span class="p">|</span>grep <span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span><span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>

<span class="c1"># 一起安装是因为kubeadm安装时会依赖kubelet, kubelet会安装最新版本(1.18.2) </span>
yum install -y kubeadm-<span class="si">${</span><span class="nv">version</span><span class="si">}</span>  --disableexcludes<span class="o">=</span>kubernetes

kubeadm upgrade plan
COMPONENT   CURRENT   AVAILABLE
Etcd        3.3.11    3.3.10

COMPONENT            CURRENT   AVAILABLE
API Server           v1.15.0   v1.15.11
Controller Manager   v1.15.0   v1.15.11
Scheduler            v1.15.0   v1.15.11
Kube Proxy           v1.15.0   v1.15.11
CoreDNS              1.3.1     1.3.1

kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>  --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span> --dry-run

docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span>
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1


kubeadm upgrade apply v<span class="si">${</span><span class="nv">k8s_version</span><span class="si">}</span> --config <span class="si">${</span><span class="nv">kubeadm_config</span><span class="si">}</span>

yum install -y kubelet-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubectl-<span class="si">${</span><span class="nv">version</span><span class="si">}</span>  --disableexcludes<span class="o">=</span>kubernetes

systemctl daemon-reload
systemctl restart kubelet
kubectl version
kubelet --version
kubectl get nodes
</code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 升级docker </font>
</center>
<h3 id="升级docker-慎用">升级docker (慎用)</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">yum install docker-ce-18.09.9 docker-ce-cli-18.09.9

<span class="c1"># 重启docker, k8s集群会间断(如果是多台, 将重启的节点taint剔除集群重启即可)</span>
service docker restart

</code></pre></div><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 升级单机版rancher </font>
</center>
<h3 id="升级单机版rancher">升级单机版rancher</h3>
<blockquote>
<p>这里之前是2.1.9版本, 更新为stable(2.4.3) ,我这里rancher只是用导入方式,rancher宕机不影响k8s集群</p>
</blockquote>
<ol>
<li>首先将swarm启动的rancher停用:
<code>docker service rm rancher_rancher</code></li>
<li>其次将data目录备份
<code>cp -ra /data/rancher /data/rancher_2.1.9_2020-05-20_bak</code></li>
<li>修改docker-compose.yml重新启动
<code>docker stack deploy -c docker-compose.yml rancher</code></li>
<li>查看日志
<code>docker logs -f $(docker ps|grep rancher_rancher|awk '{print $1}')</code></li>
<li>恢复(停止服务,将备份的目录还原重新启动即可)</li>
</ol>
<ul>
<li>docker-compose.yml</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">rancher</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">rancher</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">rancher/rancher:stable</span><span class="w">
</span><span class="w">    </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">      </span><span class="nt">restart_policy</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="kc">on</span>-<span class="l">failure</span><span class="w">
</span><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">/data/rancher/data/:/var/lib/rancher/</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="m">10080</span><span class="p">:</span><span class="m">80</span><span class="w">
</span><span class="w">      </span>- <span class="m">10443</span><span class="p">:</span><span class="m">443</span><span class="w">
</span><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">rancher_net</span><span class="w">
</span><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">rancher_net</span><span class="p">:</span><span class="w">
</span></code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 问题 </font>
</center>
<hr>
<h3 id="问题">问题</h3>
<h4 id="1-版本选择的image配置问题">1. 版本选择的image配置问题</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">开始选择升级到k8s1.11.10版本, 但是镜像版本只有registry.cn-hangzhou.aliyuncs.com/k8sth/kube-proxy-amd64:v1.11.0 , 没有找到v1.11.10
</code></pre></div><h4 id="2-112版本开始阿里云镜像地址变化">2. 1.12版本开始阿里云镜像地址变化</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.12.0
registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1

</code></pre></div><h4 id="3-如果执行升级中断或停止-可以">3. 如果执行升级中断或停止, 可以</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">kubeadm upgrade --force。
</code></pre></div><h4 id="4-如果跨版本升级">4. 如果跨版本升级</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"> - Specified version to upgrade to <span class="s2">&#34;v1.16.2&#34;</span> is too high<span class="p">;</span> kubeadm can upgrade only <span class="m">1</span> minor version at a <span class="nb">time</span>
 - Specified version to upgrade to <span class="s2">&#34;v1.16.2&#34;</span> is at least one minor release higher than the kubeadm minor release <span class="o">(</span><span class="m">16</span> &gt; 11<span class="o">)</span>. Such an upgrade is not supported
</code></pre></div><h4 id="5-k8s111-开启使用了pause31">5. k8s1.11 开启使用了pause:3.1</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">k8s1.11开始kubelet的配置文件修改为:
vim /var/lib/kubelet/kubeadm-flags.env
增加--pod-infra-container-image<span class="o">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1

</code></pre></div><h4 id="6-在112-113升级完成后报错-openapi-spec-for-v1beta1metricsk8sio-failed-with-openapi-spec-does-not-exists">6. 在1.12-&gt;1.13升级完成后报错: OpenAPI spec for &ldquo;v1beta1.metrics.k8s.io&rdquo; failed with: OpenAPI spec does not exists</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 1.11 -&gt; 1.12 k8s_kube-apiserver日志</span>
E0520 06:21:09.369346       <span class="m">1</span> memcache.go:134<span class="o">]</span> couldn<span class="s1">&#39;t get resource list for crd.projectcalico.org/v1: the server could not find the requested resource
</span><span class="s1">E0520 06:21:09.369725       1 memcache.go:134] couldn&#39;</span>t get resource list <span class="k">for</span> authentication.istio.io/v1alpha1: the server could not find the requested resource
E0520 06:21:09.370842       <span class="m">1</span> memcache.go:134<span class="o">]</span> couldn<span class="s1">&#39;t get resource list for certmanager.k8s.io/v1alpha1: the server could not find the requested resource
</span><span class="s1">E0520 06:21:09.371925       1 memcache.go:134] couldn&#39;</span>t get resource list <span class="k">for</span> rbac.istio.io/v1alpha1: the server could not find the requested resource
E0520 06:21:09.373016       <span class="m">1</span> memcache.go:134<span class="o">]</span> couldn<span class="s1">&#39;t get resource list for config.istio.io/v1alpha2: the server could not find the requested resource
</span><span class="s1">E0520 06:21:09.374083       1 memcache.go:134] couldn&#39;</span>t get resource list <span class="k">for</span> networking.istio.io/v1alpha3: the server could not find the requested resource
E0520 06:21:09.375179       <span class="m">1</span> memcache.go:134<span class="o">]</span> couldn<span class="err">&#39;</span>t get resource list <span class="k">for</span> metrics.k8s.io/v1beta1: the server could not find the requested resource

<span class="c1"># 1.12-&gt;1.13 k8s_kube-apiserver日志</span>
OpenAPI spec <span class="k">for</span> <span class="s2">&#34;v1beta1.metrics.k8s.io&#34;</span> failed with: OpenAPI spec does not exists

原因是我这边metrics-server 和prometheus-adapter 部署的时候用到了metrics.k8s.io/v1beta1
但是升级之后这个api-version丢失了, 所以导致apiserver一直报错, 无法启动成功


</code></pre></div><h4 id="7-单机k8s升级会造成服务中断">7. 单机k8s升级会造成服务中断</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 1.10 ~ 1.13</span>
升级会导致核心组件apiserver,scheduler,controller,coredns,网络calico等由于版本升级都需要重新启动了一次, 部分其他业务pod也会重启
其中nodejs服务会pm2重启,mysql等也会重启 ,会导致服务器压力上升
这里检测到有状态statefulset的服务并没有重启, 而无状态的deployment会重启, 由于单机1个pod的服务重启会导致中断
所以避免业务中断必须是多主机集群, 在升级之前先taint机器升级

<span class="c1"># 1.13 -&gt; 1.14</span>
这期间有状态statefulset的服务也重启了

<span class="c1"># 1.14 ~ 1.15.11</span>
这期间有状态statefulset的服务没有重启

</code></pre></div><h4 id="8-注意113-114的时候安装kubeadm可能会依赖kubelet自动安装了最新版本">8. 注意1.13-&gt;1.14的时候安装kubeadm可能会依赖kubelet自动安装了最新版本</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 一起安装是因为kubeadm安装时会依赖kubelet, kubelet会安装最新版本(1.18.2) </span>
<span class="c1"># (这里1.14会依赖kubernetes-cni:0.7.5-0)</span>
yum install -y kubeadm-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubelet-<span class="si">${</span><span class="nv">version</span><span class="si">}</span> kubectl-<span class="si">${</span><span class="nv">version</span><span class="si">}</span>  --disableexcludes<span class="o">=</span>kubernetes

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>k8s安装promethues&#43;alertmanager&#43;grafana</title>
			<link>https://www.ngirl.xyz/posts/47-k8s%E5%AE%89%E8%A3%85promethues-alertmanager-grafana/</link>
			<pubDate>Thu, 14 May 2020 18:34:47 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/47-k8s%E5%AE%89%E8%A3%85promethues-alertmanager-grafana/</guid>
			<description>本文主要是针对prometheus 简单部署 , 考虑到测试资源有限,为更精简自定义按照监控,减少多余资源占用, 也同时更了解prometheus的更多细节, 这里没有使用prometheus-operator
 1 K8s上部署原生的prometheus 2 prometheus-operator 方式部署 3 docker-compose快速搭建 Prometheus+Grafana监控系统 4 一套prometheus监控多个k8s集群,详细讲解配置 5 使用prometheus监控traefik、redis、k8s集群各节点、各节点kubelet 6 grafana 监控模板下载     搭建prometheus 创建ns tee ns.yml &amp;lt;&amp;lt;- EOF apiVersion: v1 kind: Namespace metadata: name: monitoring EOF kubectl apply -f ns.yml prometheus-clusterRole.yml tee prometheus-clusterRole.yml &amp;lt;&amp;lt;- EOF apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: prometheus-k8s rules: - apiGroups: - &amp;quot;&amp;quot; resources: - nodes/metrics verbs: - get - nonResourceURLs: - /metrics verbs: - get EOF prometheus-clusterRoleBinding.</description>
			<content type="html"><![CDATA[<p>本文主要是针对prometheus 简单部署 , 考虑到测试资源有限,为更精简自定义按照监控,减少多余资源占用, 也同时更了解prometheus的更多细节, 这里没有使用prometheus-operator</p>
<!-- more -->
<ul>
<li>1 <a href="https://juejin.im/post/5d4ac8e9f265da03e921b463">K8s上部署原生的prometheus</a></li>
<li>2 <a href="https://www.qikqiak.com/post/first-use-prometheus-operator/">prometheus-operator 方式部署</a></li>
<li>3 <a href="https://blog.51cto.com/msiyuetian/2369130">docker-compose快速搭建 Prometheus+Grafana监控系统</a></li>
<li>4 <a href="https://jeremy-xu.oschina.io/2018/11/%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7%E5%A4%9Ak8s%E9%9B%86%E7%BE%A4/">一套prometheus监控多个k8s集群,详细讲解配置</a></li>
<li>5 <a href="https://blog.csdn.net/ywq935/article/details/80847161">使用prometheus监控traefik、redis、k8s集群各节点、各节点kubelet</a></li>
<li>6 <a href="https://grafana.com/grafana/dashboards?dataSource=prometheus&amp;search=docker&amp;orderBy=name&amp;direction=asc">grafana 监控模板下载</a></li>
</ul>
<hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="搭建prometheus">搭建prometheus</h3>
<h4 id="创建ns">创建ns</h4>
<pre><code>tee ns.yml &lt;&lt;- EOF
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
EOF


kubectl apply -f ns.yml

</code></pre><h4 id="prometheus-clusterroleyml">prometheus-clusterRole.yml</h4>
<pre><code>tee prometheus-clusterRole.yml &lt;&lt;- EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-k8s
rules:
  - apiGroups:
      - &quot;&quot;
    resources:
      - nodes/metrics
    verbs:
      - get
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
EOF
</code></pre><h4 id="prometheus-clusterrolebindingyml">prometheus-clusterRoleBinding.yml</h4>
<pre><code>tee prometheus-clusterRoleBinding.yml &lt;&lt;- EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-k8s
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-k8s
subjects:
  - kind: ServiceAccount
    name: prometheus-k8s
    namespace: monitoring
EOF
</code></pre><h4 id="prometheus-serviceaccountyml">prometheus-serviceAccount.yml</h4>
<pre><code>tee prometheus-serviceAccount.yml &lt;&lt;- EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-k8s
  namespace: monitoring
EOF
</code></pre><h4 id="创建角色">创建角色</h4>
<pre><code>kubectl apply -f prometheus-clusterRole.yml
kubectl apply -f prometheus-clusterRoleBinding.yml
kubectl apply -f prometheus-serviceAccount.yml

</code></pre><blockquote>
<p>这样我们就创建了一个 ServiceAccount，名为 prometheus-k8s，这个 ServiceAccount 不仅现在可以用来获取 kubelet 的监控指标，后续 Prometheus 也会使用这个 serviceAccount 启动。</p>
</blockquote>
<h4 id="创建完成后会自动在生成一个-secret里面包含了-token">创建完成后，会自动在生成一个 secret，里面包含了 token：</h4>
<pre><code>kubectl get secret -n monitoring
NAME                         TYPE                                  DATA      AGE
prometheus-k8s-token-6v9m9   kubernetes.io/service-account-token   3         13s
</code></pre><h4 id="获取token">获取token</h4>
<pre><code>token=$(kubectl get secret prometheus-k8s-token-6v9m9 -n monitoring -o json|jq -r '.data.token'|base64 -d)
token=$(kubectl get secret prometheus-k8s-token-pl2wx -n monitoring -o json|jq -r '.data.token'|base64 -d)
</code></pre><h4 id="通过token查看metrics">通过token查看metrics</h4>
<pre><code>curl https://127.0.0.1:10250/metrics/cadvisor -k -H &quot;Authorization: Bearer $token&quot;
</code></pre><blockquote>
<p>kubelet 除了 /metrics/cadvisor 这个 url 之外，还有一个 /metrics，这是它本身的监控指标而非 pod 的</p>
</blockquote>
<h3 id="查看etc指标页面">查看etc指标页面</h3>
<p>etcd 的指标页面的 url 也是 /metrics，但是你想要访问它需要提供证书，因为它会验证客户端证书。当然你可以在它的启动参数中通过 &ndash;listen-metrics-urls http://ip:port 让监控指标页使用 http 而非 https，这样就不用提供证书了。
etcd 虽然部署在容器中，但是由于使用了 hostNetwork，所以我们可以通过直接访问 master 的 2379 端口访问它。默认它会采用了 https，因此我们需要提供它的 peer 证书。如果 k8s 是使用 kubeadm 安装的，etcd 的证书在 /etc/kubernetes/pki/etcd/ 目录下。
因此访问 etcd 的命令为：
curl https://127.0.0.1:2379/metrics &ndash;cacert /etc/kubernetes/pki/etcd/ca.crt &ndash;cert /etc/kubernetes/pki/etcd/healthcheck-client.crt &ndash;key /etc/kubernetes/pki/etcd/healthcheck-client.key
复制代码后面我们需要将这三个文件挂载到 Prometheus 容器中，以便它能收集 etcd 监控数据。</p>
<p>如果你并非容器部署的etcd,请使用你的etcd端口访问</p>
<hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="安装-prometheus">安装 Prometheus</h3>
<h4 id="我们先创建两个-configmap一个是-prometheus-的配置文件另一个是告警的规则文件">我们先创建两个 configmap，一个是 Prometheus 的配置文件，另一个是告警的规则文件</h4>
<pre><code>tee prometheus-configmap.yml &lt;&lt;- EOF
apiVersion: v1
data:
  prometheus.yml: |
    global:
      evaluation_interval: 30s
      scrape_interval: 30s
      external_labels:
        prometheus: monitoring/k8s
    rule_files:
    - /etc/prometheus/rules/*.yml
    scrape_configs:
    - job_name: prometheus
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - monitoring
      scrape_interval: 30s
      relabel_configs:
      - action: keep
        source_labels:
        - __meta_kubernetes_service_label_prometheus
        regex: k8s
      - source_labels:
        - __meta_kubernetes_endpoint_address_target_kind
        - __meta_kubernetes_endpoint_address_target_name
        separator: ;
        regex: Pod;(.*)
        replacement: ${1}
        target_label: pod
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: service
      - source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: job
        replacement: ${1}
      - target_label: endpoint
        replacement: web
kind: ConfigMap
metadata:
  name: prometheus
  namespace: monitoring
EOF
</code></pre><blockquote>
<p>首先看这段配置</p>
</blockquote>
<pre><code>kubernetes_sd_configs:
- role: endpoints
  namespaces:
    names:
    - monitoring
scrape_interval: 30s
</code></pre><p>这段配置使用的是 endpoint 的方式对 Prometheus 本身进行自动发现，你可以有疑问了，为什么不直接对自身的 127.0.0.1:9090 进行采集呢？因为考虑到 Prometheus 可能会有多台，这样即使有多台，它们也都在一个 job 下面。</p>
<p>kubernetes_sd_configs 配置可以自动发现 k8s 中 node、service、pod、endpoint、ingress，并为其添加监控, 详见:  <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config">kubernetes_sd_configs官方文档</a></p>
<blockquote>
<p>再看下面这段配置</p>
</blockquote>
<pre><code>- action: keep
  source_labels:
    - __meta_kubernetes_service_label_prometheus
  regex: k8s
</code></pre><p>表示并非所有的endpoint 都会被抓取,  这里只抓取label 是 prometheus=k8s的标签, 所以只会监控prometheus的endpoint</p>
<p>默认不指定url 就是/metrics</p>
<blockquote>
<p>接着看这段配置</p>
</blockquote>
<pre><code>- source_labels:
    - __meta_kubernetes_endpoint_address_target_kind
    - __meta_kubernetes_endpoint_address_target_name
  separator: ;
  regex: Pod;(.*)
  replacement: ${1}
  target_label: pod

</code></pre><p>如果 __meta_kubernetes_endpoint_address_target_kind 的值为 Pod，__meta_kubernetes_endpoint_address_target_name 的值为 prometheus-0，在它们之间加上一个 ; 之后，它们合起来就是 Pod;prometheus-0。使用正则表达式 Pod;(.*) 对其进行匹配，那么 ${1} 就是取第一个分组，它值就是 prometheus-0，最后将这个值交给 pod 这个标签。
因此这一段配置就是为所有采集到的监控指标增加一个 pod=prometheus-0 的标签。</p>
<blockquote>
<p>以上配置其实可以去掉, 这里prometheus=k8s的匹配条件以及唯一,这段kind和name配置去掉影响不大</p>
</blockquote>
<h4 id="创建configmap">创建configmap</h4>
<pre><code>kubectl apply -f prometheus-configmap.yml
</code></pre><h4 id="prometheus-规则文件-后面会更新">Prometheus 规则文件 (后面会更新)</h4>
<pre><code>tee prometheus-config-rulefiles.yml &lt;&lt;- EOF
apiVersion: v1
data:
  k8s.yml: &quot;&quot;
kind: ConfigMap
metadata:
  name: prometheus-rulefiles
  namespace: monitoring
EOF


kubectl apply -f prometheus-config-rulefiles.yml

</code></pre><h3 id="role-和-rolebinding">role 和 roleBinding</h3>
<p>因为 Prometheus 会使用之前创建的 sa（serviceAccount）prometheus-k8s 运行，那么光现在 prometheus-k8s 这个 sa 的权限是没有办法查看 service 以及 endpoint 的。
我们使用 kubernetes_sd_config 主要会使用 endpoint 进行发现，因此 prometheus-k8s 必须具备更多的权限。
我们需要创建更多的 role，并通过 roleBinding 将这些权限绑定到 prometheus-k8s 这个 sa 上，之所以不使用 clusterRole 是为了权限最小化。
这里会创建 prometheus-roleConfig.yml、prometheus-roleBindingConfig.yml、prometheus-roleSpecificNamespaces.yml、prometheus-roleBindingSpecificNamespaces.yml 这四个文件，它们的内容如下。</p>
<pre><code>tee prometheus-roleConfig.yml &lt;&lt;- EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-k8s-config
  namespace: monitoring
rules:
  - apiGroups:
      - &quot;&quot;
    resources:
      - configmaps
    verbs:
      - get
EOF


tee prometheus-roleBindingConfig.yml &lt;&lt;- EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-k8s-config
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-k8s-config
subjects:
  - kind: ServiceAccount
    name: prometheus-k8s
    namespace: monitoring
EOF

tee prometheus-roleSpecificNamespaces.yml &lt;&lt;- EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleList
items:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: prometheus-k8s
      namespace: default
    rules:
      - apiGroups:
          - &quot;&quot;
        resources:
          - services
          - endpoints
          - pods
        verbs:
          - get
          - list
          - watch
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: prometheus-k8s
      namespace: kube-system
    rules:
      - apiGroups:
          - &quot;&quot;
        resources:
          - services
          - endpoints
          - pods
        verbs:
          - get
          - list
          - watch
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: prometheus-k8s
      namespace: monitoring
    rules:
      - apiGroups:
          - &quot;&quot;
        resources:
          - services
          - endpoints
          - pods
        verbs:
          - get
          - list
          - watch
EOF

tee prometheus-roleBindingSpecificNamespaces.yml &lt;&lt;- EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBindingList
items:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: prometheus-k8s
      namespace: default
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: prometheus-k8s
    subjects:
      - kind: ServiceAccount
        name: prometheus-k8s
        namespace: monitoring
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: prometheus-k8s
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: prometheus-k8s
    subjects:
      - kind: ServiceAccount
        name: prometheus-k8s
        namespace: monitoring
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: prometheus-k8s
      namespace: monitoring
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: prometheus-k8s
    subjects:
      - kind: ServiceAccount
        name: prometheus-k8s
        namespace: monitoring
EOF

</code></pre><p>上面的权限中，config 是用来读 configmap 的，后面的就是 Prometheus 用来进行 k8s 发现时必须要的权限了，最后使用 rulebinding 将这些所有的权限都绑定到 prometheus-k8s 这个 sa 上。</p>
<pre><code>kubectl delete -f prometheus-roleBindingConfig.yml
kubectl delete -f prometheus-roleBindingSpecificNamespaces.yml
kubectl delete -f prometheus-roleConfig.yml
kubectl delete -f prometheus-roleSpecificNamespaces.yml


kubectl apply -f prometheus-roleBindingConfig.yml
kubectl apply -f prometheus-roleBindingSpecificNamespaces.yml
kubectl apply -f prometheus-roleConfig.yml
kubectl apply -f prometheus-roleSpecificNamespaces.yml

</code></pre><h4 id="手动创建pv-我这里没用上-用的是storageclass">手动创建pv (我这里没用上, 用的是storageclass)</h4>
<pre><code>tee prometheus-pv.yml &lt;&lt;- EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prometheus
  labels:
    name: prometheus
spec:
  nfs:
    path: /disk/k8s-nfs-data/k8s-db-t/prometheus
    server: 172.16.xx.xx
  accessModes: [&quot;ReadWriteMany&quot;, &quot;ReadWriteOnce&quot;]
  capacity:
    storage: 50Gi
EOF

kubectl apply -f prometheus-pv.yml

</code></pre><h4 id="创建-service">创建 service</h4>
<pre><code>tee prometheus-service.yml &lt;&lt;- EOF
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    prometheus: k8s
spec:
  clusterIP: None
  ports:
    - name: web
      port: 9090
      protocol: TCP
      targetPort: web
  selector:
    app: prometheus
  type: ClusterIP

EOF

kubectl apply -f prometheus-service.yml
</code></pre><p>这里service定义了 app=prometheus 这样的标签选择器，因此 Prometheus 容器StatefulSet的时候必须存在这个标签。</p>
<h4 id="部署-prometheus">部署 Prometheus</h4>
<pre><code>tee prometheus-statefulset.yml &lt;&lt;- EOF
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: prometheus
    prometheus: k8s
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  volumeClaimTemplates:
  - metadata:
      name: prometheus-data
      annotations:
        volume.beta.kubernetes.io/storage-class: &quot;nfs-retain&quot; # 这里配置 上面创建的 storageclass 的名称
    spec:
      accessModes: [ &quot;ReadWriteOnce&quot; ]
      resources:
        requests:
          storage: 20Gi
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: prometheus
      prometheus: k8s
  serviceName: prometheus
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: prometheus
        prometheus: k8s
    spec:
      serviceAccount: prometheus-k8s
      containers:
        - args:
            - --web.console.templates=/etc/prometheus/consoles
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --config.file=/etc/prometheus/config/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.enable-admin-api
            - --storage.tsdb.retention.time=20d
            - --web.enable-lifecycle
            - --storage.tsdb.no-lockfile
            - --web.external-url=http://promethes-dev.k1s.club/
            - --web.route-prefix=/
          image: prom/prometheus:v2.11.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /-/healthy
              port: web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          name: prometheus
          ports:
            - containerPort: 9090
              name: web
              protocol: TCP
          readinessProbe:
            failureThreshold: 120
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              memory: 400Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/prometheus/config
              name: config
              readOnly: true
            - mountPath: /prometheus
              name: prometheus-data
              #subPath: prometheus-db
            - mountPath: /etc/prometheus/rules/
              name: prometheus-rulefiles
            - mountPath: /etc/prometheus/secrets/etcd-client-cert
              name: secret-etcd-client-cert
              readOnly: true
      volumes:
        - name: config
          configMap:
            defaultMode: 420
            name: prometheus
        - name: prometheus-rulefiles
          configMap:
            defaultMode: 420
            name: prometheus-rulefiles
        - name: secret-etcd-client-cert
          secret:
            defaultMode: 420
            secretName: etcd-client-cert

EOF

kubectl apply -f prometheus-statefulset.yml
</code></pre><blockquote>
<p>注意下这里如果你并非容器安装的etcd, 则mount的secret-etcd-client-cert可能不存在, 请自行挂载正确的目录, 如果etcd是http访问, 则不需要证书挂载</p>
</blockquote>
<p>基础的 statfulset 相关的知识我就不多提了，说几个重点吧：</p>
<p>1 &ndash;storage.tsdb.retention.time=20d 这个启动选项表示 Prometheus 所收集的监控数据只保留 20 天，这个值最好不要太大。如果历史数据保存很久，建议写到持久存储中，比如 VictoriaMetrics、thanos、influxdb、opentsdb 等；
2 &ndash;web.enable-admin-api 这个启动选项表示启动管理员 api，你可以通过 api 对监控数据进行删除等；
3 serviceAccount 它的值必须是 prometheus-k8s，不然前面的赋权操作都白干了；
4 pod 必须存在 app: prometheus 这个标签，不然无法被前面创建的 service 选择到；
5 挂载了两个 configmap、一个 secret 还有一个存储卷。(我这里是采用storageclass, 当然你也可以用上面的手动创建pv)</p>
<h4 id="创建一个ingress">创建一个ingress</h4>
<pre><code>tee prometheus-ingress.yml &lt;&lt;- EOF
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus
  namespace: monitoring
spec:
  rules:
    - host: prometheus-dev.k1s.club
      http:
        paths:
          - path: /
            backend:
              serviceName: prometheus
              servicePort: 9090

EOF

kubectl apply -f prometheus-ingress.yml
</code></pre><p>至此, 我们就监控了prometheus本身
<img src="assets/prometheus-01-01.png" alt=""></p>
<hr>
<h3 id="问题1-k8s110报错rbac权限错误">问题1 k8s1.10报错rbac权限错误</h3>
<blockquote>
<p>level=error ts=2020-05-11T10:00:03.091Z caller=klog.go:94 component=k8s_client_runtime func=ErrorDepth msg=&quot;/app/discovery/kubernetes/kubernetes.go:335: Failed to list *v1.Node: nodes is forbidden: User &quot;system:serviceaccount:monitoring:prometheus-k8s&quot; cannot list nodes at the cluster scope&quot;</p>
</blockquote>
<p>按照以下rbac增加了权限,则正常</p>
<pre><code>prometheus-rbac.yml
apiVersion: v1
kind: ServiceAccount
metadata:
 name: prometheus-k8s
 namespace: monitoring
 labels:
   kubernetes.io/cluster-service: &quot;true&quot;
   addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
 name: prometheus-k8s
 labels:
   kubernetes.io/cluster-service: &quot;true&quot;
   addonmanager.kubernetes.io/mode: Reconcile
rules:
 - apiGroups:
     - &quot;&quot;
   resources:
     - nodes
     - nodes/metrics
     - services
     - endpoints
     - pods
   verbs:
     - get
     - list
     - watch
 - apiGroups:
     - &quot;&quot;
   resources:
     - configmaps
   verbs:
     - get
 - nonResourceURLs:
     - &quot;/metrics&quot;
   verbs:
     - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: prometheus-k8s
 labels:
   kubernetes.io/cluster-service: &quot;true&quot;
   addonmanager.kubernetes.io/mode: Reconcile
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: prometheus-k8s
subjects:
- kind: ServiceAccount
 name: prometheus-k8s
 namespace: monitoring

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="监控etcd">监控etcd</h3>
<h4 id="如果是容器安装的etcd集群">如果是容器安装的etcd集群</h4>
<pre><code>tee kube-etcd-service.yml &lt;&lt;- EOF
apiVersion: v1
kind: Service
metadata:
  name: kube-etcd
  labels:
    k8s-app: kube-etcd
  namespace: kube-system
spec:
  clusterIP: None
  ports:
    - name: http-metrics
      port: 2379
      protocol: TCP
      targetPort: 2379
  selector:
    component: etcd
  type: ClusterIP

EOF
</code></pre><ul>
<li>由于 etcd 处于 kube-system 名称空间，所以这里的 namespace 也应该是 kube-system；</li>
<li>因为 etcd pod 本身会存在 component=etcd 这个标签，所以这里的选择器使用的就是这个。</li>
</ul>
<pre><code>kubectl apply -f kube-etcd-service.yml
kubectl -n kube-system get endpoints kube-etcd

</code></pre><p>现在通过这个 endpoint 就能够访问到后面三台 etcd，现在只需要在 Prometheus 中添加对应的配置即可，配置内容如下。</p>
<pre><code>- job_name: kube-etcd
  honor_labels: false
  kubernetes_sd_configs:
    - role: endpoints
      namespaces:
        names:
          - kube-system
  scheme: https
  tls_config:
    insecure_skip_verify: false
    ca_file: /etc/prometheus/secrets/etcd-client-cert/ca.crt
    cert_file: /etc/prometheus/secrets/etcd-client-cert/healthcheck-client.crt
    key_file: /etc/prometheus/secrets/etcd-client-cert/healthcheck-client.key
  relabel_configs:
    - action: keep
      source_labels:
        - __meta_kubernetes_service_label_k8s_app
      regex: kube-etcd
    - source_labels:
        - __meta_kubernetes_namespace
      target_label: namespace
    - source_labels:
        - __meta_kubernetes_service_name
      target_label: service
    - source_labels:
        - __meta_kubernetes_pod_name
      target_label: pod
    - target_label: endpoint
      replacement: http-metrics
  metric_relabel_configs:
    - action: drop
      regex: (etcd_debugging|etcd_disk|etcd_request|etcd_server|grpc_server).*
      source_labels:
        - __name__

</code></pre><h4 id="我这里有一个环境是http访问的-则直接通过http17216xxxx2379metrics-监控即可">我这里有一个环境是http访问的, 则直接通过http://172.16.xx.xx:2379/metrics 监控即可</h4>
<pre><code>- job_name: 'etcd'
  scrape_interval: 60s
  static_configs:
    - targets: ['172.16.xx.xx:2379']
  metric_relabel_configs:
  - action: drop
    regex: (etcd_debugging|etcd_disk|etcd_request|etcd_server|grpc_server).*
    source_labels:
      - __name__
</code></pre><blockquote>
<p>然后重新加载configmap</p>
</blockquote>
<pre><code>kubectl apply -f prometheus-configmap.yml

# 该配置不用重启prometheus即可重新加载配置
curl -XPOST prometheus-dev.k1s.club/-/reload
</code></pre><h3 id="监控-apiserver">监控 apiserver</h3>
<p>apiserver 的监控方式更简单，因为它的 service 已经自动创建了。但你需要注意的是，它的 service 创建在 default 名称空间，名为 kubernetes。</p>
<pre><code>- job_name: kube-apiserver
  honor_labels: false
  kubernetes_sd_configs:
    - role: endpoints
      namespaces:
        names:
          - default
  scrape_interval: 30s
  scheme: https
  tls_config:
    insecure_skip_verify: false
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  relabel_configs:
    - action: keep
      source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: default;kubernetes;https
  metric_relabel_configs:
    - source_labels:
        - __name__
      action: drop
      regex: (apiserver_storage_data_key_generation_latencies_microseconds_bucket|apiserver_admission_controller_admission_latencies_milliseconds_bucket|apiserver_admission_step_admission_latencies_milliseconds_bucket|apiserver_admission_step_admission_latencies_milliseconds_summary|apiserver_request_latencies_bucket|apiserver_request_latencies_summary|apiserver_storage_data_key_generation_latencies_microseconds_bucket|rest_client_request_latency_seconds_bucket)
</code></pre><h3 id="监控-pod">监控 pod</h3>
<p>pod 的监控指标是 kubelet 提供的，前面也已经使用 curl 命令看到了，因此这里也是直接干。
prometheus-operator 使用的同样是 endpoints 发现的方式，但是 kubelet 是操作系统的进程，并不是 pod，因此通过创建 service 的方式是不可能创建对应的 endpoint 的，也不知道它为啥可以做到。
为了更通用，我们这里是通过 node 发现的方式进行的。使用 node 发现，你无法指定端口，prometheus 会自动访问发现 node 的 10250 端口。</p>
<pre><code>- job_name: pods
  honor_labels: true
  kubernetes_sd_configs:
  - role: node
  scrape_interval: 30s
  metrics_path: /metrics/cadvisor
  scheme: https
  tls_config:
    insecure_skip_verify: true
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token


</code></pre><blockquote>
<p>k8s 的其他组件我就不继续监控了，包括 kubelet、controller manager、coredns 等，它们监控的手段和之前的几个组件都差不多</p>
</blockquote>
<h3 id="安装-kube-state-metrics">安装 kube-state-metrics</h3>
<blockquote>
<p>常见应用
使用kube-state-metrics后的常用场景有：</p>
</blockquote>
<p>存在执行失败的Job:</p>
<ul>
<li>kube_job_status_failed{job=&ldquo;kubernetes-service-endpoints&rdquo;,k8s_app=&ldquo;kube-state-metrics&rdquo;}==1</li>
<li>集群节点状态错误: kube_node_status_condition{condition=&ldquo;Ready&rdquo;,status!=&ldquo;true&rdquo;}==1</li>
<li>集群中存在启动失败的Pod：kube_pod_status_phase{phase=~&ldquo;Failed|Unknown&rdquo;}==1</li>
<li>最近30分钟内有Pod容器重启: changes(kube_pod_container_status_restarts[30m])&gt;0
配合报警可以更好地监控集群的运行</li>
</ul>
<h4 id="rbac-权限">RBAC 权限</h4>
<blockquote>
<p>因为它要访问集群内的所有资源，才能将它们的信息提供出去，因此部署它之前，先为它创建一些权限。这些权限都会绑定到一个 serviceAccount 上，然后我们用这个 sa 运行 kube-state-metrics 就行</p>
</blockquote>
<h4 id="kube-state-metrics-clusterroleyml">kube-state-metrics-clusterRole.yml</h4>
<pre><code>apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
rules:
  - apiGroups:
      - &quot;&quot;
    resources:
      - configmaps
      - secrets
      - nodes
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
      - persistentvolumes
      - namespaces
      - endpoints
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
      - ingresses
    verbs:
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - list
      - watch
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
  - apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
    verbs:
      - create
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - list
      - watch
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - list
      - watch

</code></pre><h4 id="kube-state-metrics-clusterrolebindingyml">kube-state-metrics-clusterRoleBinding.yml</h4>
<pre><code>
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: kube-state-metrics
    namespace: monitoring

</code></pre><h4 id="kube-state-metrics-roleyml">kube-state-metrics-role.yml</h4>
<pre><code>apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kube-state-metrics
  namespace: monitoring
rules:
  - apiGroups:
      - &quot;&quot;
    resources:
      - pods
    verbs:
      - get
  - apiGroups:
      - extensions
    resourceNames:
      - kube-state-metrics
    resources:
      - deployments
    verbs:
      - get
      - update
  - apiGroups:
      - apps
    resourceNames:
      - kube-state-metrics
    resources:
      - deployments
    verbs:
      - get
      - update

</code></pre><h4 id="kube-state-metrics-rolebindingyml">kube-state-metrics-roleBinding.yml</h4>
<pre><code>
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kube-state-metrics
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: kube-state-metrics

</code></pre><h4 id="kube-state-metrics-serviceaccountyml">kube-state-metrics-serviceAccount.yml</h4>
<pre><code>
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: monitoring

</code></pre><pre><code>kubectl apply -f kube-state-metrics-clusterRole.yml
kubectl apply -f kube-state-metrics-clusterRoleBinding.yml
kubectl apply -f kube-state-metrics-role.yml
kubectl apply -f kube-state-metrics-roleBinding.yml
kubectl apply -f kube-state-metrics-serviceAccount.yml
</code></pre><h3 id="deployment-和-service">deployment 和 service</h3>
<blockquote>
<p>kube-state-metrics 会提供两个指标页面，一个是暴露集群内资源的，另一个是它自身的，它自身的可以选择性的关注</p>
</blockquote>
<h4 id="kube-state-metrics-deploymentyml">kube-state-metrics-deployment.yml</h4>
<pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      containers:
        - args:
            - --port=10000
            - --telemetry-port=10001
          image: quay.io/coreos/kube-state-metrics:v1.6.0
          name: kube-state-metrics
          resources:
            limits:
              cpu: 100m
              memory: 150Mi
            requests:
              cpu: 100m
              memory: 150Mi
        - command:
            - /pod_nanny
            - --container=kube-state-metrics
            - --cpu=100m
            - --extra-cpu=2m
            - --memory=150Mi
            - --extra-memory=30Mi
            - --threshold=5
            - --deployment=kube-state-metrics
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          image: k8s.gcr.io/addon-resizer:1.8.4
          name: addon-resizer
          resources:
            limits:
              cpu: 50m
              memory: 30Mi
            requests:
              cpu: 10m
              memory: 30Mi
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: kube-state-metrics
</code></pre><p>指定了两个启动参数，也就是两个端口，其中 10000 是暴露集群资源指标的端口，10001 就是它自身了。除了 kube-state-metrics 之外，还启动了 addon-resizer 这个容器</p>
<h4 id="最后是-service-文件-kube-state-metrics-serviceyml">最后是 service 文件 kube-state-metrics-service.yml</h4>
<pre><code>apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: kube-state-metrics
  name: kube-state-metrics
  namespace: monitoring
spec:
  clusterIP: None
  ports:
    - name: http-main
      port: 10000
      targetPort: 10000
    - name: http-self
      port: 10001
      targetPort: 10001
  selector:
    app: kube-state-metrics

</code></pre><pre><code>docker pull registry.cn-beijing.aliyuncs.com/minminmsn/addon-resizer:1.8.4
docker tag registry.cn-beijing.aliyuncs.com/minminmsn/addon-resizer:1.8.4 k8s.gcr.io/addon-resizer:1.8.4
</code></pre><pre><code>kubectl apply -f kube-state-metrics-deployment.yml
kubectl apply -f kube-state-metrics-service.yml
</code></pre><p>两个端口都暴露出来，你可以都收集或者只收集 10000 端口。如果只收集 10000，你可以只暴露一个端口，也可以两个都暴露，然后在 Prometheus 配置中过滤掉一个端口即可。</p>
<h4 id="收集监控数据">收集监控数据</h4>
<p>将上面所有的文件都 apply 之后，就可以直接配置 Prometheus 进行收集了。在此之前，你可以使用 curl 命令访问它的指标页面，看看里面都有啥：</p>
<pre><code>kubectl run -it --rm --restart=Never --image=infoblox/dnstools:latest dnstools -n monitoring

# 首先看一下健康情况
curl kube-state-metrics:10000/healthz
# 在看看指标 (这里有非常多指标)
curl kube-state-metrics:10000/metrics
</code></pre><h4 id="修改下prometheus-configmapyml-文件">修改下prometheus-configmap.yml 文件</h4>
<pre><code>- job_name: kube-state-metrics
  honor_labels: true
  kubernetes_sd_configs:
    - role: endpoints
      namespaces:
        names:
          - monitoring
  scrape_interval: 30s
  scrape_timeout: 30s
  tls_config:
    insecure_skip_verify: true
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  relabel_configs:
    - action: keep
      source_labels:
        - __meta_kubernetes_service_label_k8s_app
      regex: kube-state-metrics
    - action: keep
      source_labels:
        - __meta_kubernetes_endpoint_port_name
      regex: http-main
  metric_relabel_configs:
    - source_labels:
        - __name__
      regex: (kube_daemonset_status_number_ready|kube_daemonset_status_number_unavailable|kube_deployment_status_replicas_unavailable|kube_deployment_spec_paused|kube_deployment_spec_strategy_rollingupdate_max_surge|kube_deployment_spec_strategy_rollingupdate_max_unavailable|kube_endpoint_address_available|kube_endpoint_address_not_ready|kube_node_info|kube_node_spec_unschedulable|kube_node_status_condition|kube_node_status_capacity|kube_node_status_capacity|kube_node_status_allocatable|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_status_phase|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolume_status_phase|kube_persistentvolume_info|kube_persistentvolume_capacity_bytes|kube_pod_info|kube_pod_status_phase|kube_pod_status_ready|kube_pod_container_info|kube_pod_container_status_waiting|kube_pod_container_status_waiting_reason|kube_pod_container_status_running|kube_pod_container_status_terminated_reason|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_resource_limits|kube_service_info|kube_statefulset_status_replicas_current|kube_statefulset_status_replicas_ready)
      action: keep

</code></pre><blockquote>
<p>这里是只关注匹配到的指标, 其他指标忽略(白名单)</p>
</blockquote>
<pre><code>kubectl apply -f prometheus-configmap.yml
# 该配置不用重启prometheus即可重新加载配置
curl -XPOST prometheus-dev.k1s.club/-/reload
</code></pre><h3 id="配置一个grafana">配置一个grafana</h3>
<h4 id="首先查看一下你是否配置了storageclass">首先查看一下你是否配置了storageclass</h4>
<pre><code>kubectl get storageclass
NAME            PROVISIONER       AGE
nfs (default)   nfs.com/nfs-ssd   248d
nfs-retain      nfs.com/nfs-ssd   248d
</code></pre><h4 id="k8s-statefulset_grafanayml">k8s-StatefulSet_grafana.yml</h4>
<pre><code>---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: grafana-dev
  namespace: monitoring
spec:
  serviceName: &quot;grafana-dev&quot;
  updateStrategy:
    type: RollingUpdate
  replicas: 1
  volumeClaimTemplates:
  - metadata:
      name: grafana-data
      annotations:
        volume.beta.kubernetes.io/storage-class: &quot;nfs-retain&quot; # 这里配置 上面创建的 storageclass 的名称
    spec:
      accessModes: [ &quot;ReadWriteOnce&quot; ]
      resources:
        requests:
          storage: 5Gi
  template:
    metadata:
      labels:
        app: grafana-dev
    spec:
      containers:
      - name: grafana-dev
        image: grafana/grafana
        ports:
        - containerPort: 3000
          name: grafana-port
        resources:
          requests:
            cpu: &quot;50m&quot;
          limits:
            cpu: &quot;512m&quot;
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-data
---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: grafana-dev
  name: grafana-dev-service
  namespace: monitoring
spec:
  clusterIP: None
  type: ClusterIP
  ports:
    - port: 3000
      name: grafana-port
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana-dev
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: grafana-dev
  namespace: monitoring
spec:
  rules:
    - host: grafana-dev.k1s.club
      http:
        paths:
          - path: /
            backend:
              serviceName: grafana-dev-service
              servicePort: 3000
</code></pre><h4 id="通过-k8s-grafana-dashboard模板httpsgrafanacomgrafanadashboards8588--监控效果如下">通过 <a href="https://grafana.com/grafana/dashboards/8588">k8s grafana dashboard模板</a>  监控效果如下</h4>
<p><img src="assets/prometheus-02-01.png" alt=""></p>
<h4 id="通过以上的经验-如果我希望通过a集群的prometheus-来监控-b集群-所以一些指标的可通过token访问b-api">通过以上的经验, 如果我希望通过A集群的Prometheus 来监控 B集群, 所以一些指标的可通过token访问B api</h4>
<pre><code># 查看B集群的api
kubectl cluster-info

kubectl create serviceaccount --namespace=monitoring prometheus-dev
kubectl create clusterrolebinding prometheus-k8s --clusterrole=cluster-admin --serviceaccount=monitoring:prometheus-dev

# 创建一个叫admin的serviceaccount
kubectl -n kube-system create serviceaccount admin
# 给这个admin的serviceaccount绑上cluser-admin的clusterrole
kubectl -n kube-system create clusterrolebinding sa-cluster-admin --serviceaccount kube-system:admin --clusterrole cluser-admin
# 查询admin的secret
kubectl -n kube-system get serviceaccounts admin -o json|jq -r '.secrets[0].name'
admin-token-h4zz4

# 查看token
kubectl get secret admin-token-h4zz4 -n kube-system -o json|jq -r &quot;.data.token&quot;|base64 -d &gt;&gt;/etc/kubernetes/pki/admin-token-9dg92
</code></pre><h4 id="然后在a集群的prometheus配置如下">然后在A集群的prometheus配置如下</h4>
<pre><code>- job_name: k8s_B-kube-state-metrics
   honor_labels: true
   kubernetes_sd_configs:
     - role: endpoints
       api_server: https://172.16.xx.xx:6443
       tls_config:
         insecure_skip_verify: true
       bearer_token: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwcm9tZXRoZXVzLWRldi10b2tlbi1zZ3pidiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJwcm9tZXRoZXVzLWRldiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjliODI5NTYwLTkzNGYtMTFlYS1hMGE3LTE4NjZkYWY0NjY3NCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTpwcm9tZXRoZXVzLWRldiJ9.xa8gDA0lwEi_NDGzCL3JSsZUsUD7gKiF0sfFofykyAlEYcjnPmPaksduHWzRKaUJhkvgAJN5Jl3pt8-wplQUJggGAaPVdqJVTYISi4QkPcLkDInoYm8p3OeRgvNpQJJ0VID8zp0-RBWoYe8bAh-7qT6JInt308AA-21vzDKDHtj3aa8Re1nuBxB7f0omNKcAhW0R04p59jshg95HRSBXbVQe7gX6NBjgaOWqj5i0MkKL6k2hdFKdQYgjhQjRAZmXL6F0Qx197y3HAw4zmrUPG-13RcXk38X5F4K8CWtHdOvrqUZxolaWBWin8n73Sr87KyFcEu8YA2oJbzvCKzy9Kg'
       namespaces:
         names:
           - monitoring
   scrape_interval: 30s
   scrape_timeout: 30s
   tls_config:
     insecure_skip_verify: true
   bearer_token: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwcm9tZXRoZXVzLWRldi10b2tlbi1zZ3pidiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJwcm9tZXRoZXVzLWRldiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjliODI5NTYwLTkzNGYtMTFlYS1hMGE3LTE4NjZkYWY0NjY3NCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTpwcm9tZXRoZXVzLWRldiJ9.xa8gDA0lwEi_NDGzCL3JSsZUsUD7gKiF0sfFofykyAlEYcjnPmPaksduHWzRKaUJhkvgAJN5Jl3pt8-wplQUJggGAaPVdqJVTYISi4QkPcLkDInoYm8p3OeRgvNpQJJ0VID8zp0-RBWoYe8bAh-7qT6JInt308AA-21vzDKDHtj3aa8Re1nuBxB7f0omNKcAhW0R04p59jshg95HRSBXbVQe7gX6NBjgaOWqj5i0MkKL6k2hdFKdQYgjhQjRAZmXL6F0Qx197y3HAw4zmrUPG-13RcXk38X5F4K8CWtHdOvrqUZxolaWBWin8n73Sr87KyFcEu8YA2oJbzvCKzy9Kg'
   relabel_configs:
     - action: keep
       source_labels:
         - __meta_kubernetes_service_label_k8s_app
       regex: kube-state-metrics
     - action: keep
       source_labels:
         - __meta_kubernetes_endpoint_port_name
       regex: http-main
   metric_relabel_configs:
     - source_labels:
         - __name__
       regex: (kube_daemonset_status_number_ready|kube_daemonset_status_number_unavailable|kube_deployment_status_replicas_unavailable|kube_deployment_spec_paused|kube_deployment_spec_strategy_rollingupdate_max_surge|kube_deployment_spec_strategy_rollingupdate_max_unavailable|kube_endpoint_address_available|kube_endpoint_address_not_ready|kube_node_info|kube_node_spec_unschedulable|kube_node_status_condition|kube_node_status_capacity|kube_node_status_capacity|kube_node_status_allocatable|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_status_phase|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolume_status_phase|kube_persistentvolume_info|kube_persistentvolume_capacity_bytes|kube_pod_info|kube_pod_status_phase|kube_pod_status_ready|kube_pod_container_info|kube_pod_container_status_waiting|kube_pod_container_status_waiting_reason|kube_pod_container_status_running|kube_pod_container_status_terminated_reason|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_resource_limits|kube_service_info|kube_statefulset_status_replicas_current|kube_statefulset_status_replicas_ready|kube_deployment_status_replicas_available|kube_deployment_status_replicas|kube_node_status_allocatable_memory_bytes|kube_deployment_status_replicas|kube_statefulset_replicas|kube_daemonset_status_desired_number_scheduled|kube_statefulset_status_replicas|changes|kube_job_status_failed)
       action: keep
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="部署alertmanager">部署alertmanager</h3>
<h4 id="alertmanager-configmapyml">alertmanager-configmap.yml</h4>
<pre><code>apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
data:
  config.yml: |-
    global:
      # 在没有报警的情况下声明为已解决的时间
      resolve_timeout: 5m
      # 配置邮件发送信息
      smtp_smarthost: 'smtp.163.com:25'
      smtp_from: 'xxx@163.com'
      smtp_auth_username: 'xxx@163.com'
      smtp_auth_password: 'xxx'
      smtp_require_tls: false
      # 所有报警信息进入后的根路由，用来设置报警的分发策略
    route:
      # 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面
      group_by: ['alertname', 'cluster']
      # 当一个新的报警分组被创建后，需要等待至少group_wait时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。
      group_wait: 30s
      # 当第一个报警发送后，等待'group_interval'时间来发送新的一组报警信息。
      group_interval: 1m
      # 如果一个报警信息已经发送成功了，等待'repeat_interval'时间来重新发送他们
      repeat_interval: 2h
      # 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器
      receiver: default
    receivers:
    - name: 'default'
      email_configs:
      - to: 'zhangzw@xxx.com'
        send_resolved: true
</code></pre><h4 id="alertmanager-deploymentyml">alertmanager-deployment.yml</h4>
<pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager
        args:
          - &quot;--config.file=/etc/alertmanager/config.yml&quot;
          - &quot;--storage.path=/alertmanager&quot;
        ports:
        - name: alertmanager
          containerPort: 9093
        volumeMounts:
        - name: alertmanager-cm
          mountPath: /etc/alertmanager
      volumes:
      - name: alertmanager-cm
        configMap:
          name: alertmanager-config
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: monitoring
spec:
  selector:
    app: alertmanager
  ports:
    - port: 80
      targetPort: 9093
</code></pre><h4 id="最后配置prometheus的rule文件-prometheus-config-rulefilesyml-修改">最后配置prometheus的rule文件 prometheus-config-rulefiles.yml (修改)</h4>
<blockquote>
<p>这里仅针对我这里prometheus部署的时候是通过configmap挂载的rule文件</p>
</blockquote>
<pre><code>
kind: ConfigMap
metadata:
  name: prometheus-rulefiles
  namespace: monitoring
apiVersion: v1
data:
  k8s.yml: |
    groups:
    - name: cpu-load-rule
      rules:
      - alert: cpu-load-high
        expr: irate(container_cpu_usage_seconds_total{image!=&quot;&quot;}[1m]) &gt; 0.1
        for: 1m
        labels:
          serverity: warning
        annotations:
          summary: &quot;{{ $labels.instance }} container_name: {{ $labels.container_name }}  pod_name: {{ $labels.pod_name }} , namespace: {{ $labels.namespace}}&quot;


</code></pre><h4 id="也贴上prometheus的statefulset-配置">也贴上prometheus的StatefulSet 配置</h4>
<pre><code>&gt;  prometheus-statefulset.yml 配置可以看到prometheus-rulefiles 这个configmap是 挂载到 /etc/prometheus/rules/ 目录
&gt;  prometheus-configmap.yml 配置可以看到     rule_files: - /etc/prometheus/rules/*.yml,  所以 以上prometheus-rulefiles 这个configmap 的k8s.yml就被prometheus当做rule文件了
</code></pre><ul>
<li>prometheus-statefulset.yml</li>
</ul>
<pre><code>apiVersion: apps/v1
kind: StatefulSet
metadata:
 labels:
   app: prometheus
   prometheus: k8s
 name: prometheus
 namespace: monitoring
spec:
 replicas: 1
 volumeClaimTemplates:
 - metadata:
     name: prometheus-data
     annotations:
       volume.beta.kubernetes.io/storage-class: &quot;nfs-retain&quot; # 这里配置 上面创建的 storageclass 的名称
   spec:
     accessModes: [ &quot;ReadWriteOnce&quot; ]
     resources:
       requests:
         storage: 20Gi
 revisionHistoryLimit: 10
 selector:
   matchLabels:
     app: prometheus
     prometheus: k8s
 serviceName: prometheus
 updateStrategy:
   type: RollingUpdate
 template:
   metadata:
     creationTimestamp: null
     labels:
       app: prometheus
       prometheus: k8s
   spec:
     serviceAccount: prometheus-k8s
     containers:
       - args:
           - --web.console.templates=/etc/prometheus/consoles
           - --web.console.libraries=/etc/prometheus/console_libraries
           - --config.file=/etc/prometheus/config/prometheus.yml
           - --storage.tsdb.path=/prometheus
           - --web.enable-admin-api
           - --storage.tsdb.retention.time=20d
           - --web.enable-lifecycle
           - --storage.tsdb.no-lockfile
           - --web.external-url=http://prometheus1-dev.xxx.com/
           - --web.route-prefix=/
         image: prom/prometheus:v2.11.1
         imagePullPolicy: IfNotPresent
         livenessProbe:
           failureThreshold: 6
           httpGet:
             path: /-/healthy
             port: web
             scheme: HTTP
           periodSeconds: 5
           successThreshold: 1
           timeoutSeconds: 3
         name: prometheus
         ports:
           - containerPort: 9090
             name: web
             protocol: TCP
         readinessProbe:
           failureThreshold: 120
           httpGet:
             path: /-/ready
             port: web
             scheme: HTTP
           periodSeconds: 5
           successThreshold: 1
           timeoutSeconds: 3
         resources:
           requests:
             memory: 400Mi
         terminationMessagePath: /dev/termination-log
         terminationMessagePolicy: File
         volumeMounts:
           - mountPath: /etc/prometheus/config
             name: config
             readOnly: true
           - mountPath: /prometheus
             name: prometheus-data
             #subPath: prometheus-db
           - mountPath: /etc/prometheus/rules/
             name: prometheus-rulefiles
     volumes:
       - name: config
         configMap:
           defaultMode: 420
           name: prometheus
       - name: prometheus-rulefiles
         configMap:
           defaultMode: 420
           name: prometheus-rulefiles
</code></pre><ul>
<li>prometheus-configmap.yml</li>
</ul>
<pre><code>kind: ConfigMap
metadata:
  name: prometheus
  namespace: monitoring
apiVersion: v1
data:
  prometheus.yml: |
    global:
      evaluation_interval: 30s
      scrape_interval: 30s
      external_labels:
        prometheus: monitoring/k8s
    alerting:
      alertmanagers:
      - static_configs:
        - targets: ['alertmanager:80']
    rule_files:
    - /etc/prometheus/rules/*.yml
    scrape_configs:
    - job_name: prometheus
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - monitoring
      scrape_interval: 30s
      relabel_configs:
      - action: keep
        source_labels:
        - __meta_kubernetes_service_label_prometheus
        regex: k8s
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: service
      - source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: job
        replacement:
      - target_label: endpoint
        replacement: web

    - job_name: k8s-db-t-kube-apiserver
      honor_labels: false
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - default
      scrape_interval: 30s
      scheme: https
      tls_config:
        insecure_skip_verify: false
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
        - action: keep
          source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          separator: ;
          regex: default;kubernetes;https
      metric_relabel_configs:
        - source_labels:
            - __name__
          action: drop
          regex: (apiserver_storage_data_key_generation_latencies_microseconds_bucket|apiserver_admission_controller_admission_latencies_milliseconds_bucket|apiserver_admission_step_admission_latencies_milliseconds_bucket|apiserver_admission_step_admission_latencies_milliseconds_summary|apiserver_request_latencies_bucket|apiserver_request_latencies_summary|apiserver_storage_data_key_generation_latencies_microseconds_bucket|rest_client_request_latency_seconds_bucket)

    - job_name: k8s-db-t-pods
      honor_labels: true
      kubernetes_sd_configs:
      - role: node
      scrape_interval: 30s
      metrics_path: /metrics/cadvisor
      scheme: https
      tls_config:
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token


    - job_name: k8s-db-t-kube-state-metrics
      honor_labels: true
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - monitoring
      scrape_interval: 30s
      scrape_timeout: 30s
      tls_config:
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
        - action: keep
          source_labels:
            - __meta_kubernetes_service_label_k8s_app
          regex: kube-state-metrics
        - action: keep
          source_labels:
            - __meta_kubernetes_endpoint_port_name
          regex: http-main
      metric_relabel_configs:
        - source_labels:
            - __name__
          regex: (kube_daemonset_status_number_ready|kube_daemonset_status_number_unavailable|kube_deployment_status_replicas_unavailable|kube_deployment_spec_paused|kube_deployment_spec_strategy_rollingupdate_max_surge|kube_deployment_spec_strategy_rollingupdate_max_unavailable|kube_endpoint_address_available|kube_endpoint_address_not_ready|kube_node_info|kube_node_spec_unschedulable|kube_node_status_condition|kube_node_status_capacity|kube_node_status_capacity|kube_node_status_allocatable|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_status_phase|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolume_status_phase|kube_persistentvolume_info|kube_persistentvolume_capacity_bytes|kube_pod_info|kube_pod_status_phase|kube_pod_status_ready|kube_pod_container_info|kube_pod_container_status_waiting|kube_pod_container_status_waiting_reason|kube_pod_container_status_running|kube_pod_container_status_terminated_reason|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_resource_limits|kube_service_info|kube_statefulset_status_replicas_current|kube_statefulset_status_replicas_ready|kube_deployment_status_replicas_available|kube_deployment_status_replicas|kube_node_status_allocatable_memory_bytes|kube_deployment_status_replicas|kube_statefulset_replicas|kube_daemonset_status_desired_number_scheduled|kube_statefulset_status_replicas|changes|kube_job_status_failed)
          action: keep


</code></pre>]]></content>
		</item>
		
		<item>
			<title>docker安装nginx第三方模块</title>
			<link>https://www.ngirl.xyz/posts/46-docker%E5%AE%89%E8%A3%85nginx%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/</link>
			<pubDate>Wed, 13 May 2020 11:12:01 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/46-docker%E5%AE%89%E8%A3%85nginx%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/</guid>
			<description>&lt;p&gt;由于hub.docker.com 官方的nginx 并不会包括第三方包, 这里简要说明如何安装nginx_upstream_check_module模块&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>由于hub.docker.com 官方的nginx 并不会包括第三方包, 这里简要说明如何安装nginx_upstream_check_module模块</p>
<h3 id="健康检查">健康检查</h3>
<ul>
<li><a href="https://github.com/yaoweibin/nginx_upstream_check_module">nginx_upstream_check_module github 地址</a></li>
</ul>
<h3 id="docker安装nginx">docker安装nginx</h3>
<blockquote>
<p>如果使用官方的nginx镜像, 这里无法安装第三方模块,并没有像php的docker-php-ext-install 工具,  因此这里采用源码安装</p>
</blockquote>
<blockquote>
<p>这里镜像的大小也控制的还可以</p>
</blockquote>
<pre><code># 自己源码安装的镜像
hub.xxx.com/nginx  1.16.1-debian-buster-slim    5b5884f7927e        34 seconds ago      120MB

# 官方镜像
nginx              1.16                         588bb5d559c2        6 weeks ago         127MB
</code></pre><h4 id="dockerfile">dockerfile</h4>
<pre><code>FROM debian:buster-slim

LABEL maintainer=&quot;zhangzw zhangzw@xxx.com&quot;

ENV NGINX_VERSION   1.16.1
workdir /opt


RUN apt-get update \
   &amp;&amp; apt-get install wget unzip gcc make openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev net-tools patch -y\
   &amp;&amp; wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \
   &amp;&amp; wget https://codeload.github.com/yaoweibin/nginx_upstream_check_module/zip/master \
   &amp;&amp; tar -xvf  nginx-${NGINX_VERSION}.tar.gz \
   &amp;&amp; unzip master \
   &amp;&amp; cd nginx-${NGINX_VERSION} \
   &amp;&amp; patch -p1 &lt; ../nginx_upstream_check_module-master/check_1.16.1+.patch \
   &amp;&amp; ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module  --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module  --add-module=../nginx_upstream_check_module-master/ &amp;&amp; make &amp;&amp; make install \
  &amp;&amp; rm -rf /opt/* \
  &amp;&amp; apt-get remove --purge -y wget unzip gcc make patch \
  &amp;&amp; apt-get autoremove -y \
  &amp;&amp; apt-get clean \
  &amp;&amp; rm -rf /var/lib/apt/lists/* \
  &amp;&amp; useradd nginx

run  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
 &amp;&amp; echo 'Asia/Shanghai' &gt;/etc/timezone

expose 80

CMD [&quot;/usr/sbin/nginx&quot;, &quot;-c&quot;, &quot;/etc/nginx/nginx.conf&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]
</code></pre>]]></content>
		</item>
		
		<item>
			<title>gitlab-ci与k8s结合</title>
			<link>https://www.ngirl.xyz/posts/45-gitlab-ci%E4%B8%8Ek8s%E7%BB%93%E5%90%88/</link>
			<pubDate>Thu, 23 Apr 2020 16:20:33 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/45-gitlab-ci%E4%B8%8Ek8s%E7%BB%93%E5%90%88/</guid>
			<description>本文介绍如何通过gitlab-ci整合k8s实现流水线部署
  https://www.cnblogs.com/Sinte-Beuve/p/11739196.html https://www.qikqiak.com/post/gitlab-ci-k8s-cluster-feature/   环境版本统计 1 gitlab/gitlab-runner 0.15.0 2 helm 2.16 3 k8s 1.16.4 4 gitlab 11.5 5 CentOS Linux release 7.7 /kernel 5.2  小节
 1. gitlab 通过admin管理页面的runner配置, 安装gitlab-runner, 安装方式可以是二进制, docker 或k8s (这里是k8s) 2. gitlab 项目目录的 Operations -&amp;gt; kubernetes -&amp;gt; Add Kubernetes Cluster -&amp;gt; Add existing cluster 是结合k8s, 每个项目都需要设置一个k8s集群,k8s集群需要配置rbac权限 3. ci 在提交到私有harbor上是需要验证账号密码, 私有仓库拉取也需要验证  安装方法一   k8s yaml直接部署 gitlab-ci-token-secret.yaml  具体token值 请查看 gitlab的admin页面-&amp;gt; Overview -&amp;gt; Runners 查看, 然后base64加密</description>
			<content type="html"><![CDATA[<p>本文介绍如何通过gitlab-ci整合k8s实现流水线部署</p>
<!--more -->
<blockquote>
<ol>
<li><a href="https://www.cnblogs.com/Sinte-Beuve/p/11739196.html">https://www.cnblogs.com/Sinte-Beuve/p/11739196.html</a></li>
<li><a href="https://www.qikqiak.com/post/gitlab-ci-k8s-cluster-feature/">https://www.qikqiak.com/post/gitlab-ci-k8s-cluster-feature/</a></li>
</ol>
</blockquote>
<h3 id="环境版本统计">环境版本统计</h3>
<pre><code>1 gitlab/gitlab-runner 0.15.0
2 helm 2.16
3 k8s 1.16.4
4 gitlab 11.5
5 CentOS Linux release 7.7 /kernel 5.2
</code></pre><blockquote>
<p>小节</p>
</blockquote>
<pre><code>1. gitlab 通过admin管理页面的runner配置, 安装gitlab-runner, 安装方式可以是二进制, docker 或k8s (这里是k8s)
2. gitlab 项目目录的 Operations -&gt; kubernetes -&gt; Add Kubernetes Cluster -&gt; Add existing cluster 是结合k8s, 每个项目都需要设置一个k8s集群,k8s集群需要配置rbac权限
3. ci 在提交到私有harbor上是需要验证账号密码, 私有仓库拉取也需要验证
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 安装方法一 </font>
</center>
<h3 id="k8s-yaml直接部署">k8s yaml直接部署</h3>
<h4 id="gitlab-ci-token-secretyaml">gitlab-ci-token-secret.yaml</h4>
<blockquote>
<p>具体token值 请查看 gitlab的admin页面-&gt; Overview -&gt; Runners 查看, 然后base64加密</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-token</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-ops</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">GITLAB_CI_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">$(echo &#34;gitlab_ci_token&#34;|base64)</span><span class="w">
</span></code></pre></div><h4 id="runner-configmapyaml">runner-configmap.yaml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner-cm</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-ops</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">REGISTER_NON_INTERACTIVE</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">REGISTER_LOCKED</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">METRICS_SERVER</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:9100&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">CI_SERVER_URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http://gitlab.xxx.com/ci&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">RUNNER_REQUEST_CONCURRENCY</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;4&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">RUNNER_EXECUTOR</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;kubernetes&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_NAMESPACE</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;kube-ops&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_PRIVILEGED</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_CPU_LIMIT</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_MEMORY_LIMIT</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1Gi&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_SERVICE_CPU_LIMIT</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_SERVICE_MEMORY_LIMIT</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1Gi&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_HELPER_CPU_LIMIT</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_HELPER_MEMORY_LIMIT</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;100Mi&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_PULL_POLICY</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;if-not-present&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_TERMINATIONGRACEPERIODSECONDS</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_POLL_INTERVAL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;5&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">KUBERNETES_POLL_TIMEOUT</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;360&#34;</span><span class="w">
</span></code></pre></div><h4 id="runner-rbacyaml">runner-rbac.yaml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-ops</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Role</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-ops</span><span class="w">
</span><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;*&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;*&#34;</span><span class="p">]</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">RoleBinding</span><span class="w">
</span><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-ops</span><span class="w">
</span><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci</span><span class="w">
</span><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-ops</span><span class="w">
</span><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Role</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci</span><span class="w">
</span><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></code></pre></div><h4 id="runner-scripts-cmyaml">runner-scripts-cm.yaml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">run.sh</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">    #!/bin/bash
</span><span class="sd">    unregister() {
</span><span class="sd">        kill %1
</span><span class="sd">        echo &#34;Unregistering runner ${RUNNER_NAME} ...&#34;
</span><span class="sd">        /usr/bin/gitlab-ci-multi-runner unregister -t &#34;$(/usr/bin/gitlab-ci-multi-runner list 2&gt;&amp;1 | tail -n1 | awk &#39;{print $4}&#39; | cut -d&#39;=&#39; -f2)&#34; -n ${RUNNER_NAME}
</span><span class="sd">        exit $?
</span><span class="sd">    }
</span><span class="sd">    trap &#39;unregister&#39; EXIT HUP INT QUIT PIPE TERM
</span><span class="sd">    echo &#34;Registering runner ${RUNNER_NAME} ...&#34;
</span><span class="sd">    /usr/bin/gitlab-ci-multi-runner register -r ${GITLAB_CI_TOKEN}
</span><span class="sd">    sed -i &#39;s/^concurrent.*/concurrent = &#39;&#34;${RUNNER_REQUEST_CONCURRENCY}&#34;&#39;/&#39; /home/gitlab-runner/.gitlab-runner/config.toml
</span><span class="sd">    echo &#34;Starting runner ${RUNNER_NAME} ...&#34;
</span><span class="sd">    /usr/bin/gitlab-ci-multi-runner run -n ${RUNNER_NAME} &amp;
</span><span class="sd">    wait</span><span class="w">    
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner-scripts</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-ops</span><span class="w">
</span></code></pre></div><h4 id="runner-statefulsetyaml">runner-statefulset.yaml</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1beta1</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">StatefulSet</span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-ops</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">updateStrategy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RollingUpdate</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span><span class="w">  </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner-scripts</span><span class="w">
</span><span class="w">        </span><span class="nt">projected</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">sources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">configMap</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner-scripts</span><span class="w">
</span><span class="w">              </span><span class="nt">items</span><span class="p">:</span><span class="w">
</span><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">run.sh</span><span class="w">
</span><span class="w">                </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">run.sh</span><span class="w">
</span><span class="w">                </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="m">0755</span><span class="w">
</span><span class="w">      </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci</span><span class="w">
</span><span class="w">      </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">runAsNonRoot</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">        </span><span class="nt">runAsUser</span><span class="p">:</span><span class="w"> </span><span class="m">999</span><span class="w">
</span><span class="w">        </span><span class="nt">supplementalGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="m">999</span><span class="p">]</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab/gitlab-runner:latest</span><span class="w">
</span><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;50m&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;800m&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="l">/scripts/run.sh</span><span class="w">
</span><span class="w">        </span><span class="nt">envFrom</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">configMapRef</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner-cm</span><span class="w">
</span><span class="w">        </span>- <span class="nt">secretRef</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-token</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">RUNNER_NAME</span><span class="w">
</span><span class="w">          </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.name</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9100</span><span class="w">
</span><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http-metrics</span><span class="w">
</span><span class="w">          </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gitlab-ci-runner-scripts</span><span class="w">
</span><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/scripts&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">      </span><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always</span><span class="w">
</span></code></pre></div><h4 id="部署和检查">部署和检查</h4>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="l">kubectl apply -f ../</span><span class="w">
</span><span class="w"></span><span class="l">kubectl get all -n kube-ops</span><span class="w">
</span></code></pre></div><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 安装方法二 </font>
</center>
<h3 id="helm216安装">helm2.16安装</h3>
<pre><code>wget https://get.helm.sh/helm-v2.16.2-linux-amd64.tar.gz
tar -xvf helm-v2.16.2-linux-amd64.tar.gz
mv linux-amd64/helm /usr/local/bin/helm

kubectl create serviceaccount --namespace=kube-system tiller
kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller

helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.2 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts --service-account tiller


</code></pre><p><img src="//zhangzw001.github.io/images/45/02.png" alt=""></p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="从官方拉取helm2-配置文件">从官方拉取helm2 配置文件</h3>
<pre><code># 添加源
helm repo add gitlab https://charts.gitlab.io

# 查看
helm search runner
gitlab/gitlab-runner 0.15.0        12.9.0      GitLab Runner

# 下载charts压缩包gitlab-runner-0.15.0.tgz
helm fetch gitlab/gitlab-runner

# 创建gitlab-runner的rbac账号
kubectl create serviceaccount  gitlab-cluster-admin
kubectl create clusterrolebinding gitlab-cluster-admin --clusterrole=cluster-admin --group=system:serviceaccounts --namespace=default

# 然后修改 values.yaml
gitlabUrl: http://gitlab.zhangzw.com #gitlab服务器上管理页面上的URL
runnerRegistrationToken: #gitlab服务器管理页面的token
serviceAccountName: gitlab-cluster-admin

# 修改 templates/configmap.yaml (如果后面配置dind采用tcp://0.0.0.0:2375的方式应该不用挂载sock文件)
    #
    if ! sh /scripts/register-the-runner; then
      exit 1
    fi

    # add new config start
    cat &gt;&gt;/home/gitlab-runner/.gitlab-runner/config.toml &lt;&lt;EOF
      [[runners.kubernetes.volumes.host_path]]
            name = &quot;docker&quot;
            mount_path = &quot;/var/run/docker.sock&quot;
            read_only = false
            host_path = &quot;/var/run/docker.sock&quot;
    EOF
    # add new config end

    # Start the runner
    exec /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner


# helm启动,更新,删除gitlab-runner
helm install  --name gitlab-runner .
helm upgrade gitlab-runner .
helm delete --purge gitlab-runner
</code></pre><h3 id="登录到gitlab-runner-镜像register注册">登录到gitlab-runner 镜像register注册</h3>
<blockquote>
<p>以下大部分都是回车, 只有token需要手动输入(输入values.yaml中的runnerRegistrationToken即可)</p>
</blockquote>
<pre><code>bash-5.0$ gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=4257 revision=4c96e5ad version=12.9.0
WARNING: Running in user-mode.                     
WARNING: The user-mode requires you to manually start builds processing:
WARNING: $ gitlab-runner run                       
WARNING: Use sudo for system-mode:                 
WARNING: $ sudo gitlab-runner...                   

Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.zhangzw.com/):
[http://gitlab.zhangzw.com]:
Please enter the gitlab-ci token for this runner:
djs47LiKFy-64FxAACp5
Please enter the gitlab-ci description for this runner:
[gitlab-runner-gitlab-runner-6cf8c6bff4-rhhs5]:
Please enter the gitlab-ci tags for this runner (comma separated):

Registering runner... succeeded                     runner=djs47LiK
Please enter the executor: docker+machine, docker-ssh+machine, kubernetes, docker, docker-ssh, shell, ssh, virtualbox, custom, parallels:
[kubernetes]:
Runner registered successfully. Feel free to start it, but if its running already the config should be automatically reloaded!
bash-5.0$
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="在项目的页面点击-add-kubernetes-cluster---add-existing-cluster">在项目的页面点击 Add Kubernetes Cluster -&gt; Add existing cluster</h3>
<ul>
<li>
<ol>
<li>API URL 是你的集群的apiserver的地址， 一般可以通过输入kubectl cluster-info获取</li>
</ol>
</li>
</ul>
<pre><code>kubectl cluster-info

Kubernetes master is running at https://master.k8s.io:16443
KubeDNS is running at https://master.k8s.io:16443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
Metrics-server is running at https://master.k8s.io:16443/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy
</code></pre><ul>
<li>
<ol start="2">
<li>CA证书</li>
</ol>
</li>
</ul>
<blockquote>
<p>由于我们在部署阶段需要去创建、删除一些资源对象，所以我们也需要对象的 RBAC 权限，这里为了简单，我们直接新建一个 ServiceAccount，绑定上一个cluster-admin的权限(gitlab-serviceAccount.yaml)</p>
</blockquote>
<pre><code>---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab
  namespace: gitlab

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: gitlab
  namespace: gitlab
subjects:
  - kind: ServiceAccount
    name: gitlab
    namespace: gitlab
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
</code></pre><pre><code>#可以通过上面创建的 ServiceAccount 获取 CA 证书和 Token：
kubectl get serviceaccount gitlab -n gitlab -o json | jq -r '.secrets[0].name'
gitlab-token-9jlpr

# 然后根据上面的Secret找到CA证书
kubectl get secret gitlab-token-9jlpr -n gitlab -o json | jq -r '.data[&quot;ca.crt&quot;]' | base64 -d
xxxxxCA证书内容xxxxx

# 当然要找到对应的 Token 也很简单
kubectl get secret gitlab-token-9jlpr  -n gitlab -o json | jq -r '.data.token' | base64 -d
xxxxxxtoken值xxxx
</code></pre><blockquote>
<p>然后复制对应的值贴到项目的k8s配置中即可</p>
</blockquote>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="简单测试">简单测试</h3>
<pre><code>#.gitlab-ci.yml
image: busybox
stages:
  - build
  - deploy
Job1:
  stage: build
  script:
    - echo &quot;go go go !!!~&quot;
  only:
    - master

deploy:
  stage: deploy
  script:
    - echo &quot;部署开始&quot;
  only:
    - master

</code></pre><p><img src="//zhangzw001.github.io/images/45/03.png" alt=""></p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="gitlab-ciyaml配置">.gitlab-ci.yaml配置</h3>
<blockquote>
<p>以下一些配置写到gitlab项目页面-&gt; Settings -&gt; CI/CD -&gt; Variables
其实也可以写到.gitlab-ca.yaml中, 我在deployment.yaml也无法用如下变量</p>
</blockquote>
<pre><code>CI_REGISTRY_USER: admin
CI_REGISTRY_PASSWORD: xxxxx
CI_REGISTRY: hub.xxx.com
CI_REGISTRY_IMAGE: hub.xxx.com/public/nginx
</code></pre><pre><code>variables:
  GIT_CURL_VERBOSE: 1
  GIT_TRACE: 1

stages:
  - release
  - review
  - deploy



buildPushImage:
  stage: release
  image: docker:latest
  services:
    - name: docker:dind
      command: [&quot;--insecure-registry=hub.zhangzw.com&quot;]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://192.168.0.136:2375
  script:
    - docker login -u &quot;${CI_REGISTRY_USER}&quot; -p &quot;${CI_REGISTRY_PASSWORD}&quot; &quot;${CI_REGISTRY}&quot;
    - docker build -t &quot;${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}&quot; .
    - docker push &quot;${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}&quot;

deploy_review:
  image: bitnami/kubectl:1.16.3
  stage: review
  only:
    - branches
  except:
    - tags
  environment:
    name: dev
    url: http://dev-gitlab-k8s-demo.zhangzw.com
    on_stop: stop_review
  script:
    - kubectl version
    - cd deploy/
    - sed -i &quot;s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/&quot; deployment.yaml ingress.yaml service.yaml
    - sed -i &quot;s/__VERSION__/${CI_COMMIT_REF_NAME}/&quot; deployment.yaml ingress.yaml service.yaml
    - |
      if kubectl apply -f deployment.yaml | grep -q unchanged; then
          echo &quot;=&gt; Patching deployment to force image update.&quot;
          kubectl patch -f deployment.yaml -p &quot;{\&quot;spec\&quot;:{\&quot;template\&quot;:{\&quot;metadata\&quot;:{\&quot;annotations\&quot;:{\&quot;ci-last-updated\&quot;:\&quot;$(date +'%s')\&quot;}}}}}&quot;
      else
          echo &quot;=&gt; Deployment apply has changed the object, no need to force image update.&quot;
      fi
    - kubectl apply -f service.yaml || true
    - kubectl apply -f ingress.yaml
    - kubectl rollout status -f deployment.yaml
    - kubectl get all,ing -l ref=${CI_ENVIRONMENT_SLUG}


stop_review:
  image: bitnami/kubectl:1.16.3
  stage: review
  variables:
    GIT_STRATEGY: none
  when: manual
  only:
    - branches
  except:
    - master
    - tags
  environment:
    name: dev
    action: stop
  script:
    - kubectl version
    - kubectl delete ing -l ref=${CI_ENVIRONMENT_SLUG}
    - kubectl delete all -l ref=${CI_ENVIRONMENT_SLUG}


deploy_live:
  image: bitnami/kubectl:1.16.3
  stage: deploy
  environment:
    name: live
    url: http://live-gitlab-k8s-demo.zhangzw.com
  script:
    - echo &quot;部署开始&quot;
    - cd deploy
    - sed -i &quot;s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/&quot; deployment.yaml ingress.yaml service.yaml
    - sed -i &quot;s/__VERSION__/${CI_COMMIT_REF_NAME}/&quot; deployment.yaml ingress.yaml service.yaml
    - kubectl apply -f deployment.yaml
    - kubectl apply -f service.yaml
    - kubectl apply -f ingress.yaml
    - kubectl rollout status -f deployment.yaml
    - kubectl get all,ing -l ref=${CI_ENVIRONMENT_SLUG}
  only:
    - tags
  when: manual

</code></pre><h3 id="deploydeploymentyaml">deploy/deployment.yaml</h3>
<pre><code>---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-k8s-demo-__CI_ENVIRONMENT_SLUG__
  labels:
    app: gitlab-k8s-demo
    ref: __CI_ENVIRONMENT_SLUG__
    track: stable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gitlab-k8s-demo
      ref: __CI_ENVIRONMENT_SLUG__
  template:
    metadata:
      labels:
        app: gitlab-k8s-demo
        ref: __CI_ENVIRONMENT_SLUG__
        track: stable
    spec:
      imagePullSecrets:
        - name: myregistry
      containers:
      - name: app
        image: hub.zhangzw.com/bq/nginx:__VERSION__
        imagePullPolicy: Always
        ports:
        - name: http-metrics
          protocol: TCP
          containerPort: 80
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 3
          timeoutSeconds: 2
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 3
          timeoutSeconds: 2
</code></pre><h3 id="如果我们harbor中设置的是私有镜像-则需要设置imagepullsecret-才能拉取镜像">如果我们harbor中设置的是私有镜像, 则需要设置imagePullSecret 才能拉取镜像</h3>
<pre><code>kubectl create secret docker-registry gitlab-hub-secret --docker-server=hub.zhangzw.com --docker-username=xxx --docker-password=xxx --docker-email=zhangzw@zhangzw.com
</code></pre><h3 id="deployserviceyaml">deploy/service.yaml</h3>
<pre><code>---
apiVersion: v1
kind: Service
metadata:
  name: gitlab-k8s-demo-__CI_ENVIRONMENT_SLUG__
  labels:
    app: gitlab-k8s-demo
    ref: __CI_ENVIRONMENT_SLUG__
  annotations:
    prometheus.io/scrape: &quot;true&quot;
    prometheus.io/port: &quot;80&quot;
    prometheus.io/scheme: &quot;http&quot;
    prometheus.io/path: &quot;/&quot;
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 80
      protocol: TCP
  selector:
    app: gitlab-k8s-demo
    ref: __CI_ENVIRONMENT_SLUG__
</code></pre><h3 id="deployingressyaml">deploy/ingress.yaml</h3>
<pre><code>---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gitlab-k8s-demo-__CI_ENVIRONMENT_SLUG__
  labels:
    app: gitlab-k8s-demo
    ref: __CI_ENVIRONMENT_SLUG__
  annotations:
    kubernetes.io/ingress.class: &quot;traefik&quot;
spec:
  rules:
  - host: __CI_ENVIRONMENT_SLUG__-gitlab-k8s-demo.zhangzw.com
    http:
      paths:
      - path: /
        backend:
          serviceName: gitlab-k8s-demo-__CI_ENVIRONMENT_SLUG__
          servicePort: 80
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="遇到的问题">遇到的问题</h3>
<h4 id="err1--流水线打包的时候提示没有权限">err1.  流水线打包的时候提示没有权限</h4>
<pre><code>ERROR: Job failed (system failure): pods is forbidden: User &quot;system:serviceaccount:default:default&quot; cannot create resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;default&quot;


kubectl create serviceaccount  gitlab-cluster-admin
kubectl create clusterrolebinding gitlab-cluster-admin --clusterrole=cluster-admin --group=system:serviceaccounts --namespace=default
</code></pre><h4 id="err2-流水线打包提示无法拉取项目">err2. 流水线打包提示无法拉取项目</h4>
<pre><code>fatal: unable to access 'http://gitlab.zhangzw.com/k8s/rancher-dev-php.git/': Failed to connect to gitlab.zhangzw.com port 80: Connection refused
Uploading artifacts for failed job
ERROR: Job failed: command terminated with exit code 1
</code></pre><blockquote>
<p>难道是因为我们的项目是私有项目?</p>
</blockquote>
<p>显然我们在官网 <a href="https://docs.gitlab.zhangzw.com/runner/configuration/advanced-configuration.html">https://docs.gitlab.zhangzw.com/runner/configuration/advanced-configuration.html</a> 这里看到下面一句话</p>
<pre><code>Only if the clone_url is set, the runner will construct a clone URL in the form of http://gitlab-ci-token:s3cr3tt0k3n@192.168.1.23/namespace/project.git.

# 尝试修改 values.yaml
cloneUrl: http://gitlab.zhangzw.com
</code></pre><blockquote>
<p>之后还是出现了该问题</p>
</blockquote>
<blockquote>
<p>所以这应该是gitlab-runner register的问题</p>
</blockquote>
<blockquote>
<p>但是这里诡异的是, 我三个步骤,前两个都是正常, 第三个一直是报错connection refused, 但是我重试了三遍又正常了, 这么不稳定的吗?</p>
</blockquote>
<p><img src="//zhangzw001.github.io/images/45/01.png" alt=""></p>
<blockquote>
<p>看日志错误有点像是这么回事, 我的nginx反向代理了gitlab.zhangzw.com proxy_pass的是ip:10080, 而日志中看起来报错提示是链接到ip:80</p>
</blockquote>
<p>我这里试着将helm安装gitlab-runner的配置文件values.yaml修改如下:</p>
<pre><code>gitlabUrl: http://192.168.0.65:10080
  cloneUrl: http://192.168.0.65:10080
</code></pre><blockquote>
<p>测试之后还是会出现无法连接, 所以也不是这个问题, 这里git clone http 方式经过nginx代理是没问题的</p>
</blockquote>
<p>如果是项目权限问题, 那我新建一个public项目应该不会报错</p>
<blockquote>
<p>测试之后还是会出现无法连接, 看起问题还是网络方面问题, 为什么会网络无法连接呢?</p>
</blockquote>
<p>嗯??? 我查看了下 gitlab admin -&gt; runners -&gt; 点击Runner token 进入 -&gt; Assigned projects  这里我之前是加过的, 但是helm 安装的gitlab-runner upgrade之后就好像丢失了, 可能是我这边没有mount数据存储到nfs, 不过这里可以不用按照分配的方式, 就设置为share即可,如果有多个runner,需要更细致的权限部署划分,可以设置</p>
<p>所以现在这个问题就变成, 有可能第一次会成功, 有可能会失败, 有可能第二个步骤失败 , 然后retry 2次?3次或6次又成功了, 蛋疼中&hellip;</p>
<p><code>2020-04-24 15:58:40 补:  我这边测试的gitlab-runner安装的网段和gitlab的网段之间网络问题,  现在新搭建的gitlab-runner和gitlab在同一网段就不在报错了...</code></p>
<h4 id="err3-k8s116安装helm214的有报错-error-error-installing-the-server-could-not-find-the-requested-resource-这是由于-extensionsv1beta1-已经被-appsv1-替代相信在215-或者-3-版本发布之后-应该就不会遇到这个问题了还是生态比较慢的原因">err3. k8s1.16安装helm2.14的有报错: Error: error installing: the server could not find the requested resource, 这是由于 extensions/v1beta1 已经被 apps/v1 替代。相信在2.15 或者 3 版本发布之后, 应该就不会遇到这个问题了。还是生态比较慢的原因。</h4>
<pre><code>helm init -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.14.3 --stable-repo-url http://mirror.azure.cn/kubernetes/charts/ --service-account tiller --override spec.selector.matchLabels.'name'='tiller',spec.selector.matchLabels.'app'='helm' --output yaml | sed 's@apiVersion: extensions/v1beta1@apiVersion: apps/v1@' | kubectl apply -f -
</code></pre><h4 id="err4-cannot-connect-to-the-docker-daemon-at-unixvarrundockersock-is-the-docker-daemon-running">err4. Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</h4>
<pre><code>不确定为什么会报这个错误, 第二次启动又没问题了
</code></pre><h4 id="err5-time2020-04-22t023912z-levelerror-msgfailed-to-dial-grpc-cannot-connect-to-the-docker-daemon-is-docker-daemon-running-on-this-host-dial-tcp-1270012375-connect-connection-refused">err5. time=&ldquo;2020-04-22T02:39:12Z&rdquo; level=error msg=&ldquo;failed to dial gRPC: cannot connect to the Docker daemon. Is &lsquo;docker daemon&rsquo; running on this host?: dial tcp 127.0.0.1:2375: connect: connection refused&rdquo;</h4>
<pre><code>这种情况需要docker或者k8s的docker启动方式添加tcp方式
vim /usr/lib/systemd/system/docker.service
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock -H fd:// --containerd=/run/containerd/containerd.sock
</code></pre>]]></content>
		</item>
		
		<item>
			<title>k8s部署fluentd&#43;kafka&#43;logstash&#43;es</title>
			<link>https://www.ngirl.xyz/posts/44-k8s%E9%83%A8%E7%BD%B2fluentd-kafka-logstash-es/</link>
			<pubDate>Thu, 09 Apr 2020 17:40:58 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/44-k8s%E9%83%A8%E7%BD%B2fluentd-kafka-logstash-es/</guid>
			<description>客户端采集数据的软件比较多, 有logstash,flume,fluentd/fluent-bit,filebeat等,这里在k8s集群中部署fluentd开启UDP端口接收代码写入的json日志,并写入到kafka中
  1. 一些服务版本 docker镜像: docker pull fluentd:v1.9.1-1.0 kafka: kafka-server-0.10.0+kafka2.1.0-1.2.1.0.p0.63.el6.noarch fluent-plugin-kafka: 0.5.7   2. fluentd 镜像安装kafka扩展 Dockerfile  由于fluent-plugin-kafka版本要求 我们的kafka是0.10, 所以高版本有问题, 安装了fluent-plugin-kafka 0.5.7 则正常
 官方文档: https://rubygems.org/gems/fluent-plugin-kafka/versions/0.5.7
from fluentd:v1.9.1-1.0 MAINTAINER zhangzw &amp;lt;zhangzw@xxx.com&amp;gt; USER root RUN fluent-gem install fluent-plugin-kafka -v 0.5.7 USER fluent   3. fluentd配置文件 fluent-udp-to-kafka.conf  &amp;lt;source&amp;gt; @type udp @label @mainstream tag udplog # required &amp;lt;parse&amp;gt; @type regexp expression /^(?&amp;lt;message&amp;gt;.*)$/ &amp;lt;/parse&amp;gt; port 12301 # optional. 5160 by default bind 0.</description>
			<content type="html"><![CDATA[<p>客户端采集数据的软件比较多, 有logstash,flume,fluentd/fluent-bit,filebeat等,这里在k8s集群中部署fluentd开启UDP端口接收代码写入的json日志,并写入到kafka中</p>
<!--more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="1-一些服务版本">1. 一些服务版本</h3>
<pre><code>docker镜像: docker pull fluentd:v1.9.1-1.0
kafka: kafka-server-0.10.0+kafka2.1.0-1.2.1.0.p0.63.el6.noarch
fluent-plugin-kafka: 0.5.7
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="2-fluentd-镜像安装kafka扩展-dockerfile">2. fluentd 镜像安装kafka扩展 Dockerfile</h3>
<blockquote>
<p>由于fluent-plugin-kafka版本要求
我们的kafka是0.10, 所以高版本有问题, 安装了fluent-plugin-kafka 0.5.7 则正常</p>
</blockquote>
<p>官方文档: <a href="https://rubygems.org/gems/fluent-plugin-kafka/versions/0.5.7">https://rubygems.org/gems/fluent-plugin-kafka/versions/0.5.7</a></p>
<pre><code>from fluentd:v1.9.1-1.0

MAINTAINER zhangzw &lt;zhangzw@xxx.com&gt;

USER root

RUN fluent-gem install fluent-plugin-kafka -v 0.5.7

USER fluent

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="3-fluentd配置文件-fluent-udp-to-kafkaconf">3. fluentd配置文件 fluent-udp-to-kafka.conf</h3>
<pre><code>
&lt;source&gt;
  @type udp
  @label @mainstream
  tag udplog # required
  &lt;parse&gt;
    @type regexp
    expression /^(?&lt;message&gt;.*)$/
  &lt;/parse&gt;
  port 12301               # optional. 5160 by default
  bind 0.0.0.0             # optional. 0.0.0.0 by default
  message_length_limit 1MB # optional. 4096 bytes by default
&lt;/source&gt;

&lt;filter **&gt;
  @type stdout
&lt;/filter&gt;

&lt;label @mainstream&gt;
  &lt;match **&gt;
    @type kafka2

    # list of seed brokers，这个地方可以通过逗号写多个地址比如 host1:9092,host2:9092
    brokers 192.168.xxx.142:9092
    use_event_time true

    # buffer settings
    &lt;buffer topic&gt;
    @type file
    # 下面的path可能需要手动创建目录，并给写入权限，我直接给了777
    path /fluentd/log/td-agent/buffer/td
    flush_interval 3s
    &lt;/buffer&gt;

    # data type settings
    &lt;format&gt;
    @type json
    &lt;/format&gt;

    # kafka中创建的topic
    topic_key udplog
    # 默认topic
    default_topic udplog
    get_kafka_client_log true
    # producer settings
    required_acks -1
    compression_codec gzip
  &lt;/match&gt;
&lt;/label&gt;
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="4-k8s部署-开启input-udp-12301接收数据-并output给kafka">4. k8s部署 开启input udp 12301接收数据, 并output给kafka</h3>
<pre><code>k8s-fluentd-udplog-udp-to-kafka.yml
---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    elastic-app: fluentd-udplog
  name: fluentd-udplog
  namespace: ns-elastic7
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      elastic-app: fluentd-udplog
  template:
    metadata:
      labels:
        elastic-app: fluentd-udplog
    spec:
      containers:
        - name: fluentd-udplog
          image: hub.xxx.com/bq/fluentd:v1.9.1-1.0-kafka-0.10
          ports:
            - containerPort: 12301
              name: port12301
              protocol: UDP
          resources:
            requests:
              cpu: &quot;50m&quot;
            limits:
              cpu: &quot;500m&quot;
          volumeMounts:
            - name: fluentd-udplog-logs
              mountPath: /fluentd/log
            - name: fluentd-udplog-cfg
              mountPath: /fluentd/etc/fluent.conf
      volumes:
        - name: fluentd-udplog-logs
          hostPath:
            path: /data/k8s-container/elk-7.2.0/fluentd/logs/
        - name: fluentd-udplog-cfg
          hostPath:
            path: /data/k8s-container/elk-7.2.0/fluentd/fluent-udp-to-kafka.conf

---
kind: Service
apiVersion: v1
metadata:
 labels:
   elastic-app: fluentd-udplog
 name: fluentd-udplog-service-nodeport
 namespace: ns-elastic7
spec:
 type: NodePort
 ports:
   - name: port12301
     port: 12301
     targetPort: 12301
     nodePort: 12301
     protocol: UDP
 selector:
   elastic-app: fluentd-udplog
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="5-修改logstash的配置">5. 修改logstash的配置</h3>
<pre><code>config/pipeline/logstash.conf
input {
 kafka{
  type =&gt;&quot;php-mysql-dev-252-log&quot;
  bootstrap_servers =&gt; &quot;192.168.xxx.142:9092&quot;
  topics =&gt; &quot;php-mysql-dev-0-slowlog&quot;
 }

        kafka{
                type =&gt;&quot;udplog&quot;
                bootstrap_servers =&gt; &quot;192.168.xxx.142:9092&quot;
                topics =&gt; &quot;udplog&quot;
        }

}



filter{

###############
    if [type] == &quot;php-mysql-dev-252-log&quot; {
 	json {
  		source =&gt; &quot;message&quot;
 	}

 	mutate {
     		gsub =&gt; [ &quot;message&quot;, &quot;\n&quot;, &quot;&quot; ]
  	}
 	grok {
  		match =&gt; [&quot;message&quot;,&quot;(?m)^# User@Host: %{USER:user}\[[^\]]+\] @  \[%{IP:clientip}\]# Query_time: %{NUMBER:query_time:float}\s+Lock_time: %{NUMBER:lock_time:float}\s+Rows_sent: %{NUMBER:rows_sent:int}\s+Rows_examined: %{NUMBER:rows_examined:int}(?&lt;dbnameall&gt;.*)SET\s+timestamp=%{NUMBER:timestamp_mysql:int};(?&lt;query&gt;.*)&quot;]
 	}
 	date {
  		match =&gt; [&quot;timestamp_mysql&quot;, &quot;UNIX&quot;]
  		target =&gt; &quot;@timestamp&quot;
 	}
    }
######
    if [type] == &quot;udplog&quot; {
 	grok {
          match =&gt; {
            &quot;message&quot; =&gt; &quot;&lt;%{NUMBER🆔int}&gt;%{NUMBER:id_N:int} (?&lt;http_time&gt;\S+) %{DATA:hostname} %{DATA:ident} %{NUMBER:pid:int} - - %{DATA:logLevel}: X-Request-Id:%{DATA:Request_Id} module:%{DATA:moduleName} act:%{DATA:Act} sql:(?&lt;sql&gt;(.*)) cost:%{NUMBER:sqlDuring:int}ms \[\] \[\]&quot;
                }
     	}
       	grok {
         match =&gt; {&quot;sql&quot; =&gt;&quot; %{DATA:operation} &quot;}
       	}

   	if &quot;_grokparsefailure&quot; not in [tags] {
      	 if [sqlDuring] &lt; 5 {
          drop {}
        }
   }
   else {
    	 drop {}
   	}
    }

}

output {
###
   if [type] == &quot;php-mysql-dev-252-log&quot; {
      elasticsearch {
        hosts =&gt;  [ &quot;http://192.168.xxx.120:19230&quot; ]
        index =&gt; &quot;php-mysql-dev-252-%{+YYYY.MM.dd}&quot;
      }
   }
###
    if [type] == &quot;udplog&quot; {
      elasticsearch {
        hosts =&gt;  [ &quot;http://192.168.xxx.120:19230&quot; ]
        index =&gt; &quot;udplog-%{+YYYY.MM.dd}&quot;
      }
    }
}

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="6-部署k8s-logstash-分析后写入到es中-k8s-logstash-720-kafka-to-esyml">6. 部署k8s logstash 分析后写入到es中 k8s-logstash-7.2.0-kafka-to-es.yml</h3>
<pre><code>---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    elastic-app:  slowlog-logstash-kafka-to-es
  name: slowlog-logstash-kafka-to-es
  namespace: ns-elastic7
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      elastic-app: slowlog-logstash-kafka-to-es
  template:
    metadata:
      labels:
        elastic-app: slowlog-logstash-kafka-to-es
    spec:
      containers:
        - name: slowlog-logstash-kafka-to-es
          image: hub.xxx.com/bq/logstash:7.2.0
          resources:
            requests:
              cpu: &quot;50m&quot;
            limits:
              cpu: &quot;500m&quot;
          volumeMounts:
            - name: slowlog-toes-cfg
              mountPath: /usr/share/logstash/config
      volumes:
        - name: slowlog-toes-cfg
          hostPath:
            path: /data/k8s-container/elk-7.2.0/mysqlslowlog-logstash-7.2.0/config
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

</code></pre>]]></content>
		</item>
		
		<item>
			<title>k8s的yaml配置名词解释(模板)</title>
			<link>https://www.ngirl.xyz/posts/43-k8s%E7%9A%84yaml%E9%85%8D%E7%BD%AE%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A-%E6%A8%A1%E6%9D%BF/</link>
			<pubDate>Tue, 31 Mar 2020 17:21:23 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/43-k8s%E7%9A%84yaml%E9%85%8D%E7%BD%AE%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A-%E6%A8%A1%E6%9D%BF/</guid>
			<description>针对Deployment的yaml配置解释说明
   原文: K8s Deployment YAML 名词解释
 Deployment API 版本对照表 Kubernetes 版本 Deployment 版本 v1.5-v1.15 extensions/v1beta1 v1.7-v1.15 apps/v1beta1 v1.8-v1.15 apps/v1beta2 v1.9+ apps/v1 Deployment yaml 名词解释： apiVersion:apps/v1 # 指定api版本，此值必须在kubectl api-versions中 kind:Deployment # 指定创建资源的角色/类型 metadata:# 资源的元数据/属性name:demo # 资源的名字，在同一个namespace中必须唯一namespace:default# 部署在哪个namespace中labels:# 设定资源的标签app:demoversion:stablespec:# 资源规范字段replicas:1# 声明副本数目revisionHistoryLimit:3# 保留历史版本selector:# 选择器matchLabels:# 匹配标签app:demoversion:stablestrategy:# 策略rollingUpdate:# 滚动更新maxSurge:30%# 最大额外可以存在的副本数，可以为百分比，也可以为整数maxUnavailable:30%# 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数type:RollingUpdate# 滚动更新策略template:# 模版metadata:# 资源的元数据/属性annotations:# 自定义注解列表sidecar.istio.io/inject:&amp;#34;false&amp;#34;# 自定义注解名字labels:# 设定资源的标签app:demoversion:stablespec:# 资源规范字段containers:- name:demo# 容器的名字 image:demo:v1# 容器使用的镜像地址 imagePullPolicy:IfNotPresent# 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent# Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取resources:# 资源管理limits:# 最大使用cpu:300m# CPU，1核心 = 1000mmemory:500Mi# 内存，1G = 1000Mirequests:# 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行cpu:100mmemory:100MilivenessProbe:# pod 内部健康检查的设置httpGet:# 通过httpget检查健康，返回200-399之间，则认为容器正常path:/healthCheck# URI地址port:8080# 端口scheme:HTTP# 协议# host: 127.</description>
			<content type="html"><![CDATA[<p>针对Deployment的yaml配置解释说明</p>
<!--more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<blockquote>
<p>原文: <a href="https://zhuanlan.zhihu.com/p/100237194">K8s Deployment YAML 名词解释</a></p>
</blockquote>
<h3 id="deployment-api-版本对照表">Deployment API 版本对照表</h3>
<pre><code>Kubernetes 版本 Deployment 版本

v1.5-v1.15 extensions/v1beta1
v1.7-v1.15 apps/v1beta1
v1.8-v1.15 apps/v1beta2
v1.9+ apps/v1
</code></pre><h3 id="deployment-yaml-名词解释">Deployment yaml 名词解释：</h3>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1 </span><span class="w"> </span><span class="c"># 指定api版本，此值必须在kubectl api-versions中  </span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment </span><span class="w"> </span><span class="c"># 指定创建资源的角色/类型   </span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">  </span><span class="c"># 资源的元数据/属性</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">demo </span><span class="w"> </span><span class="c"># 资源的名字，在同一个namespace中必须唯一</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w"> </span><span class="c"># 部署在哪个namespace中</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">  </span><span class="c"># 设定资源的标签</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w">
</span><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">stable</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w"> </span><span class="c"># 资源规范字段</span><span class="w">
</span><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c"># 声明副本数目</span><span class="w">
</span><span class="w">  </span><span class="nt">revisionHistoryLimit</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="c"># 保留历史版本</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w"> </span><span class="c"># 选择器</span><span class="w">
</span><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w"> </span><span class="c"># 匹配标签</span><span class="w">
</span><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w">
</span><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">stable</span><span class="w">
</span><span class="w">  </span><span class="nt">strategy</span><span class="p">:</span><span class="w"> </span><span class="c"># 策略</span><span class="w">
</span><span class="w">    </span><span class="nt">rollingUpdate</span><span class="p">:</span><span class="w"> </span><span class="c"># 滚动更新</span><span class="w">
</span><span class="w">      </span><span class="nt">maxSurge</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="l">%</span><span class="w"> </span><span class="c"># 最大额外可以存在的副本数，可以为百分比，也可以为整数</span><span class="w">
</span><span class="w">      </span><span class="nt">maxUnavailable</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="l">%</span><span class="w"> </span><span class="c"># 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span><span class="w">
</span><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RollingUpdate</span><span class="w"> </span><span class="c"># 滚动更新策略</span><span class="w">
</span><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w"> </span><span class="c"># 模版</span><span class="w">
</span><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w"> </span><span class="c"># 资源的元数据/属性</span><span class="w">
</span><span class="w">      </span><span class="nt">annotations</span><span class="p">:</span><span class="w"> </span><span class="c"># 自定义注解列表</span><span class="w">
</span><span class="w">        </span><span class="nt">sidecar.istio.io/inject</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w"> </span><span class="c"># 自定义注解名字</span><span class="w">
</span><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w"> </span><span class="c"># 设定资源的标签</span><span class="w">
</span><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w">
</span><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">stable</span><span class="w">
</span><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w"> </span><span class="c"># 资源规范字段</span><span class="w">
</span><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w"> </span><span class="c"># 容器的名字   </span><span class="w">
</span><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">demo:v1</span><span class="w"> </span><span class="c"># 容器使用的镜像地址   </span><span class="w">
</span><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w"> </span><span class="c"># 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent</span><span class="w">
</span><span class="w">                                      </span><span class="c"># Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取</span><span class="w">
</span><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="c"># 资源管理</span><span class="w">
</span><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w"> </span><span class="c"># 最大使用</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">300m</span><span class="w"> </span><span class="c"># CPU，1核心 = 1000m</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">500Mi</span><span class="w"> </span><span class="c"># 内存，1G = 1000Mi</span><span class="w">
</span><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">  </span><span class="c"># 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span><span class="w">
</span><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">100m</span><span class="w">
</span><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">100Mi</span><span class="w">
</span><span class="w">        </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w"> </span><span class="c"># pod 内部健康检查的设置</span><span class="w">
</span><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w"> </span><span class="c"># 通过httpget检查健康，返回200-399之间，则认为容器正常</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/healthCheck</span><span class="w"> </span><span class="c"># URI地址</span><span class="w">
</span><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w"> </span><span class="c"># 端口</span><span class="w">
</span><span class="w">            </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="l">HTTP</span><span class="w"> </span><span class="c"># 协议</span><span class="w">
</span><span class="w">            </span><span class="c"># host: 127.0.0.1 # 主机地址</span><span class="w">
</span><span class="w">          </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w"> </span><span class="c"># 表明第一次检测在容器启动后多长时间后开始</span><span class="w">
</span><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w"> </span><span class="c"># 检测的超时时间</span><span class="w">
</span><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w"> </span><span class="c"># 检查间隔时间</span><span class="w">
</span><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c"># 成功门槛</span><span class="w">
</span><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w"> </span><span class="c"># 失败门槛，连接失败5次，pod杀掉，重启一个新的pod</span><span class="w">
</span><span class="w">        </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w"> </span><span class="c"># Pod 准备服务健康检查设置</span><span class="w">
</span><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/healthCheck</span><span class="w">
</span><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span><span class="w">            </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="l">HTTP</span><span class="w">
</span><span class="w">          </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="w">       </span><span class="c">#也可以用这种方法   </span><span class="w">
</span><span class="w">       </span><span class="c">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常   </span><span class="w">
</span><span class="w">       </span><span class="c">#  command:   </span><span class="w">
</span><span class="w">       </span><span class="c">#    - cat   </span><span class="w">
</span><span class="w">       </span><span class="c">#    - /tmp/health   </span><span class="w">
</span><span class="w">       </span><span class="c">#也可以用这种方法   </span><span class="w">
</span><span class="w">       </span><span class="c">#tcpSocket: # 通过tcpSocket检查健康  </span><span class="w">
</span><span class="w">       </span><span class="c">#  port: number</span><span class="w">
</span><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w"> </span><span class="c"># 名称</span><span class="w">
</span><span class="w">            </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w"> </span><span class="c"># 容器开发对外的端口</span><span class="w">
</span><span class="w">            </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w"> </span><span class="c"># 协议</span><span class="w">
</span><span class="w">      </span><span class="nt">imagePullSecrets</span><span class="p">:</span><span class="w"> </span><span class="c"># 镜像仓库拉取密钥</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">harbor-certification</span><span class="w">
</span><span class="w">      </span><span class="nt">affinity</span><span class="p">:</span><span class="w"> </span><span class="c"># 亲和性调试</span><span class="w">
</span><span class="w">        </span><span class="nt">nodeAffinity</span><span class="p">:</span><span class="w"> </span><span class="c"># 节点亲和力</span><span class="w">
</span><span class="w">          </span><span class="nt">requiredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w"> </span><span class="c"># pod 必须部署到满足条件的节点上</span><span class="w">
</span><span class="w">            </span><span class="nt">nodeSelectorTerms</span><span class="p">:</span><span class="w"> </span><span class="c"># 节点满足任何一个条件就可以</span><span class="w">
</span><span class="w">            </span>- <span class="nt">matchExpressions</span><span class="p">:</span><span class="w"> </span><span class="c"># 有多个选项，则只有同时满足这些逻辑选项的节点才能运行 pod</span><span class="w">
</span><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">beta.kubernetes.io/arch</span><span class="w">
</span><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span><span class="w">                </span>- <span class="l">amd64</span><span class="w">
</span></code></pre></div><h3 id="service-yaml-名词解释">Service yaml 名词解释：</h3>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w"> </span><span class="c"># 指定api版本，此值必须在kubectl api-versions中 </span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w"> </span><span class="c"># 指定创建资源的角色/类型 </span><span class="w">
</span><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w"> </span><span class="c"># 资源的元数据/属性</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w"> </span><span class="c"># 资源的名字，在同一个namespace中必须唯一</span><span class="w">
</span><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w"> </span><span class="c"># 部署在哪个namespace中</span><span class="w">
</span><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w"> </span><span class="c"># 设定资源的标签</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w">
</span><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w"> </span><span class="c"># 资源规范字段</span><span class="w">
</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w"> </span><span class="c"># ClusterIP 类型</span><span class="w">
</span><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w"> </span><span class="c"># service 端口</span><span class="w">
</span><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w"> </span><span class="c"># 容器暴露的端口</span><span class="w">
</span><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w"> </span><span class="c"># 协议</span><span class="w">
</span><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w"> </span><span class="c"># 端口名称</span><span class="w">
</span><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w"> </span><span class="c"># 选择器</span><span class="w">
</span><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w">
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>kubeadm安装高可用k8s集群</title>
			<link>https://www.ngirl.xyz/posts/42-kubeadm%E5%AE%89%E8%A3%85%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/</link>
			<pubDate>Tue, 24 Mar 2020 11:10:41 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/42-kubeadm%E5%AE%89%E8%A3%85%E9%AB%98%E5%8F%AF%E7%94%A8k8s%E9%9B%86%E7%BE%A4/</guid>
			<description>简单记录kubeadm方式安装k8s1.16.4高可用集群 haproxy 用于代理三台master负载均衡, VIP:16443 -&amp;gt; master0x:6443 keepalived 用于配置VIP提供对外服务, 外部访问 VIP:16443 如果master01宕机,VIP漂移到master02, 这样对外集群正常访问,haproxy会代理到master02,03工作
haproxy负载均衡主要是让集群更健壮,三台master同时提供服务,keepalived 则防止单机故障,热备
 Centos7.6部署k8s v1.16.4高可用集群(主备模式) 使用kubeadm搭建高可用k8s v1.16.3集群(keepalived+haproxy)
   一、 安装准备  1.1 主机名  192.168.53.106 master01.k8s.io 192.168.53.107 master02.k8s.io 192.168.53.108 master03.k8s.io 192.168.53.137 master.k8s.io  1.2 同步时间, 设置时区  * * * * * /usr/sbin/ntpdate time.nist.gov timedatectl set-timezone Asia/Shanghai 或者 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  1.3 关闭SElinux  setenforce 0 sed -i &amp;quot;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;quot; /etc/sysconfig/selinux sed -i &amp;quot;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;quot; /etc/selinux/config sed -i &amp;quot;s/^SELINUX=permissive/SELINUX=disabled/g&amp;quot; /etc/sysconfig/selinux sed -i &amp;quot;s/^SELINUX=permissive/SELINUX=disabled/g&amp;quot; /etc/selinux/config  1.</description>
			<content type="html"><![CDATA[<p>简单记录kubeadm方式安装k8s1.16.4高可用集群
haproxy 用于代理三台master负载均衡, VIP:16443 -&gt; master0x:6443
keepalived 用于配置VIP提供对外服务, 外部访问 VIP:16443
如果master01宕机,VIP漂移到master02, 这样对外集群正常访问,haproxy会代理到master02,03工作</p>
<p>haproxy负载均衡主要是让集群更健壮,三台master同时提供服务,keepalived 则防止单机故障,热备</p>
<p><img src="//zhangzw001.github.io/images/42/01.png" alt=""></p>
<!--more -->
<blockquote>
<p><a href="https://www.kubernetes.org.cn/6632.html">Centos7.6部署k8s v1.16.4高可用集群(主备模式)</a>
<a href="https://www.cnblogs.com/ssgeek/p/11942062.html">使用kubeadm搭建高可用k8s v1.16.3集群(keepalived+haproxy)</a></p>
</blockquote>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="一-安装准备">一、 安装准备</h3>
<ul>
<li>1.1 主机名</li>
</ul>
<pre><code>192.168.53.106 master01.k8s.io
192.168.53.107 master02.k8s.io
192.168.53.108 master03.k8s.io
192.168.53.137 master.k8s.io
</code></pre><ul>
<li>1.2 同步时间, 设置时区</li>
</ul>
<pre><code>* * * * * /usr/sbin/ntpdate time.nist.gov

timedatectl set-timezone Asia/Shanghai
或者
ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</code></pre><ul>
<li>1.3 关闭SElinux</li>
</ul>
<pre><code>setenforce  0
sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/sysconfig/selinux
sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config
sed -i &quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot; /etc/sysconfig/selinux
sed -i &quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot; /etc/selinux/config  
</code></pre><ul>
<li>1.4 关闭swap(否则kubeadm init或join会报错)</li>
</ul>
<pre><code>&gt; swapoff -a &amp;&amp; sysctl -w vm.swappiness=0
vm.swappiness = 0
或 swapoff -a

#/etc/fstab也要注解掉SWAP挂载。
sed -i.$(date +%F).bak '/swap/s/^/#/' /etc/fstab
#sed -i 's/.*swap.*/#&amp;/' /etc/fstab

</code></pre><ul>
<li>1.5 配置系统内核参数</li>
</ul>
<pre><code>使流过网桥的流量也进入iptables/netfilter框架中，在/etc/sysctl.conf中添加以下配置
cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sysctl -p /etc/sysctl.d/k8s.conf
</code></pre><blockquote>
<p>如果出现报错</p>
</blockquote>
<pre><code>sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-iptables: No such file or directory
sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-ip6tables: No such file or directory
</code></pre><blockquote>
<p>报错解决:</p>
</blockquote>
<pre><code># 执行以下命令
1 modprobe br_netfilter
2 ls /proc/sys/net/bridge
3 sysctl -p /etc/sysctl.d/k8s.conf
</code></pre><ul>
<li>1.6 设置k8s源</li>
</ul>
<pre><code>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF

yum clean all
yum makecache -y
</code></pre><pre><code>[] 中括号中的是repository id，唯一，用来标识不同仓库
name 仓库名称，自定义
baseurl 仓库地址
enable 是否启用该仓库，默认为1表示启用
gpgcheck 是否验证从该仓库获得程序包的合法性，1为验证
repo_gpgcheck 是否验证元数据的合法性 元数据就是程序包列表，1为验证
gpgkey=URL 数字签名的公钥文件所在位置，如果gpgcheck值为1，此处就需要指定gpgkey文件的位置，如果gpgcheck值为0就不需要此项了
</code></pre><ul>
<li>
<p>1.7 免密登录配置</p>
<p>略</p>
</li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="二-docker版本安装">二、 docker版本安装</h3>
<ul>
<li>2.1 配置源</li>
</ul>
<pre><code>yum install -y yum-utils device-mapper-persistent-data lvm2 bash-completion
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum install docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io -y

# 高版本降级
yum downgrade --setopt=obsoletes=0 -y docker-ce-18.09.9 docker-ce-cli-18.09.9
</code></pre><ul>
<li>2.2 配置阿里云镜像加速器</li>
</ul>
<blockquote>
<p>登陆地址为：https://cr.console.aliyun.com ,未注册的可以先注册阿里云账户</p>
</blockquote>
<pre><code>mkdir -p /etc/docker
tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://0aqwccdy.mirror.aliyuncs.com&quot;]
}
EOF
</code></pre><ul>
<li>2.3 启动docker</li>
</ul>
<pre><code>systemctl restart docker
systemctl enable docker
</code></pre><ul>
<li>2.4 修改Cgroup Driver</li>
</ul>
<blockquote>
<p>修改daemon.json，新增‘”exec-opts”: [“native.cgroupdriver=systemd”’</p>
</blockquote>
<pre><code>cat /etc/docker/daemon.json
{
  &quot;registry-mirrors&quot;: [&quot;https://0aqwccdy.mirror.aliyuncs.com&quot;],
  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]
}
</code></pre><blockquote>
<p>重新加载docker</p>
</blockquote>
<pre><code>systemctl restart docker
systemctl enable docker
</code></pre><blockquote>
<p>修改cgroupdriver是为了消除告警：</p>
</blockquote>
<pre><code>[WARNING IsDockerSystemdCheck]: detected “cgroupfs” as the Docker cgroup driver. The recommended driver is “systemd”. Please follow the guide at https://kubernetes.io/docs/setup/cri/
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="三-keepalived安装">三、 keepalived安装</h3>
<ul>
<li>3.1 安装</li>
</ul>
<pre><code>yum -y install keepalived
</code></pre><ul>
<li>3.2 master01.k8s.io上配置</li>
</ul>
<pre><code>tee /etc/keepalived/keepalived.conf &lt;&lt;- 'EOF'
! Configuration File for keepalived
global_defs {
   router_id master01.k8s.io
}

vrrp_script check_haproxy {
    script &quot;killall -0 haproxy&quot;
    interval 3
    weight -2
    fall 10
    rise 2
}

vrrp_instance VI_1 {
    state MASTER
    interface enp0s3
    virtual_router_id 51
    priority 250
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.53.137
    }
    track_script {
        check_haproxy
    }
}
EOF
</code></pre><ul>
<li>3.3 master02.k8s.io,master03.k8s.io上配置</li>
</ul>
<pre><code>tee /etc/keepalived/keepalived.conf &lt;&lt;- 'EOF'
! Configuration File for keepalived
global_defs {
   router_id master02.k8s.io
}

vrrp_script check_haproxy {
    script &quot;killall -0 haproxy&quot;
    interval 3
    weight -2
    fall 10
    rise 2
}

vrrp_instance VI_1 {
    state BACKUP
    interface enp0s3
    virtual_router_id 51
    priority 200
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
       192.168.53.137
    }
    track_script {
        check_haproxy
    }
}
EOF


tee /etc/keepalived/keepalived.conf &lt;&lt;- 'EOF'
! Configuration File for keepalived
global_defs {
   router_id master03.k8s.io
}

vrrp_script check_haproxy {
    script &quot;killall -0 haproxy&quot;
    interval 3
    weight -2
    fall 10
    rise 2
}

vrrp_instance VI_1 {
    state BACKUP
    interface enp0s3
    virtual_router_id 51
    priority 150
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.53.137
    }
    track_script {
        check_haproxy
    }
}
EOF
</code></pre><ul>
<li>3.4 master02.k8s.io,master03.k8s.io上启动keepalived</li>
</ul>
<pre><code>service keepalived start
systemctl enable keepalived
</code></pre><ul>
<li>3.5 测试</li>
</ul>
<pre><code># 首先 ip a查看ip否则绑定成功

# ping 192.168.53.137 是否正常

# 在master01.k8s.io上 停止服务 service keepalived stop

# 在master02.k8s.io或master03.k8s.io上查看ip a是否存在192.168.53.137, 检查ping 192.168.53.137 是否正常
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="四-haproxy安装">四、 haproxy安装</h3>
<ul>
<li>4.1 安装</li>
</ul>
<pre><code>yum install -y haproxy
</code></pre><ul>
<li>4.2 配置
<blockquote>
<p>三台master节点的配置均相同，配置中声明了后端代理的三个master节点服务器，指定了haproxy运行的端口为16443等，因此16443端口为集群的入口，其他的配置不做赘述。</p>
</blockquote>
</li>
</ul>
<pre><code>tee  /etc/haproxy/haproxy.cfg &lt;&lt;- 'EOF'
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------  
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
#---------------------------------------------------------------------
# kubernetes apiserver frontend which proxys to the backends
#---------------------------------------------------------------------
frontend kubernetes-apiserver
    mode                 tcp
    bind                 *:16443
    option               tcplog
    default_backend      kubernetes-apiserver    
#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend kubernetes-apiserver
    mode        tcp
    balance     roundrobin
    server      master01.k8s.io   192.168.53.106:6443 check
    server      master02.k8s.io   192.168.53.107:6443 check
    server      master03.k8s.io   192.168.53.108:6443 check
#---------------------------------------------------------------------
# collection haproxy statistics message
#---------------------------------------------------------------------
listen stats
    bind                 *:1080
    stats auth           admin:awesomePassword
    stats refresh        5s
    stats realm          HAProxy\ Statistics
    stats uri            /admin?stats
EOF
</code></pre><ul>
<li>4.3 启动</li>
</ul>
<pre><code>systemctl enable haproxy
systemctl start haproxy
systemctl status haproxy
netstat -lnptu|grep haproxy
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="五-k8s安装">五、 k8s安装</h3>
<ul>
<li>5.1 版本查看</li>
</ul>
<pre><code>yum list kubelet --showduplicates | sort -r
</code></pre><blockquote>
<p>本文安装的kubelet版本是1.16.4，该版本支持的docker版本为1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09。</p>
</blockquote>
<ul>
<li>5.2 安装kubelet、kubeadm和kubectl</li>
</ul>
<pre><code>yum install -y kubelet-1.16.4 kubeadm-1.16.4 kubectl-1.16.4
</code></pre><blockquote>
<p>kubelet 运行在集群所有节点上，用于启动Pod和容器等对象的工具
kubeadm 用于初始化集群，启动集群的命令工具
kubectl 用于和集群通信的命令行，通过kubectl可以部署和管理应用，查看各种资源，创建、删除和更新各种组件</p>
</blockquote>
<ul>
<li>5.3 启动kubelet</li>
</ul>
<pre><code>systemctl enable kubelet
systemctl start kubelet
</code></pre><ul>
<li>5.4 kubectl命令补全</li>
</ul>
<pre><code># bash
echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bash_profile
source ~/.bash_profile
# zsh
echo &quot;source &lt;(kubectl completion zsh)&quot; &gt;&gt; ~/.zshrc
source ~/.zshrc

</code></pre><ul>
<li>5.5 下载镜像
<blockquote>
<p>外网的慢, 从阿里云下载后打个官方tag即可</p>
</blockquote>
</li>
</ul>
<pre><code>tee /root/image.sh &lt;&lt;- 'EOF'
#!/bin/bash
#url=registry.cn-hangzhou.aliyuncs.com/loong576
url=registry.aliyuncs.com/google_containers
version=v1.16.4
images=(`kubeadm config images list --kubernetes-version=$version|awk -F '/' '{print $2}'`)
for imagename in ${images[@]} ; do
  docker pull $url/$imagename
  docker tag $url/$imagename k8s.gcr.io/$imagename
  docker rmi -f $url/$imagename
done
EOF

# 下载
sh  /root/image.sh

# 验证
docker images|grep 1.16.4
k8s.gcr.io/kube-apiserver                  v1.16.4              3722a80984a0        3 months ago        217MB
k8s.gcr.io/kube-controller-manager         v1.16.4              fb4cca6b4e4c        3 months ago        163MB
k8s.gcr.io/kube-proxy                      v1.16.4              091df896d78f        3 months ago        86.1MB
k8s.gcr.io/kube-scheduler                  v1.16.4              2984964036c8        3 months ago        87.3MB
k8s.gcr.io/metrics-server-amd64            v0.3.5               abf04c0f54ff        6 months ago        39.9MB
k8s.gcr.io/etcd                            3.3.15-0             b2756210eeab        6 months ago        247MB
k8s.gcr.io/coredns                         1.6.2                bf261d157914        7 months ago        44.1MB
k8s.gcr.io/pause                           3.1                  da86e6ba6ca1        2 years ago         742kB
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="六初始化master">六、初始化master</h3>
<ul>
<li>
<p>6.1 kubeadm.1.16.4.conf</p>
<blockquote>
<p>在具有vip的master上操作，这里为master01.k8s.io</p>
</blockquote>
</li>
</ul>
<pre><code>tee /data/k8s-config/kubeadm.1.16.4.conf &lt;&lt;- 'EOF'
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: v1.16.4
apiServer:
  certSANs:    #填写所有kube-apiserver节点的hostname、IP、VIP
  - master01.k8s.io
  - master02.k8s.io
  - master03.k8s.io
  - master.k8s.io
  - dk-node1
  - 192.168.53.106
  - 192.168.53.107
  - 192.168.53.108
  - 192.168.53.137
  - 192.168.0.136
  - 127.0.0.1
controlPlaneEndpoint: &quot;master.k8s.io:16443&quot;
networking:
  podSubnet: &quot;10.244.0.0/16&quot;
EOF
</code></pre><ul>
<li>6.2 master初始化</li>
</ul>
<pre><code>kubeadm init --config=kubeadm.1.16.4.conf
</code></pre><pre><code>You can now join any number of control-plane nodes by copying certificate authorities
and service account keys on each node and then running the following as root:

  kubeadm join master.k8s.io:16443 --token ynaob5.49rz8ofxavp6hzes \
    --discovery-token-ca-cert-hash sha256:6e7859f3b9d8ede08e2202d3cd63c42f56c7d2503dc8c6fb9dc5f050b5c17bac \
    --control-plane

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join master.k8s.io:16443 --token ynaob5.49rz8ofxavp6hzes \
    --discovery-token-ca-cert-hash sha256:6e7859f3b9d8ede08e2202d3cd63c42f56c7d2503dc8c6fb9dc5f050b5c17bac
</code></pre><ul>
<li>6.3 加载环境变量</li>
</ul>
<pre><code>echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.zshrc
source ~/.zshrc
</code></pre><p>本文所有操作都在root用户下执行，若为非root用户，则执行如下操作：</p>
<pre><code>mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
</code></pre><ul>
<li>6.4 安装flannel网络</li>
</ul>
<pre><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml

podsecuritypolicy.policy/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.apps/kube-flannel-ds-amd64 created
daemonset.apps/kube-flannel-ds-arm64 created
daemonset.apps/kube-flannel-ds-arm created
daemonset.apps/kube-flannel-ds-ppc64le created
daemonset.apps/kube-flannel-ds-s390x created
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="七control-plane节点加入集群">七、control plane节点加入集群</h3>
<ul>
<li>
<p>7.1 证书分发</p>
<blockquote>
<p>在master01.k8s.io上运行脚本cert-main-master.sh，将证书分发至master02.k8s.io</p>
</blockquote>
</li>
</ul>
<pre><code>tee /root/cert-main-master.sh  &lt;&lt;- 'EOF'
USER=root # customizable
CONTROL_PLANE_IPS=&quot;192.168.53.107 192.168.53.108&quot;
CONTROL_PLANE_pkidir=&quot;/etc/kubernetes/pki&quot;

for host in ${CONTROL_PLANE_IPS}; do
    ssh root@${host} &quot;mkdir -p ${CONTROL_PLANE_pkidir}/etcd&quot;
    scp /etc/kubernetes/pki/ca.crt &quot;${USER}&quot;@$host:${CONTROL_PLANE_pkidir}/
    scp /etc/kubernetes/pki/ca.key &quot;${USER}&quot;@$host:${CONTROL_PLANE_pkidir}/
    scp /etc/kubernetes/pki/sa.key &quot;${USER}&quot;@$host:${CONTROL_PLANE_pkidir}/
    scp /etc/kubernetes/pki/sa.pub &quot;${USER}&quot;@$host:${CONTROL_PLANE_pkidir}/
    scp /etc/kubernetes/pki/front-proxy-ca.crt &quot;${USER}&quot;@$host:${CONTROL_PLANE_pkidir}/
    scp /etc/kubernetes/pki/front-proxy-ca.key &quot;${USER}&quot;@$host:${CONTROL_PLANE_pkidir}/
    scp /etc/kubernetes/pki/etcd/ca.crt &quot;${USER}&quot;@$host:${CONTROL_PLANE_pkidir}/etcd/ca.crt
    # Quote this line if you are using external etcd
    scp /etc/kubernetes/pki/etcd/ca.key &quot;${USER}&quot;@$host:${CONTROL_PLANE_pkidir}/etcd/ca.key
done
EOF

sh /root/cert-main-master.sh
</code></pre><ul>
<li>7.2 master02.k8s.io,master03.k8s.io加入集群</li>
</ul>
<pre><code>  kubeadm join master.k8s.io:16443 --token ynaob5.49rz8ofxavp6hzes \
    --discovery-token-ca-cert-hash sha256:6e7859f3b9d8ede08e2202d3cd63c42f56c7d2503dc8c6fb9dc5f050b5c17bac \
    --control-plane
</code></pre><ul>
<li>6.3 master02.k8s.io,master03.k8s.io加载环境变量</li>
</ul>
<pre><code>echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.zshrc
source ~/.zshrc
</code></pre><p>本文所有操作都在root用户下执行，若为非root用户，则执行如下操作：</p>
<pre><code>mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
</code></pre><ul>
<li>7.4 集群节点查看</li>
</ul>
<pre><code>
# kubectl get nodes
NAME              STATUS   ROLES    AGE   VERSION
master01.k8s.io   Ready    master   6m    v1.16.4
master02.k8s.io   Ready    master   99s   v1.16.4
master03.k8s.io   Ready    master   46s   v1.16.4

# kubectl get pod -n kube-system
NAME                                      READY   STATUS    RESTARTS   AGE
coredns-5644d7b6d9-fz77l                  1/1     Running   0          4h
coredns-5644d7b6d9-qvh6b                  1/1     Running   0          4h
etcd-master01.k8s.io                      1/1     Running   1          4h15m
etcd-master02.k8s.io                      1/1     Running   0          4h12m
etcd-master03.k8s.io                      1/1     Running   0          4h11m
kube-apiserver-master01.k8s.io            1/1     Running   1          4h15m
kube-apiserver-master02.k8s.io            1/1     Running   0          4h12m
kube-apiserver-master03.k8s.io            1/1     Running   0          4h10m
kube-controller-manager-master01.k8s.io   1/1     Running   2          4h15m
kube-controller-manager-master02.k8s.io   1/1     Running   1          4h12m
kube-controller-manager-master03.k8s.io   1/1     Running   0          4h10m
kube-flannel-ds-amd64-84b6w               1/1     Running   1          4h15m
kube-flannel-ds-amd64-df99l               1/1     Running   0          4h11m
kube-flannel-ds-amd64-jzt62               1/1     Running   1          4h12m
kube-flannel-ds-amd64-lwd8m               1/1     Running   0          12m
kube-proxy-fgcmg                          1/1     Running   0          4h11m
kube-proxy-mss74                          1/1     Running   0          12m
kube-proxy-r9rz2                          1/1     Running   1          4h16m
kube-proxy-s47gj                          1/1     Running   0          4h12m
kube-scheduler-master01.k8s.io            1/1     Running   2          4h15m
kube-scheduler-master02.k8s.io            1/1     Running   1          4h12m
kube-scheduler-master03.k8s.io            1/1     Running   0          4h10m


# kubectl get cs
NAME                 AGE
scheduler            &lt;unknown&gt;
controller-manager   &lt;unknown&gt;
etcd-0               &lt;unknown&gt;
</code></pre><blockquote>
<p>执行<code>kubectl get cs</code>显示<code>&lt;unknown&gt;</code>是一个<code>1.16</code>版本已知的<code>bug</code>，后续官方应该会解决处理，有大佬分析了源码并且提交了pr，可<a href="https://segmentfault.com/a/1190000020912684">点此参考</a></p>
</blockquote>
<ul>
<li>7.5 测试集群</li>
</ul>
<pre><code># 1 查看leader
# kubectl get endpoints kube-controller-manager -n kube-system -o yaml |grep holderIdentity

control-plane.alpha.kubernetes.io/leader: '{&quot;holderIdentity&quot;:&quot;master01.k8s.io_4b4f63f3-551e-4514-8aa9-a8fdbb13f1b4&quot;,&quot;leaseDurationSeconds&quot;:15,&quot;acquireTime&quot;:&quot;2020-03-24T02:40:32Z&quot;,&quot;renewTime&quot;:&quot;2020-03-24T02:45:47Z&quot;,&quot;leaderTransitions&quot;:1}'


# 2 在master01.k8s.io 上执行 init 0 关机 模拟宕机

# 3 controller-manager和scheduler也发生了迁移
# kubectl get endpoints kube-controller-manager -n kube-system -o yaml |grep holderIdentity

control-plane.alpha.kubernetes.io/leader: '{&quot;holderIdentity&quot;:&quot;master02.k8s.io_457a8d6d-d0e4-4a8e-afbe-0c37f0dadf8d&quot;,&quot;leaseDurationSeconds&quot;:15,&quot;acquireTime&quot;:&quot;2020-03-24T02:46:03Z&quot;,&quot;renewTime&quot;:&quot;2020-03-24T02:50:50Z&quot;,&quot;leaderTransitions&quot;:2}'

# 4 集群此时还是能正常操作
# kubectl get nodes
NAME              STATUS     ROLES    AGE   VERSION
master01.k8s.io   NotReady   master   17m   v1.16.4
master02.k8s.io   Ready      master   12m   v1.16.4
master03.k8s.io   Ready      master   11m   v1.16.4
</code></pre><p><img src="//zhangzw001.github.io/images/42/02.png" alt=""></p>
<p><img src="//zhangzw001.github.io/images/42/03.png" alt=""></p>
<ul>
<li>7.6 导入集群到rancher</li>
</ul>
<pre><code># 这里请自行在rancher界面生成(我这里是rancherv2.3.5)
curl --insecure -sfL https://rancher-dev.xxx.com/v3/import/68nzw8nlch92gshktcx2v5d8xvlvlk57nfgffz9jr7hxwfkwcbbtpz.yaml | kubectl apply -f -
</code></pre><p><img src="//zhangzw001.github.io/images/42/04.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>记一次es集群内存溢出的问题</title>
			<link>https://www.ngirl.xyz/posts/41-%E8%AE%B0%E4%B8%80%E6%AC%A1es%E9%9B%86%E7%BE%A4%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</link>
			<pubDate>Thu, 19 Mar 2020 10:26:49 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/41-%E8%AE%B0%E4%B8%80%E6%AC%A1es%E9%9B%86%E7%BE%A4%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
			<description>es机器报警磁盘 / 空间不足,查看是生成了 .hprof 文件, 内存溢出的典型特征
  以上问题主要是两点
 由于elasticsearch用户家目录是/home/elasticsearch, 所以内存溢出时 写的.hprof文件会生成到家目录, 并且大小有6G+, 这会导致/目录磁盘空间不足报警, 是否可以设置该日志目录? 或者取巧设置elasticsearch家目录到/data挂载盘上? 内存溢出的问题, 是否可以优化并解决  问题1 我这里并未找到设置.hprof文件的生成目录路径设置, 所以我就将根目录做了一个链接 mv /home/elasticsearch /data/ ln -s /data/elasticsearch /home/elasticsearch 或者修改elasticsearch用户的家目录(不过需要用户没有在login中) lsof |grep elasticsearch usermod -d /data/elasticsearch elasticsearch 问题2 内存溢出的问题,我们设置 indices.fielddata.cache.size: 20%  elasticsearch2.x 限制内存使用
 indices.fielddata.cache.size 控制为 fielddata 分配的堆空间大小。 当你发起一个查询，分析字符串的聚合将会被加载到 fielddata，如果这些字符串之前没有被加载过。如果结果中 fielddata 大小超过了指定 大小 ，其他的值将会被回收从而获得空间。
默认情况下，设置都是 unbounded ，Elasticsearch 永远都不会从 fielddata 中回收数据。 这个默认设置是刻意选择的：fielddata 不是临时缓存。它是驻留内存里的数据结构，必须可以快速执行访问，而且构建它的代价十分高昂。如果每个请求都重载数据，性能会十分糟糕。
监控fielddata  按索引使用 indices-stats API ：  GET /_stats/fielddata?</description>
			<content type="html"><![CDATA[<p>es机器报警磁盘 / 空间不足,查看是生成了 .hprof 文件, 内存溢出的典型特征</p>
<!--more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<p>以上问题主要是两点</p>
<ol>
<li>由于elasticsearch用户家目录是/home/elasticsearch, 所以内存溢出时 写的.hprof文件会生成到家目录, 并且大小有6G+, 这会导致/目录磁盘空间不足报警, 是否可以设置该日志目录? 或者取巧设置elasticsearch家目录到/data挂载盘上?</li>
<li>内存溢出的问题, 是否可以优化并解决</li>
</ol>
<h3 id="问题1-我这里并未找到设置hprof文件的生成目录路径设置-所以我就将根目录做了一个链接">问题1 我这里并未找到设置.hprof文件的生成目录路径设置, 所以我就将根目录做了一个链接</h3>
<pre><code>mv /home/elasticsearch /data/
ln -s /data/elasticsearch /home/elasticsearch
或者修改elasticsearch用户的家目录(不过需要用户没有在login中)
lsof |grep elasticsearch
usermod -d /data/elasticsearch elasticsearch
</code></pre><h3 id="问题2-内存溢出的问题我们设置--indicesfielddatacachesize--20">问题2 内存溢出的问题,我们设置  indices.fielddata.cache.size:  20%</h3>
<blockquote>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_limiting_memory_usage.html#fielddata-size">elasticsearch2.x 限制内存使用</a></p>
</blockquote>
<p>indices.fielddata.cache.size 控制为 fielddata 分配的堆空间大小。 当你发起一个查询，分析字符串的聚合将会被加载到 fielddata，如果这些字符串之前没有被加载过。如果结果中 fielddata 大小超过了指定 大小 ，其他的值将会被回收从而获得空间。</p>
<p>默认情况下，设置都是 unbounded ，Elasticsearch 永远都不会从 fielddata 中回收数据。
这个默认设置是刻意选择的：fielddata 不是临时缓存。它是驻留内存里的数据结构，必须可以快速执行访问，而且构建它的代价十分高昂。如果每个请求都重载数据，性能会十分糟糕。</p>
<h3 id="监控fielddata">监控fielddata</h3>
<ul>
<li>按索引使用 indices-stats API ：</li>
</ul>
<pre><code>GET /_stats/fielddata?fields=*
</code></pre><ul>
<li>按节点使用 nodes-stats API ：</li>
</ul>
<pre><code>GET /_nodes/stats/indices/fielddata?fields=*
</code></pre><ul>
<li>按索引节点：</li>
</ul>
<pre><code>GET /_nodes/stats/indices/fielddata?level=indices&amp;fields=*
</code></pre><p>使用设置 ?fields=* ，可以将内存使用分配到每个字段。</p>
<h3 id="断路器">断路器</h3>
<p>机敏的读者可能已经发现 fielddata 大小设置的一个问题。fielddata 大小是在数据加载 之后 检查的。 如果一个查询试图加载比可用内存更多的信息到 fielddata 中会发生什么？答案很丑陋：我们会碰到 OutOfMemoryException 。</p>
<p>Elasticsearch 包括一个 fielddata 断熔器 ，这个设计就是为了处理上述情况。 断熔器通过内部检查（字段的类型、基数、大小等等）来估算一个查询需要的内存。它然后检查要求加载的 fielddata 是否会导致 fielddata 的总量超过堆的配置比例。</p>
<p>如果估算查询的大小超出限制，就会 触发 断路器，查询会被中止并返回异常。这都发生在数据加载 之前 ，也就意味着不会引起 OutOfMemoryException 。</p>
<pre><code>可用的断路器（Available Circuit Breakers）

Elasticsearch 有一系列的断路器，它们都能保证内存不会超出限制：

indices.breaker.fielddata.limit
fielddata 断路器默认设置堆的 60% 作为 fielddata 大小的上限。
indices.breaker.request.limit
request 断路器估算需要完成其他请求部分的结构大小，例如创建一个聚合桶，默认限制是堆内存的 40%。
indices.breaker.total.limit
total 揉合 request 和 fielddata 断路器保证两者组合起来不会使用超过堆内存的 70%。
</code></pre><p>断路器的限制可以在文件 config/elasticsearch.yml 中指定，可以动态更新一个正在运行的集群：</p>
<pre><code>PUT /_cluster/settings
{
  &quot;persistent&quot; : {
    &quot;indices.breaker.fielddata.limit&quot; : &quot;40%&quot; 
  }
}
</code></pre><p>最好为断路器设置一个相对保守点的值。 记住 fielddata 需要与 request 断路器共享堆内存、索引缓冲内存和过滤器缓存。Lucene 的数据被用来构造索引，以及各种其他临时的数据结构。 正因如此，它默认值非常保守，只有 60% 。过于乐观的设置可能会引起潜在的堆栈溢出（OOM）异常，这会使整个节点宕掉。</p>
<blockquote>
<p>在 Fielddata的大小 中，我们提过关于给 fielddata 的大小加一个限制，从而确保旧的无用 fielddata 被回收的方法。 indices.fielddata.cache.size 和 indices.breaker.fielddata.limit 之间的关系非常重要。 如果断路器的限制低于缓存大小，没有数据会被回收。为了能正常工作，断路器的限制 必须 要比缓存大小要高。</p>
</blockquote>
<h3 id="在设置-elasticsearch-堆大小时需要通过-es_heap_size-环境变量应用两个规则">在设置 Elasticsearch 堆大小时需要通过 $ES_HEAP_SIZE 环境变量应用两个规则：</h3>
<h2 id="如果堆大小小于-32-gbjvm-可以利用指针压缩这可以大大降低内存的使用每个指针-4-字节而不是-8-字节">1 不要超过可用 RAM 的 50%
Lucene 能很好利用文件系统的缓存，它是通过系统内核管理的。如果没有足够的文件系统缓存空间，性能会受到影响。 此外，专用于堆的内存越多意味着其他所有使用 doc values 的字段内存越少。
2 不要超过 32 GB
如果堆大小小于 32 GB，JVM 可以利用指针压缩，这可以大大降低内存的使用：每个指针 4 字节而不是 8 字节。</h2>
]]></content>
		</item>
		
		<item>
			<title>记一次跨域的nginx配置问题</title>
			<link>https://www.ngirl.xyz/posts/40-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E5%9F%9F%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</link>
			<pubDate>Wed, 18 Mar 2020 18:26:35 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/40-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E5%9F%9F%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</guid>
			<description>&lt;p&gt;nginx跨域的Access-Control-Allow-Origin的配置 和多域名配置的问题&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>nginx跨域的Access-Control-Allow-Origin的配置 和多域名配置的问题</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 简单配置 </font>
</center>
<h3 id="1-nginx-配置单个域名">1. nginx 配置单个域名</h3>
<pre><code>        add_header Access-Control-Allow-Origin &quot;a.test.com&quot;;
        add_header Access-Control-Allow-Methods GET,HEAD,PUT,PATCH,POST,DELETE;
        add_header Access-Control-Allow-Headers authorization,sign,vary-client;
</code></pre><h3 id="2-nginx-配置所有域名">2. nginx 配置所有域名</h3>
<pre><code>        add_header Access-Control-Allow-Origin &quot;*&quot;;
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Allow-Methods GET,HEAD,PUT,PATCH,POST,DELETE;
        add_header Access-Control-Allow-Headers authorization,sign,vary-client;
</code></pre><h3 id="3-nginx-配置多域名">3. nginx 配置多域名</h3>
<blockquote>
<p>一开始我是这样配置的:</p>
</blockquote>
<pre><code>        ###################这里是配置多域名跨域配置
	set $F_Allow_Origin &quot;127.0.0.1&quot;;
        #如果是允许的域名则设置Access-Control-Allow-Origin 为该$http_origin
        if ( &quot;$http_origin&quot; ~ &quot;[a-z]+.zhangzw.com&quot; ) {
               set $F_Allow_Origin &quot;$http_origin&quot;;
        }
        add_header F_Allow_Origin &quot;$http_origin&quot;;
        add_header Access-Control-Allow-Origin &quot;$http_origin&quot;;
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Allow-Methods GET,HEAD,PUT,PATCH,POST,DELETE;
        add_header Access-Control-Allow-Headers authorization,sign,vary-client;
        ###################这里是配置多域名跨域配置
</code></pre><p>测试之后发现页面还是报没有Access-Control-Allow-Origin 头, 原因是我这边由b.test.com -&gt; a.test.com, F_Allow_Origin自定义头并没有向下传递.</p>
<pre><code>        ###################这里是配置多域名跨域配置
        #如果是允许的域名则设置Access-Control-Allow-Origin 为该$http_origin
        #if ( &quot;$http_origin&quot; !~ &quot;[a-z]+.zhangzw.com&quot; ) {
        #       return 403;
        #}
        add_header Bq_F_Allow_Origin &quot;$http_origin&quot;;
        #add_header Access-Control-Allow-Origin &quot;$http_origin&quot;;
        add_header Access-Control-Allow-Origin &quot;*&quot;;
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Allow-Methods GET,HEAD,PUT,PATCH,POST,DELETE;
        add_header Access-Control-Allow-Headers authorization,sign,vary-client;
        ###################这里是配置多域名跨域配置
</code></pre>]]></content>
		</item>
		
		<item>
			<title>记一次nginx的request_time 和upstream_response_time差值很大问题</title>
			<link>https://www.ngirl.xyz/posts/39-%E8%AE%B0%E4%B8%80%E6%AC%A1nginx%E7%9A%84request-time-%E5%92%8Cupstream-response-time%E5%B7%AE%E5%80%BC%E5%BE%88%E5%A4%A7%E9%97%AE%E9%A2%98/</link>
			<pubDate>Wed, 18 Mar 2020 10:43:34 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/39-%E8%AE%B0%E4%B8%80%E6%AC%A1nginx%E7%9A%84request-time-%E5%92%8Cupstream-response-time%E5%B7%AE%E5%80%BC%E5%BE%88%E5%A4%A7%E9%97%AE%E9%A2%98/</guid>
			<description>&lt;p&gt;遇到一个接口, 经过了nginx反向代理,request_time时间是60s+, upstream_response_time 在0.5s左右&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>遇到一个接口, 经过了nginx反向代理,request_time时间是60s+, upstream_response_time 在0.5s左右</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<p>首先问题描述我们发现后端响应时间没问题, 从前端和后端的日志都发现响应状态是200, 说明请求都是正常的</p>
<p>那为啥会响应时间这么长呢?</p>
<ul>
<li>
<p>request_time:  		指的是 (Nginx 建立连接 到 接收完数据并关闭连接)
从代理nginx到后端(这里是php)建立连接到接受完数据然后关闭连接为止的时间</p>
</li>
<li>
<p>upstream_response_time:	指的是 (接受用户请求的第一个字节 到 发送完响应数据)
从接受用户请求的第一个字节 到发送完响应数据的时间(包括接受请求数据时间,程序响应时间,输出响应时间)</p>
</li>
</ul>
<p>通过查看日志发现响应返回的字节量在 300k左右, 于是去看了下前端nginx的带宽, 并没有发现超过100%, 而且日志的同一时间的并不是所有请求都超过60s+</p>
<p>因此看起来服务端也正常, 应该是客户端问题</p>
<p>通过询问开发, 发现是测试在本机疯狂的点击,导致并发高, 而测试的网络环境是限速5m, 显然客户端带宽接收数据限制导致了服务端发送延迟.</p>
<p>显然我们知道request_time:  指的是 从接受用户请求的第一个字节 到发送完响应数据的时间(包括接受请求数据时间,程序响应时间,输出响应时间)</p>]]></content>
		</item>
		
		<item>
			<title>mac一些常用命令</title>
			<link>https://www.ngirl.xyz/posts/37-mac%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
			<pubDate>Tue, 10 Mar 2020 17:39:36 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/37-mac%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
			<description>记录一些常用的mac工具和方法
 1. Item2    1.1 常用命令  # 同时按住 option(alt) 键，可以以列选中，类似于 sublime3中 按住 alt的列选中 。 Command + option(alt) #剪贴板历史记录 Command + Shift + h #将文本内容复制到剪切板 pbcopy &amp;lt; a.txt  1.2 插件  # Shell Integration  N. 其他    n.1 前进的快捷键  1. sublime3 command + shift + z (比后退 command + z 多一个shift) 或者 command + y  n.2 从linux生成的.csv文件到mac上乱码  iconv -f UTF8 -t GB18030 2020-12-02.</description>
			<content type="html"><![CDATA[<p>记录一些常用的mac工具和方法</p>
<!-- more-->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 1. Item2 </font>
</center>
<ul>
<li>1.1 常用命令</li>
</ul>
<pre><code># 同时按住 option(alt) 键，可以以列选中，类似于 sublime3中 按住 alt的列选中 。
Command + option(alt)
#剪贴板历史记录
Command + Shift + h
#将文本内容复制到剪切板
pbcopy &lt; a.txt
</code></pre><ul>
<li>1.2 插件</li>
</ul>
<pre><code># Shell Integration 
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> N. 其他 </font>
</center>
<ul>
<li>n.1 前进的快捷键</li>
</ul>
<pre><code>1. sublime3
command + shift + z   (比后退 command + z 多一个shift)
或者
command + y
</code></pre><ul>
<li>n.2 从linux生成的.csv文件到mac上乱码</li>
</ul>
<pre><code>iconv -f UTF8 -t GB18030 2020-12-02.csv &gt; 2020-12-02-2.csv
</code></pre><ul>
<li>n.3 输入如何输入中文句号。 ？</li>
</ul>
<pre><code>由于我的搜狗输入法 偏好设置 开启了 中文下使用英文标点, 所以我所有的标点符号都是英文的
因此我要切换的还输入 control+. , 就会切换到中文下的标点
</code></pre>]]></content>
		</item>
		
		<item>
			<title>centos单网卡配置多ip的几种方法</title>
			<link>https://www.ngirl.xyz/posts/36-centos%E5%8D%95%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E5%A4%9Aip%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
			<pubDate>Thu, 27 Feb 2020 11:48:51 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/36-centos%E5%8D%95%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E5%A4%9Aip%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
			<description>centos单网卡配置多ip的几种方法
  方法一 新建IP别名  临时设置, 不需要重启
 ifconfig enp0s3:1 192.168.53.109/24 ifconfig enp0s3:1 down  配置文件设置, 需要重启
 #cat ifcfg-enp0s3:1 DEVICE=enp0s3 IPADDR=192.168.53.109 NETMASK=255.255.255.0 # 重启网络 service network restart # 查看(ifconfig 也可以查看) ip a 或ifconfig 方法二 临时设置, 不需要重启 ip addr add 192.168.53.110/24 dev enp0s3 label enp0s3:2 方法三 临时设置, 不需要重启 ifconfig enp0s3:3 192.168.53.111 netmask 255.255.255.0 方法四 同一个配置文件设置, 需要重启。IP地址没有别名不好进行管理。 #cat ifcfg-enp0s3 DEVICE=enp0s3 IPADDR=192.168.53.106 IPADDR1=192.168.53.112 IPADDR2=192.168.53.113 PREFIX=24 PREFIX1=24 PREFIX2=24 # 重启网络 service network restart # 查看(ifconfig 不可以查看) ip a  注: 这里奇怪的是, 实际配置中,出现个别ip使用方法二,三时仅部分内网可以联通,例如 10.</description>
			<content type="html"><![CDATA[<p>centos单网卡配置多ip的几种方法</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="方法一-新建ip别名">方法一 新建IP别名</h3>
<blockquote>
<p>临时设置, 不需要重启</p>
</blockquote>
<pre><code>ifconfig enp0s3:1 192.168.53.109/24
ifconfig enp0s3:1 down
</code></pre><blockquote>
<p>配置文件设置, 需要重启</p>
</blockquote>
<pre><code>#cat ifcfg-enp0s3:1
DEVICE=enp0s3
IPADDR=192.168.53.109
NETMASK=255.255.255.0

# 重启网络
service network restart

# 查看(ifconfig 也可以查看)
ip a 或ifconfig
</code></pre><h3 id="方法二--临时设置-不需要重启">方法二  临时设置, 不需要重启</h3>
<pre><code>ip addr add 192.168.53.110/24 dev enp0s3 label enp0s3:2
</code></pre><h3 id="方法三--临时设置-不需要重启">方法三  临时设置, 不需要重启</h3>
<pre><code>ifconfig enp0s3:3 192.168.53.111 netmask 255.255.255.0
</code></pre><h3 id="方法四-同一个配置文件设置-需要重启ip地址没有别名不好进行管理">方法四 同一个配置文件设置, 需要重启。IP地址没有别名不好进行管理。</h3>
<pre><code>#cat ifcfg-enp0s3
DEVICE=enp0s3
IPADDR=192.168.53.106
IPADDR1=192.168.53.112
IPADDR2=192.168.53.113
PREFIX=24
PREFIX1=24
PREFIX2=24

# 重启网络
service network restart

# 查看(ifconfig 不可以查看)
ip a 
</code></pre><blockquote>
<p>注:
这里奇怪的是, 实际配置中,出现个别ip使用方法二,三时仅部分内网可以联通,例如
10.10.76.1 通过方法二配置, 从10.10.76.2上可以ping通, 但是从10.10.53.1上无法ping通(10.10.53.1和10.10.76.2是可以ping通)
但是通过方法四配置就正常&hellip; 目前没有找到原因&hellip; 或与公司路由器有关</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>raid1盘数据迁移</title>
			<link>https://www.ngirl.xyz/posts/35-raid1%E7%9B%98%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</link>
			<pubDate>Thu, 27 Feb 2020 09:54:38 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/35-raid1%E7%9B%98%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</guid>
			<description>dell PowerEdge 1950 服务器两块盘做raid1的linux操作系统, 开机后无限重启的一次数据迁移
   考虑到raid1数据是互为备份,直接取一块盘应该能够拿到所有数据
  首先对dell PowerEdge 1950 服务器 开机, 在提示ctrl +c的页面上进入sas页面, 进入选中磁盘后回车, 然后选择 SAS Topology页面, 可以看到是两块盘做的raid1   raid1 信息确认完毕
  关闭1950服务器, 取下其中一块盘, 这里看到硬盘是sata盘
  考虑到该盘不确定是否支持热插拔, 这里是将sata盘放入usb盘接到某台Linux服务器, 然后挂载, 挂载注意fdisk -l 看下具体分区, 我这里是/dev/sdb3
mount /data /dev/sdb3
  进入/data, 就会看到raid1硬盘中保留的所有数据
  </description>
			<content type="html"><![CDATA[<p>dell PowerEdge 1950 服务器两块盘做raid1的linux操作系统, 开机后无限重启的一次数据迁移</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<blockquote>
<p>考虑到raid1数据是互为备份,直接取一块盘应该能够拿到所有数据</p>
</blockquote>
<ol>
<li>首先对dell PowerEdge 1950 服务器 开机, 在提示ctrl +c的页面上进入sas页面, 进入选中磁盘后回车, 然后选择 SAS Topology页面, 可以看到是两块盘做的raid1</li>
</ol>
<blockquote>
<p>raid1 信息确认完毕</p>
</blockquote>
<ol start="2">
<li>
<p>关闭1950服务器, 取下其中一块盘,  这里看到硬盘是sata盘</p>
</li>
<li>
<p>考虑到该盘不确定是否支持热插拔, 这里是将sata盘放入usb盘接到某台Linux服务器, 然后挂载, 挂载注意fdisk -l 看下具体分区, 我这里是/dev/sdb3</p>
<p>mount /data /dev/sdb3</p>
</li>
<li>
<p>进入/data, 就会看到raid1硬盘中保留的所有数据</p>
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>k8s一些命令总结</title>
			<link>https://www.ngirl.xyz/posts/34-k8s%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</link>
			<pubDate>Thu, 05 Dec 2019 09:25:59 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/34-k8s%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</guid>
			<description>记录一些kubectl命令
kubectl命令表
  常用命令 # 查看k8s版本 go list -m -versions github.com/kubernetes/kubernetes|sed &#39;s/ /\n/g&#39; # 让内网可以访问 k8s proxy(k8smaster是:192.168.1.111 kubectl proxy --address=&#39;192.168.1.111&#39; -p 10000 --accept-hosts=&#39;^172.*$&#39; # 查看api类型 kubectl api-versions # 让master也运行pod（默认master不运行pod,单机会用到） kubectl taint nodes --all node-role.kubernetes.io/master- # patch补丁, 强制更新 kubectl patch -f deployment.yaml -p &amp;quot;{\&amp;quot;spec\&amp;quot;:{\&amp;quot;template\&amp;quot;:{\&amp;quot;metadata\&amp;quot;:{\&amp;quot;annotations\&amp;quot;:{\&amp;quot;ci-last-updated\&amp;quot;:\&amp;quot;$(date +&#39;%s&#39;)\&amp;quot;}}}}}&amp;quot; # 端口转发 kubectl -n default port-forward service/prometheus-server 30080:80   scale 使用 # 通过将rc的副本数重新设置为0后，再将副本数设置为2，达到重启nginx的效果。 kubectl scale deployment bq-front1 --replicas=0 -n web kubectl scale deployment bq-front1 --replicas=2 -n web   metrics 相关 # 查看node 资源 kubectl top nodes # 查看pods 资源 kubectl top pods -n php-dev # 获取metrics接口所有数据 kubectl get --raw /metrics # patch强制更新(慎用) kubectl patch -f deployment.</description>
			<content type="html"><![CDATA[<p>记录一些kubectl命令</p>
<!-- more -->
<p><a href="http://docs.kubernetes.org.cn/683.html">kubectl命令表</a></p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="常用命令">常用命令</h3>
<pre><code># 查看k8s版本
go list -m -versions github.com/kubernetes/kubernetes|sed 's/ /\n/g'

# 让内网可以访问 k8s proxy(k8smaster是:192.168.1.111
kubectl proxy --address='192.168.1.111' -p 10000 --accept-hosts='^172.*$'

# 查看api类型
kubectl api-versions

# 让master也运行pod（默认master不运行pod,单机会用到）
kubectl taint nodes --all node-role.kubernetes.io/master-

# patch补丁, 强制更新
kubectl patch -f deployment.yaml -p &quot;{\&quot;spec\&quot;:{\&quot;template\&quot;:{\&quot;metadata\&quot;:{\&quot;annotations\&quot;:{\&quot;ci-last-updated\&quot;:\&quot;$(date +'%s')\&quot;}}}}}&quot;

# 端口转发
kubectl -n default port-forward service/prometheus-server 30080:80

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="scale-使用">scale 使用</h3>
<pre><code># 通过将rc的副本数重新设置为0后，再将副本数设置为2，达到重启nginx的效果。
kubectl scale deployment bq-front1 --replicas=0 -n web
kubectl scale deployment bq-front1 --replicas=2 -n web
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="metrics-相关">metrics 相关</h3>
<pre><code># 查看node 资源
kubectl top nodes
# 查看pods 资源
kubectl top pods -n php-dev
# 获取metrics接口所有数据
kubectl get --raw /metrics

# patch强制更新(慎用)
kubectl patch -f deployment.yaml -p &quot;{\&quot;spec\&quot;:{\&quot;template\&quot;:{\&quot;metadata\&quot;:{\&quot;annotations\&quot;:{\&quot;ci-last-updated\&quot;:\&quot;$(date +'%s')\&quot;}}}}}&quot;

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="根据版本缩放">根据版本缩放</h3>
<pre><code>#查看Deployment的变更信息（以下信息得以保存，是创建时候加的“--record”这个选项起的作用）：
kubectl rollout history deployment/bq-nginx-php7 -n web
kubectl rollout undo deployment/bq-nginx-php7        # 回退到上一版本
kubectl rollout undo deployment/bq-nginx-php7 --to-revision=2  # 回退到指定版本

kubectl describe deployments/bq-nginx-php7 -n web       #查询详细信息，获取升级进度
kubectl rollout pause deployment/bq-nginx-php7  -n web  #暂停升级
kubectl rollout resume deployment/bq-nginx-php7  -n web #继续升级
kubectl rollout undo deployment/bq-nginx-php7  -n web   #升级回滚
kubectl scale deployment bq-nginx-php7 --replicas 2  -n web   #弹性伸缩Pod数量

kubectl get ns --show-labels  # 查看标签,除了ns, 也可以是node,pod等
</code></pre>]]></content>
		</item>
		
		<item>
			<title>k3s安装配置</title>
			<link>https://www.ngirl.xyz/posts/29-k3s%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
			<pubDate>Tue, 03 Dec 2019 16:06:28 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/29-k3s%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
			<description>体验轻量级k8s集群,适用于低配个人开发测试使用
 k3s, 5 less than k8s   详情参考官方: k3s github地址
准备  1 selinux 关闭  getenforce # 本次关闭 setenforce 0 # 重启后关闭 sed -i &#39;/SELINUX=enforcing/s/enforcing/disabled/&#39; /etc/sysconfig/selinux  2 关闭swap(可选)  # 本次关闭 swapoff on # 重启后关闭 sed -i &#39;/swap/s@^/@#/@&#39; /etc/fstab  3 关闭firewalld(必须)  systemctl stop firewalld.service systemctl disable firewalld.service  4 在内核3.10,4.16,5.2,5.3 都正常运行  Step 1: 安装K3S集群 # 下载k3s 二进制文件打开各版本点击详情可以查询k3s版本对应的k8s版本(https://github.com/rancher/k3s/releases) wget https://github.com/rancher/k3s/releases/download/v1.0.0/k3s k3s v1.0.0 -&amp;gt; k8s1.16.3 # https://github.</description>
			<content type="html"><![CDATA[<p>体验轻量级k8s集群,适用于低配个人开发测试使用</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> k3s, 5 less than k8s </font>
</center>
<p>详情参考官方: <a href="https://github.com/rancher/k3s">k3s github地址</a></p>
<h3 id="准备">准备</h3>
<ul>
<li>1 selinux 关闭</li>
</ul>
<pre><code>getenforce
# 本次关闭
setenforce 0

# 重启后关闭
sed -i '/SELINUX=enforcing/s/enforcing/disabled/' /etc/sysconfig/selinux
</code></pre><ul>
<li>2 关闭swap(可选)</li>
</ul>
<pre><code># 本次关闭
swapoff on
# 重启后关闭
sed -i '/swap/s@^/@#/@' /etc/fstab
</code></pre><ul>
<li>3 关闭firewalld(必须)</li>
</ul>
<pre><code>systemctl stop firewalld.service
systemctl disable firewalld.service
</code></pre><ul>
<li>4 在内核3.10,4.16,5.2,5.3 都正常运行</li>
</ul>
<h3 id="step-1-安装k3s集群">Step 1: 安装K3S集群</h3>
<pre><code># 下载k3s 二进制文件打开各版本点击详情可以查询k3s版本对应的k8s版本(https://github.com/rancher/k3s/releases)
wget https://github.com/rancher/k3s/releases/download/v1.0.0/k3s
k3s v1.0.0 -&gt; k8s1.16.3

# https://github.com/rancher/k3s/tags
k3s v0.9.0 -&gt; k8s1.15.4
k3s v0.10.0 -&gt; k8s1.16.2

我这里下载最新的k3s v1.0.0, 但是由于metrics-server好像对k8s1.16.3最新有点问题, 还是先等待metrics-server更新把
测试了k3s v0.10.0 测试了下, 但遗憾的是默认好像没有安装metrics-server...

mv k3s /usr/local/bin/k3s
chmod +x /usr/local/bin/k3s

#k3s --version
k3s version v1.0.0 (18bd921c)

# 下载pause镜像(这里举1,其他国内地址参考官方)
docker pull registry.cn-beijing.aliyuncs.com/ilemonrain/pause-amd64:3.1
docker tag registry.cn-beijing.aliyuncs.com/ilemonrain/pause-amd64:3.1 k8s.gcr.io/pause:3.1

# 验证一下
docker images | grep &quot;k8s.gcr.io/pause&quot;
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="step-2-安装k3s-server">Step 2: 安装k3s server</h3>
<pre><code># centos官方安装
curl -sfL https://get.k3s.io | sh -

# 至此server已经安装完了,但由于k8s默认是用Containerd, 并非docker, 所以需要手工修改配置(当然如果你熟悉ctr 操作Containerd也没问题)
# 修改ExecStart内容
# 1: --docker 表示k3s server使用docker引擎
# 2: --no-deploy traefik 表示不安装traefik
vim /etc/systemd/system/multi-user.target.wants/k3s.service
ExecStart=/usr/local/bin/k3s server --docker --no-deploy traefik

# 启动服务
systemctl daemon-reload
service k3s restart

# 验证
k3s kubectl get node
</code></pre><blockquote>
<p>想去掉k3s命令? kubectl命令管理k3s</p>
</blockquote>
<pre><code># 简单做一个alias
alias kubectl='k3s kubectl'

# 或者
rm -rf ~/.kube
mkdir -p ~/.kube
cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="step-3-客户端安装">Step 3: 客户端安装</h3>
<p>参考官方文档 <a href="https://rancher.com/docs/k3s/latest/en/installation/install-options/">安装和配置选项</a></p>
<pre><code># 同样下载二进制包
wget https://github.com/rancher/k3s/releases/download/v1.0.0/k3s
mv k3s /usr/local/bin/k3s
chmod +x /usr/local/bin/k3s
</code></pre><h3 id="加入到server有两种">加入到server有两种</h3>
<ul>
<li>手动加入 (其实上面我们已经拉取了image, 并且tag成官方地址了,所以这里也可以不用指定)</li>
</ul>
<pre><code>nohup k3s agent --docker   --pause-image registry.cn-beijing.aliyuncs.com/ilemonrain/pause-amd64:3.1 --server https://k3s-server:6443 --token ${NODE_TOKEN} &amp;
nohup k3s agent --docker --server https://k3s-server:6443 --token ${NODE_TOKEN} &amp;
</code></pre><ul>
<li>脚本加入</li>
</ul>
<pre><code>curl -sfL https://get.k3s.io | K3S_URL=https://k3s-server:6443 K3S_TOKEN=${NODE_TOKEN} INSTALL_K3S_EXEC=&quot;agent --docker  --pause-image registry.cn-beijing.aliyuncs.com/ilemonrain/pause-amd64:3.1&quot; sh -s -
curl -sfL https://get.k3s.io | K3S_URL=https://k3s-server:6443 K3S_TOKEN=${NODE_TOKEN} INSTALL_K3S_EXEC=&quot;agent --docker&quot; sh -s -

# ps aux|grep k3s
/usr/local/bin/k3s agent --docker --pause-image registry.cn-beijing.aliyuncs.com/ilemonrain/pause-amd64:3.1
</code></pre><blockquote>
<p>当然如下差别不大, 都是会启动一个k3s的进程</p>
</blockquote>
<h3 id="rancher-import">rancher import</h3>
<pre><code>curl --insecure -sfL https://rancher-dev.xxx.com/v3/import/x8jc277zmjkxjgcmc9f67pzn9f7ffsjpszlv9dxc79vhmndqcms4nr.yaml | k3s kubectl apply -f -
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="卸载">卸载</h3>
<pre><code>sh /usr/local/bin/k3s-uninstall.sh
</code></pre>]]></content>
		</item>
		
		<item>
			<title>k3s1.16部署nginx&#43;php5.2.17</title>
			<link>https://www.ngirl.xyz/posts/33-k3s1.16%E9%83%A8%E7%BD%B2nginx&#43;php5.2.17/</link>
			<pubDate>Tue, 03 Dec 2019 11:46:42 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/33-k3s1.16%E9%83%A8%E7%BD%B2nginx&#43;php5.2.17/</guid>
			<description>&lt;p&gt;老项目是用php5.2.17的,自己编译打包镜像简单部署&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>老项目是用php5.2.17的,自己编译打包镜像简单部署</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 开始部署 </font>
</center>
<h3 id="准备dockerfile">准备dockerfile</h3>
<ul>
<li>Dockerfile</li>
</ul>
<pre><code>FROM centos:6.9
MAINTAINER zhangzw zhangzw@zhangzw.com

ENV PHP_DIR /usr/local/php
ENV WORK_DIR_tar /usr/loca/src/
ENV PHP_VERSION 5.2.17
ENV PHP_EXT_CURL curl-7.20.0
# php 及扩展 包,包括以下内容
# php-5.2.17-patch-fpm.tar.gz curl-7.20.0.tar.gz  freetype-2.4.0.tar.gz  ImageMagick-6.9.0-4.tar.gz  imagick-3.0.1.tgz zendopcache-7.0.5.tgz  phpredis-2.2.2.zip                 
# php-fpm.conf php.ini              
copy tar ${WORK_DIR_tar}


run yum install -y wget \
 &amp;&amp; wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo \
 &amp;&amp; rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 \
 &amp;&amp; yum install -y epel-release \
 &amp;&amp; yum install -y freetype freetype-devel gcc make cmake ncurses-devel gcc-c++ autoconf automake zlib-devel dos2unix nc lrzsz openssl-devel pcre-devel libxml2 libxml2-devel libcurl libcurl-devel libpng-devel bzip2-devel libjpeg libjpeg-turbo-devel libmcrypt-devel mhash-devel mysql-devel libtool-ltdl libtool-ltdl-devel git bzip2-devel git supervisor autoconf automake xz unzip \
    &amp;&amp; yum clean all
    &amp;&amp; cd ${WORK_DIR_tar} \
        &amp;&amp; ls *gz|xargs -i tar -xf {} \
 &amp;&amp; cd ${PHP_EXT_CURL} \
                &amp;&amp; ./configure --prefix=/usr/local/curl \
                &amp;&amp; make \
                &amp;&amp; make install \
    &amp;&amp; cd ${WORK_DIR_tar} \
 &amp;&amp; cd php-${PHP_VERSION} \
 &amp;&amp; ln -s /usr/lib64/libpng.so /usr/lib/ \
 &amp;&amp; ln -s /usr/lib64/libjpeg.so /usr/lib/ \
 &amp;&amp; ln -s /usr/lib64/mysql/libmysqlclient.so.16.0.0 /usr/lib/libmysqlclient.so \
        &amp;&amp; ./configure \
            --prefix=${PHP_DIR} \
            --with-config-file-path=${PHP_DIR}/etc \
            --with-mysql \
            --with-mysqli \
            --with-openssl \
            --enable-fastcgi \
            --enable-fpm \
            --enable-mbstring \
            --enable-bcmath \
            --with-freetype-dir \
            --with-jpeg-dir \
            --with-png-dir \
            --with-zlib-dir \
            --with-libxml-dir=/usr \
            --enable-xml \
            --with-mhash \
            --with-mcrypt \
            --enable-pcntl \
            --enable-sockets \
            --with-bz2 \
            --with-curl=https://www.ngirl.xyz/usr/local/curl \
            --with-curlwrappers \
            --enable-mbregex \
            --with-gd \
            --enable-gd-native-ttf \
            --enable-zip \
            --enable-soap \
            --with-iconv \
            --enable-pdo \
 &amp;&amp; make \
 &amp;&amp; make install \
    &amp;&amp; cd ${WORK_DIR_tar} \
        &amp;&amp; cd ImageMagick-6.9.0-4 \
                &amp;&amp; ./configure --prefix=/usr/local/imagemagick \
                &amp;&amp; make \
                &amp;&amp; make install \
        &amp;&amp; cd ${WORK_DIR_tar} \
        &amp;&amp; cd imagick-3.0.1 \
                &amp;&amp; ln -s /usr/local/imagemagick/include/ImageMagick-6 /usr/local/imagemagick/include/ImageMagick \
                &amp;&amp; ${PHP_DIR}/bin/phpize \
                &amp;&amp; ./configure --with-php-config=${PHP_DIR}/bin/php-config --with-imagick=/usr/local/imagemagick \
                &amp;&amp; make \
                &amp;&amp; make install \
    &amp;&amp; cd ${WORK_DIR_tar} \
        &amp;&amp; unzip phpredis-2.2.2.zip \
        &amp;&amp; cd phpredis-2.2.2 \
                &amp;&amp; ${PHP_DIR}/bin/phpize \
                &amp;&amp; ./configure --with-php-config=${PHP_DIR}/bin/php-config \
                &amp;&amp; make \
                &amp;&amp; make install \
    &amp;&amp; cd ${WORK_DIR_tar} \
        &amp;&amp; cd zendopcache-7.0.5 \
                &amp;&amp; ${PHP_DIR}/bin/phpize \
                &amp;&amp; ./configure --with-php-config=${PHP_DIR}/bin/php-config \
                &amp;&amp; make \
                &amp;&amp; make install \
    &amp;&amp; groupadd -r www \
    &amp;&amp; useradd -M -s /sbin/nologin -r -g www www \
    &amp;&amp; cd ${WORK_DIR_tar} \
   &amp;&amp; \cp -r ${WORK_DIR_tar}/php-fpm.conf ${PHP_DIR}/etc/ \
   &amp;&amp; \cp -r ${WORK_DIR_tar}/php.ini ${PHP_DIR}/etc/ \
   &amp;&amp; rm -rf ${WORK_DIR_tar}

copy supervisord-fpm.conf /etc/supervisord.conf
copy start.sh /root/start.sh

ENTRYPOINT [&quot;/bin/sh&quot;, &quot;/root/start.sh&quot;]

</code></pre><ul>
<li>build 打包</li>
</ul>
<pre><code># 配置自己的私有仓库地址
docker build -t xxx.com/centos-php:5.2.17  .
docker push xxx.com/centos-php:5.2.17
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<p>可参考k3s安装教程:</p>
<ul>
<li><a href="https://zhangzw001.github.io/2019/12/03/29-k3s%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">k3s安装配置</a></li>
<li><a href="https://github.com/rancher/k3s">官方教程</a></li>
</ul>
<h3 id="在k3s中启动这里本地挂载方式单节点">在k3s中启动(这里本地挂载方式,单节点)</h3>
<ul>
<li>nginx.conf 部分配置</li>
</ul>
<pre><code>server {
        listen 80 default_server;
        server_name  _;
        access_log  /webwww/nginx_logs/test_access.log  main;
        error_log /webwww/nginx_logs/test_error.log debug;
        root   /webwww/test;

        location = /50x.html {
            root   html;
        }

        location / {
            index index.php  index.html index.htm;
        }

        location ~ \.php$ {
            fastcgi_pass   php-fpm-dev:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            fastcgi_param  HTTP_HOST          $server_name;
            include        fastcgi_params;
        }
}
</code></pre><ul>
<li>nginx部署 nginx/php-nginx-dev.yml</li>
</ul>
<pre><code>---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-nginx-dev
  namespace: php-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php-nginx-dev
  template:
    metadata:
      labels:
        app: php-nginx-dev
    spec:
      containers:
      - name: php-nginx-dev
        image: hub.zhangzw.com/bq/nginx:1.15.12
        ports:
        - containerPort: 80
          name: nginx-80
          protocol: TCP
        resources:
          requests:
            cpu: &quot;10m&quot;
          limits:
            cpu: &quot;500m&quot;
        volumeMounts:
        - name: nginx-www-dev
          mountPath: /webwww
        - name: nginx-cfg-dev
          mountPath: &quot;/etc/nginx/nginx.conf&quot;
      volumes:
        - name: nginx-www-dev
          hostPath:
            path: /data/k8s-container/php-5.2.17/webwww-data
        - name: nginx-cfg-dev
          hostPath:
            path: /data/k8s-container/php-5.2.17/nginx/nginx.conf
---
kind: Service
apiVersion: v1
metadata:
 labels:
   app: php-nginx-dev
 name: php-nginx-dev-service
 namespace: php-dev
spec:
 type: NodePort
 ports:
   - name: nginx-80
     port: 80
     targetPort: 80
     nodePort: 32001
     protocol: TCP
 selector:
   app: php-nginx-dev
</code></pre><ul>
<li>fpm 部署配置 php-fpm/php-fpm-dev.yml</li>
</ul>
<pre><code>---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-fpm-dev
  namespace: php-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php-fpm-dev
  template:
    metadata:
      labels:
        app: php-fpm-dev
    spec:
      containers:
      - name: php-fpm-dev
        image: hub.zhangzw.com/bq/centos-php:5.2.17
        ports:
        - containerPort: 9000
          name: fpm-9000
          protocol: TCP
        resources:
          requests:
            cpu: &quot;50m&quot;
          limits:
            cpu: &quot;1500m&quot;
        volumeMounts:
        - name: nginx-www-dev
          mountPath: /webwww
        - name: php-cfg-dev
          mountPath: &quot;/usr/local/php/etc/php.ini&quot;
        - name: fpm-cfg-dev
          mountPath: &quot;/usr/local/php/etc/php-fpm.conf&quot;
      volumes:
        - name: nginx-www-dev
          hostPath:
            path: /data/k8s-container/php-5.2.17/webwww-data
        - name: php-cfg-dev
          hostPath:
            path: /data/k8s-container/php-5.2.17/php-fpm/php.ini
        - name: fpm-cfg-dev
          hostPath:
            path: /data/k8s-container/php-5.2.17/php-fpm/php-fpm.conf

---
apiVersion: v1
kind: Service
metadata:
  name: php-fpm-dev
  namespace: php-dev
spec:
  clusterIP: None
  selector:
    app: php-fpm-dev
  ports:
   - name: fpm-9000
     port: 9000

---
</code></pre><ul>
<li>部署命令</li>
</ul>
<pre><code># 先启动fpm,否则nginx会报错找不到 php-fpm-dev
kubectl apply -f php-fpm/php-fpm-dev.yml
kubectl apply -f nginx/php-nginx-dev.yml
</code></pre>]]></content>
		</item>
		
		<item>
			<title>php错误502问题总结</title>
			<link>https://www.ngirl.xyz/posts/32-php%E9%94%99%E8%AF%AF502%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link>
			<pubDate>Mon, 02 Dec 2019 17:45:01 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/32-php%E9%94%99%E8%AF%AF502%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
			<description>&lt;p&gt;近期一次 502报错, 但是没有达到timeout的值,特此记录&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>近期一次 502报错, 但是没有达到timeout的值,特此记录</p>
<h3 id="查看errorlog-内容-recv-failed-104-connection-reset-by-peer-while-reading-response-header-from-upstream">查看error.log 内容: recv() failed (104: Connection reset by peer) while reading response header from upstream</h3>
<pre><code>一般来说502 主要是fpm超时进程中止了 或者就是 内存不足导致 fpm中止


这里查看了fpm配置 request_terminate_timeout值, 发现并不是该原因

通过 top 查看了fpm内存, 其中单个内存已经达到了700M

这里fpm配置的pm 是static, 由于该服务并发不是很高, 可以适当减少max_children的值, 或者采用dynamic 动态方式

这里设置的max_requests = 5500,  可以考虑减小该值
</code></pre><h3 id="问题解决">问题解决</h3>
<pre><code>1 这里对fpm reload 即可
2 改动dynamic 方式
3 合理配置max_requests
</code></pre>]]></content>
		</item>
		
		<item>
			<title>systemd一些命令</title>
			<link>https://www.ngirl.xyz/posts/31-systemd%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</link>
			<pubDate>Tue, 26 Nov 2019 10:34:10 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/31-systemd%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</guid>
			<description>&lt;p&gt;记录一些需要systemd命令&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>记录一些需要systemd命令</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="systemd命令">systemd命令</h3>
<ul>
<li>
<p>查看服务启动配置: <code>systemctl cat k3s</code></p>
</li>
<li>
<p>查看开机启动的服务列表：<code>systemctl list-unit-files|grep enabled</code></p>
</li>
<li>
<p>查看启动失败的服务列表：<code>systemctl --failed</code></p>
</li>
<li>
<p>重启服务：<code>systemctl restart firewalld.service</code></p>
</li>
<li>
<p>显示状态：<code>systemctl status firewalld.service</code></p>
</li>
<li>
<p>开机启用服务：<code>systemctl enable firewalld.service</code></p>
</li>
<li>
<p>开机禁用服务：<code>systemctl disable firewalld.service</code></p>
</li>
<li>
<p>查看开机启动：<code>systemctl is-enabled firewalld.service</code></p>
</li>
</ul>]]></content>
		</item>
		
		<item>
			<title>k3s集群部署项目报挂载nfs错误</title>
			<link>https://www.ngirl.xyz/posts/30-k3s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E6%8A%A5%E6%8C%82%E8%BD%BDnfs%E9%94%99%E8%AF%AF/</link>
			<pubDate>Mon, 25 Nov 2019 17:37:23 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/30-k3s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E6%8A%A5%E6%8C%82%E8%BD%BDnfs%E9%94%99%E8%AF%AF/</guid>
			<description>体验轻量级k8s集群遇到一些nfs问题
  部署服务器查看describe信息如下: Mounting command: systemd-run Mounting arguments: --description=Kubernetes transient mount for /var/lib/kubelet/pods/369daaef-1e90-446b-92ce-3d562f94b429/volumes/kubernetes.io~nfs/pvc-f462c606-5796-4c48-8928-7822f3fa0605 --scope -- mount -t nfs 192.168.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 /var/lib/kubelet/pods/369daaef-1e90-446b-92ce-3d562f94b429/volumes/kubernetes.io~nfs/pvc-f462c606-5796-4c48-8928-7822f3fa0605 Output: Running scope as unit run-14829.scope. mount: 文件系统类型错误、选项错误、192.168.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 上有坏超级块、 缺少代码页或助手程序，或其他错误 (对某些文件系统(如 nfs、cifs) 您可能需要 一款 /sbin/mount.&amp;lt;类型&amp;gt; 助手程序)   分析  猜测1 可能是nfs的系统格式和集群node节点文件格式不同  # 查看发现nfs是ext4, 然后集群中其他的磁盘都是xfs df -T|egrep -v &amp;quot;contai|var|overl&amp;quot; 所以新挂了块磁盘,格式化为xfs然后再次实验,发现错误同样...  猜测2 可能是客户端无法识别nfs格式  # 做个测试 mkdir /tmp/abc mount -t nfs 192.168.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 /tmp/abc # 果然报错 mount: wrong fs type, bad option, bad superblock on 192.</description>
			<content type="html"><![CDATA[<p>体验轻量级k8s集群遇到一些nfs问题</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="部署服务器查看describe信息如下">部署服务器查看describe信息如下:</h3>
<pre><code>Mounting command: systemd-run
Mounting arguments: --description=Kubernetes transient mount for /var/lib/kubelet/pods/369daaef-1e90-446b-92ce-3d562f94b429/volumes/kubernetes.io~nfs/pvc-f462c606-5796-4c48-8928-7822f3fa0605 --scope -- mount -t nfs 192.168.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 /var/lib/kubelet/pods/369daaef-1e90-446b-92ce-3d562f94b429/volumes/kubernetes.io~nfs/pvc-f462c606-5796-4c48-8928-7822f3fa0605
Output: Running scope as unit run-14829.scope.
mount: 文件系统类型错误、选项错误、192.168.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 上有坏超级块、
       缺少代码页或助手程序，或其他错误
       (对某些文件系统(如 nfs、cifs) 您可能需要
       一款 /sbin/mount.&lt;类型&gt; 助手程序)
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="分析">分析</h3>
<ul>
<li>猜测1 可能是nfs的系统格式和集群node节点文件格式不同</li>
</ul>
<pre><code># 查看发现nfs是ext4, 然后集群中其他的磁盘都是xfs
df -T|egrep -v &quot;contai|var|overl&quot;

所以新挂了块磁盘,格式化为xfs然后再次实验,发现错误同样...
</code></pre><ul>
<li>猜测2 可能是客户端无法识别nfs格式</li>
</ul>
<pre><code># 做个测试
mkdir /tmp/abc
mount -t nfs 192.168.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-es520-2-dev-1-pvc-f462c606-5796-4c48-8928-7822f3fa0605 /tmp/abc


# 果然报错
mount: wrong fs type, bad option, bad superblock on 192.168.x.x:/data-nfs/nfs/k3s/ns-elastic5-es520-2-dev-nfs-plugins,
       missing codepage or helper program, or other error
       (for several filesystems (e.g. nfs, cifs) you might
       need a /sbin/mount.&lt;type&gt; helper program)

       In some cases useful info is found in syslog - try
       dmesg | tail or so.
</code></pre><p>所以安装了nfs即可</p>
<pre><code>yum install nfs
</code></pre>]]></content>
		</item>
		
		<item>
			<title>k8s1.16使用旧yml部署配置问题</title>
			<link>https://www.ngirl.xyz/posts/28-k8s1-16%E4%BD%BF%E7%94%A8%E6%97%A7yml%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</link>
			<pubDate>Mon, 25 Nov 2019 15:41:48 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/28-k8s1-16%E4%BD%BF%E7%94%A8%E6%97%A7yml%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</guid>
			<description>&lt;p&gt;使用k8s 1.16遇到的问题&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>使用k8s 1.16遇到的问题</p>
<h3 id="1-appversion的改变">1 appversion的改变</h3>
<pre><code>no matches for kind &quot;StatefulSet&quot; in version &quot;apps/v1beta1&quot;
no matches for kind &quot;Deployment&quot; in version &quot;extensions/v1beta1&quot;
</code></pre><pre><code># Deployment(extensions/v1beta1 舍弃)
apiVersion: extensions/v1beta1 -&gt; apiVersion: apps/v1
# StatefulSet
apiVersion: apps/v1beta1       -&gt; apiVersion: apps/v1


# 然后根据提示在spec 下添加selector.matchLabels
spec:
  replicas: 3
  selector:
    matchLabels:
      app: test1

可以通过kubectl convert 更新yaml文件
</code></pre><ul>
<li>完整示例:</li>
</ul>
<pre><code>&gt; nginx1.yml &lt;&lt;- EOF  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx1
  template:
    metadata:
      labels:
        app: nginx1
    spec:
      containers:
      - image: nginx
        name: nginx1
        imagePullPolicy: Always
        resources:
          requests:
            cpu: &quot;10m&quot;
            memory: &quot;10Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
EOF

</code></pre>]]></content>
		</item>
		
		<item>
			<title>k8s一条命令部署es5.2.0集群</title>
			<link>https://www.ngirl.xyz/posts/27-k8s%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2es5-2-0%E9%9B%86%E7%BE%A4/</link>
			<pubDate>Thu, 21 Nov 2019 18:13:35 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/27-k8s%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2es5-2-0%E9%9B%86%E7%BE%A4/</guid>
			<description>&lt;p&gt;由于老项目是基于es5.2.0, 所以准备在k8s基于nfs存储搭建一套,下面简单介绍&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>由于老项目是基于es5.2.0, 所以准备在k8s基于nfs存储搭建一套,下面简单介绍</p>
<h3 id="准备好环境和官方镜像">准备好环境和官方镜像</h3>
<pre><code>1 镜像: elasticsearch:5.2.0
2 k8s环境: k8s.1.10
3 存储: nfs storageclass 存储
4 插件: ik分词压缩包(这里ik分词直接使用旧的es配置, 也可以自行下)
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 开始部署 </font>
</center>
<h3 id="部署命令">部署命令</h3>
<pre><code>kubectl apply -f k8s-StatefulSet-es520-nfs.yml
</code></pre><h3 id="配置文件-k8s-statefulset-es520-nfsyml">配置文件 k8s-StatefulSet-es520-nfs.yml</h3>
<pre><code>apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: es520-2-dev
  namespace: ns-elastic5
spec:
  serviceName: &quot;es520-2-dev&quot;
  replicas: 2
  volumeClaimTemplates:
  - metadata:
      name: es520-2-dev-nfs
      annotations:
        volume.beta.kubernetes.io/storage-class: &quot;nfs-retain&quot; # 这里配置 上面创建的 storageclass 的名称
    spec:
      accessModes: [ &quot;ReadWriteOnce&quot; ]
      resources:
        requests:
          storage: 2Gi
  template:
    metadata:
      labels:
        app: es520-2-dev
    spec:
      containers:
      - name: es520-2-dev
        image: elasticsearch:5.2.0
        ports:
        - containerPort: 9200
          name: es520-2-9200
          protocol: TCP
        - containerPort: 9300
          name: es520-2-9300
          protocol: TCP
        resources:
          requests:
            cpu: &quot;50m&quot;
          limits:
            cpu: &quot;500m&quot;
        volumeMounts:
        - name: es520-2-dev-nfs
          mountPath: /usr/share/elasticsearch/data/
        - name: es520-2-dev-cfg
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: es520-2-dev-jvm
          mountPath: /usr/share/elasticsearch/config/jvm.options
          subPath: jvm.options
        - name: es520-2-dev-plu
          mountPath: /usr/share/elasticsearch/plugins
      volumes:
      - name: es520-2-dev-cfg
        configMap:
          name: es520-2-dev-cfg
          items:
          - key: elasticsearch.yml
            path: elasticsearch.yml
      - name: es520-2-dev-jvm
        configMap:
          name: es520-2-dev-jvm
          items:
          - key: jvm.options
            path: jvm.options
      - name: es520-2-dev-plu
        nfs:
            server: 192.168.53.106
            path: /data/nfs/k3s/ns-elastic5-es520-2-dev-nfs-plugins
---
kind: Service
apiVersion: v1
metadata:
 labels:
   app: es520-2-dev
 name: es520-2-dev
 namespace: ns-elastic5
spec:
 type: NodePort
 ports:
   - name: es520-2-9200
     port: 9200
     targetPort: 9200
     nodePort: 31201
     protocol: TCP
   - name: es520-2-9300
     port: 9300
     targetPort: 9300
     nodePort: 31301
     protocol: TCP
 selector:
   app: es520-2-dev

---
apiVersion: v1
kind: Service
metadata:
  name: es520-2-dev-hl
spec:
  clusterIP: None
  selector:
    app: es520-2-dev
  ports:
   - name: es520-2-9200
     port: 9200
   - name: es520-2-9300
     port: 9300
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: es520-2-dev-cfg
  namespace: ns-elastic5
data:
  elasticsearch.yml: |

   cluster.name: k8s-test-nfs
   network.host: 0.0.0.0
   bootstrap.system_call_filter: false
   discovery.zen.ping.unicast.hosts: [&quot;es520-2-dev-0.es520-2-dev:9300&quot;,&quot;es520-2-dev-1.es520-2-dev:9300&quot;,&quot;es520-2-dev-2.es520-2-dev:9300&quot;]
   http.cors.enabled: true
   http.cors.allow-origin: &quot;*&quot;
   thread_pool.bulk.queue_size: 3000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: es520-2-dev-jvm
  namespace: ns-elastic5
data:
  jvm.options: |
   -Xms512m
   -Xmx512m
   -XX:+UseConcMarkSweepGC
   -XX:CMSInitiatingOccupancyFraction=75
   -XX:+UseCMSInitiatingOccupancyOnly
   -XX:+DisableExplicitGC
   -XX:+AlwaysPreTouch
   -server
   -Xss1m
   -Djava.awt.headless=true
   -Dfile.encoding=UTF-8
   -Djna.nosys=true
   -Djdk.io.permissionsUseCanonicalPath=true
   -Dio.netty.noUnsafe=true
   -Dio.netty.noKeySetOptimization=true
   -Dio.netty.recycler.maxCapacityPerThread=0
   -Dlog4j.shutdownHookEnabled=false
   -Dlog4j2.disable.jmx=true
   -Dlog4j.skipJansi=true
   -XX:+HeapDumpOnOutOfMemoryError
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 效果图 </font>
</center>
<h3 id="rancher-上效果">rancher 上效果</h3>
<img src="//zhangzw001.github.io/images/27/img1.png">
<h3 id="elasticsearch-head-上效果图">elasticsearch-head 上效果图</h3>
<img src="//zhangzw001.github.io/images/27/img2.jpg">]]></content>
		</item>
		
		<item>
			<title>logstash配置</title>
			<link>https://www.ngirl.xyz/posts/26-logstash%E9%85%8D%E7%BD%AE/</link>
			<pubDate>Fri, 08 Nov 2019 17:28:26 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/26-logstash%E9%85%8D%E7%BD%AE/</guid>
			<description>记录一些logstash的配置问题
想要排除某些信息 官方文档
if &amp;quot;_grokparsefailure&amp;quot; not in [tags] { if [sqlDuring] &amp;lt; 5 { drop {} } } else { drop {} }  请务必注意 如果failure 可能会导致找不到 sqlDuring变量 而报错
 [2019-12-05T17:53:03,017][FATAL][logstash.runner ] An unexpected error occurred! {:error=&amp;gt;#&amp;lt;NoMethodError: undefined method `&amp;lt;&#39; for nil:NilClass&amp;gt;, :backtrace=&amp;gt;[&amp;quot;(eval):139:in `initialize&#39;&amp;quot;, &amp;quot;org/jruby/RubyArray.java:1613:in `each&#39;&amp;quot;, &amp;quot;(eval):137:in `initialize&#39;&amp;quot;, &amp;quot;org/jruby/RubyProc.java:281:in `call&#39;&amp;quot;, &amp;quot;(eval):96:in `filter_func&#39;&amp;quot;, &amp;quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/pipeline.rb:260:in `filter_batch&#39;&amp;quot;, &amp;quot;org/jruby/RubyProc.java:281:in `call&#39;&amp;quot;, &amp;quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb:186:in `each&#39;&amp;quot;, &amp;quot;org/jruby/RubyHash.java:1342:in `each&#39;&amp;quot;, &amp;quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb:185:in `each&#39;&amp;quot;, &amp;quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/pipeline.rb:258:in `filter_batch&#39;&amp;quot;, &amp;quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/pipeline.rb:246:in `worker_loop&#39;&amp;quot;, &amp;quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/pipeline.rb:225:in `start_workers&#39;&amp;quot;]} </description>
			<content type="html"><![CDATA[<p>记录一些logstash的配置问题</p>
<!-- more -->
<h3 id="想要排除某些信息">想要排除某些信息</h3>
<p><a href="https://www.elastic.co/guide/en/logstash/5.4/event-dependent-configuration.html#conditionals">官方文档</a></p>
<pre><code>if &quot;_grokparsefailure&quot; not in [tags] {
        if [sqlDuring] &lt; 5 {
                 drop {}
         }
}
else {
        drop {}
}
</code></pre><blockquote>
<p>请务必注意 如果failure 可能会导致找不到 sqlDuring变量 而报错</p>
</blockquote>
<pre><code>[2019-12-05T17:53:03,017][FATAL][logstash.runner          ] An unexpected error occurred! {:error=&gt;#&lt;NoMethodError: undefined method `&lt;' for nil:NilClass&gt;, :backtrace=&gt;[&quot;(eval):139:in `initialize'&quot;, &quot;org/jruby/RubyArray.java:1613:in `each'&quot;, &quot;(eval):137:in `initialize'&quot;, &quot;org/jruby/RubyProc.java:281:in `call'&quot;, &quot;(eval):96:in `filter_func'&quot;, &quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/pipeline.rb:260:in `filter_batch'&quot;, &quot;org/jruby/RubyProc.java:281:in `call'&quot;, &quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb:186:in `each'&quot;, &quot;org/jruby/RubyHash.java:1342:in `each'&quot;, &quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/util/wrapped_synchronous_queue.rb:185:in `each'&quot;, &quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/pipeline.rb:258:in `filter_batch'&quot;, &quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/pipeline.rb:246:in `worker_loop'&quot;, &quot;/usr/local/logstash-5.0.2/logstash-core/lib/logstash/pipeline.rb:225:in `start_workers'&quot;]}
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Linux一些脚本汇总</title>
			<link>https://www.ngirl.xyz/posts/25-linux%E4%B8%80%E4%BA%9B%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB/</link>
			<pubDate>Fri, 01 Nov 2019 17:50:26 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/25-linux%E4%B8%80%E4%BA%9B%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB/</guid>
			<description>记录一些shell脚本
1 清理es几天前的索引脚本 2 从mysql导出表到clickhouse脚本
 ###命令汇总
生成字符串 tr -dc A-Za-z0-9_@$\%\^\/\+ &amp;lt; /dev/urandom|head -c 16|xargs grep需要转义的字符 grep &#39;&amp;quot;第一个转义\$第二个转义\[{&#39; a.txt 或者直接使用-F grep -F &#39;&amp;quot;$[{&#39; a.txt sed命令 # 替换24位字符 /abcd...123 为 /5fcb9ab67195b854c35afd12 sed &#39;s/\/[a-z0-9]\{24\}/\/5fcb9ab67195b854c35afd12/g&#39; shell参数 while [ -n &amp;quot;$1&amp;quot; ] do case &amp;quot;$1&amp;quot; in -a) a=$2;shift 2;; -s) s=$2;shift 2;; *) ;; case done #%处理变量 tmpDir=/dir1/dir2/dir3/my.file.txt ${tmpDir#*/}	-&amp;gt; dir1/dir2/dir3/my.file.txt	(左)删除从左往右第一个 /以及左边的所有内容 ${tmpDir##*/}	-&amp;gt; my.file.txt	(左)删除从左往右最后一个/以及左边的所有内容 ${tmpDir%/*}	-&amp;gt; /dir1/dir2/dir3/	(右)删除从右往左第一个 /以及右边的所有内容 ${tmpDir%%/*}	-&amp;gt; 空	(右)删除从右往左最后一个/以及右边的所有内容 dd+grep  来自:“���”引发的线上事故</description>
			<content type="html"><![CDATA[<p>记录一些shell脚本</p>
<!-- more -->
<p>1 <a href="//zhangzw001.github.io/sh/clean_es_data.sh.sh">清理es几天前的索引脚本</a>
2 <a href="//zhangzw001.github.io/sh/clickhouse_from_mysql.sh">从mysql导出表到clickhouse脚本</a></p>
<hr>
<p>###命令汇总</p>
<h4 id="生成字符串">生成字符串</h4>
<pre><code>tr -dc A-Za-z0-9_@$\%\^\/\+ &lt; /dev/urandom|head -c 16|xargs

</code></pre><h4 id="grep需要转义的字符">grep需要转义的字符</h4>
<pre><code>grep '&quot;第一个转义\$第二个转义\[{'  a.txt
或者直接使用-F
grep -F '&quot;$[{' a.txt
</code></pre><h4 id="sed命令">sed命令</h4>
<pre><code># 替换24位字符 /abcd...123 为 /5fcb9ab67195b854c35afd12 
sed  's/\/[a-z0-9]\{24\}/\/5fcb9ab67195b854c35afd12/g'
</code></pre><h4 id="shell参数">shell参数</h4>
<pre><code>while [ -n &quot;$1&quot; ]
do
 case &quot;$1&quot; in 
  -a) a=$2;shift 2;;
  -s) s=$2;shift 2;;
  *) ;;
 case
done
</code></pre><h3 id="处理变量">#%处理变量</h3>
<pre><code>tmpDir=/dir1/dir2/dir3/my.file.txt
${tmpDir#*/}	-&gt; dir1/dir2/dir3/my.file.txt	(左)删除从左往右第一个  /以及左边的所有内容
${tmpDir##*/}	-&gt; my.file.txt			(左)删除从左往右最后一个/以及左边的所有内容
${tmpDir%/*}	-&gt; /dir1/dir2/dir3/		(右)删除从右往左第一个  /以及右边的所有内容
${tmpDir%%/*}	-&gt; 空				(右)删除从右往左最后一个/以及右边的所有内容
</code></pre><h3 id="ddgrep">dd+grep</h3>
<blockquote>
<p>来自:<a href="https://qcrao.com/2020/04/27/codec-accident/">“���”引发的线上事故</a></p>
</blockquote>
<p>由于一些大文件grep很慢,通过dd+grep查找, 这里简单举例说明</p>
<pre><code>#a.txt
123
456
789
abc
kkk
</code></pre><p>有这么一个文件a.txt,需要找到abc</p>
<pre><code># bs代表每次输入输出块的大小
# skip代表跳过的bytes = bs * skip 
# count代表copy多个块,最后输出总bytes = bs * count

$ dd if=a.txt bs=2 skip=0 count=5
123
456
785+0 records in
5+0 records out
10 bytes (10 B) copied, 4.4648e-05 s, 224 kB/s
</code></pre><pre><code># 如下会跳过10字节,然后输出10字节内容
$ dd if=a.txt bs=2 skip=5 count=5
9
abc
kkk
5+0 records in
5+0 records out
10 bytes (10 B) copied, 6.1424e-05 s, 163 kB/s
</code></pre>]]></content>
		</item>
		
		<item>
			<title>filebeat7收集mysql慢日志到es</title>
			<link>https://www.ngirl.xyz/posts/24-filebeat7%E6%94%B6%E9%9B%86mysql%E6%85%A2%E6%97%A5%E5%BF%97%E5%88%B0es/</link>
			<pubDate>Wed, 30 Oct 2019 16:56:37 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/24-filebeat7%E6%94%B6%E9%9B%86mysql%E6%85%A2%E6%97%A5%E5%BF%97%E5%88%B0es/</guid>
			<description>&lt;p&gt;慢日志提供给开发查看, 采用elk统一提供,这里采用k8s环境搭建&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>慢日志提供给开发查看, 采用elk统一提供,这里采用k8s环境搭建</p>
<p>原文: <a href="https://www.cnblogs.com/smail-bao/p/9528072.html">ELK收集mysql_slow.log</a>
其他: <a href="https://blog.csdn.net/u012491646/article/details/90750571">filebeat （7.1.0）docker容器</a></p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="slowlog内容分析">slowlog内容分析</h3>
<ul>
<li>5.5 版本慢查询日志</li>
</ul>
<pre><code># Time: 191030 17:03:13
# User@Host: myuser[myuser] @  [10.10.0.1]
# Query_time: 3.329673  Lock_time: 0.000107 Rows_sent: 0  Rows_examined: 3971182
SET timestamp=1572426193;
select * from a where name = 1 limit 1;
</code></pre><ul>
<li>5.6 版本慢查询日志</li>
</ul>
<pre><code># Time: 191030 17:03:13
# User@Host: myuser[myuser] @  [10.10.0.1] Id: 1111
# Query_time: 3.329673  Lock_time: 0.000107 Rows_sent: 0  Rows_examined: 3971182
use db_name;
SET timestamp=1572426193;
select * from a where name = 1 limit 1;
</code></pre><ul>
<li>5.7 版本慢查询日志</li>
</ul>
<pre><code># Time: 2019-10-06T13:25:38.703546+08:00
# User@Host: myuser[myuser] @  [10.10.0.1] Id: 1111
# Query_time: 3.329673  Lock_time: 0.000107 Rows_sent: 0  Rows_examined: 3971182
SET timestamp=1572426193;
select * from a where name = 1 limit 1;
</code></pre><ul>
<li>除以上格式以外,还需要注意慢查询代码块,可能并不是每次都有 # Time</li>
</ul>
<blockquote>
<p>一条完整的日志：最终将以# User@Host: 开始的行，和以SQL语句结尾的行合并为一条完整的慢日志语句</p>
</blockquote>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 开始部署filebeat7 </font>
</center>
<h3 id="准备镜像">准备镜像</h3>
<pre><code>docker pull store/elastic/filebeat:7.2.0
</code></pre><h3 id="filebeat配置文件">filebeat配置文件</h3>
<pre><code>filebeat.inputs:
- type: log
  enabled: true
  paths:
    - /opt/slow.log

  exclude_lines: ['^\# Time']

  multiline.pattern: '^\# Time|^\# User'
  multiline.negate: true
  multiline.match: after

  tail_files: true

output.elasticsearch:
  enabled: true
  hosts: [&quot;10.0.0.100:9200&quot;]
  protocol: &quot;http&quot;
  indices:
    - index: &quot;es-index-name&quot;
</code></pre><h3 id="k8s部署文件">k8s部署文件</h3>
<pre><code>k8s-filebeat-7.2.0.yml
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    elastic-app: filebeat
  name: filebeat
  namespace: ns-elastic7
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      elastic-app: filebeat
  template:
    metadata:
      labels:
        elastic-app: filebeat
    spec:
      containers:
        - name: filebeat
          image: store/elastic/filebeat:7.2.0
          volumeMounts:
            - name: filebeat-config
              mountPath: /usr/share/filebeat/filebeat.yml
            - name: mysql-dev-252
              mountPath: /opt/php-mysql-dev-0-slow.log
      volumes:
        - name: filebeat-config
          hostPath:
            path: /data/k8s-container/elk-7.2.0/filebeat-7.2.0/filebeat.yml
        - name: mysql-dev-252
          hostPath:
            path: /data/k8s-container/mysql5.5/slow.log
</code></pre><h3 id="logstash分析mysql日志">logstash分析mysql日志</h3>
<blockquote>
<p>省略input的kafka 和ouput的es</p>
</blockquote>
<pre><code>    if [type] == &quot;showlog1&quot; or [type] == &quot;showlog2&quot; {
        json {
                source =&gt; &quot;message&quot;
        }

        mutate {
                gsub =&gt; [ &quot;message&quot;, &quot;\n&quot;, &quot;&quot; ]
        }
        grok {
                match =&gt; [&quot;message&quot;,&quot;(?m)^# User@Host: %{USER:user}\[[^\]]+\] @  \[%{IP:clientip}\]  Id: %{NUMBER:Id:int}# Query_time: %{NUMBER:query_time:float}\s+Lock_time: %{NUMBER:lock_time:float}\s+Rows_sent: %{NUMBER:rows_sent:int}\s+Rows_examined: %{NUMBER:rows_examined:int}(?&lt;dbnameall&gt;.*)SET\s+timestamp=%{NUMBER:timestamp_mysql:int};(?&lt;query&gt;.*)&quot;]
        }
        date {
                match =&gt; [&quot;timestamp_mysql&quot;, &quot;UNIX&quot;]
                target =&gt; &quot;@timestamp&quot;
        }
    }
</code></pre>]]></content>
		</item>
		
		<item>
			<title>mysql5.5主与mysql5.7从部署配置</title>
			<link>https://www.ngirl.xyz/posts/23-mysql5-5%E4%B8%BB%E4%B8%8Emysql5-7%E4%BB%8E%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/</link>
			<pubDate>Tue, 29 Oct 2019 14:56:55 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/23-mysql5-5%E4%B8%BB%E4%B8%8Emysql5-7%E4%BB%8E%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/</guid>
			<description>由于需要将旧版mysql5.5的数据同步到新mysql5.7, 并且会对部分表分库
参考教程: mysql从5.5直接升级到5.7
 mysql5.5升级到mysql5.7   采用mysql5.5数据目录升级为mysql5.7 1 从mysql5.5的从库 copy /data数据 2 修改新的mysql5.7配置文件 my.cnf，添加datadir，指向5.5数据目录 3 新安装数据库执行(本次不需要执行) /usr/local/mysql57/bin/mysqld --defaults-file=/etc/my57.cnf --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/disk/u01 4 启动mysql 5 此时数据目录还是5.5的，需要执行mysql_upgrade进行升级，在执行表修复前，需要确认一个参数innodb_file_per_table，mysql官网对该参数的解释如下 该参数在5.5版本默认为OFF，所有表和索引都导入一个共享文件中，名为ibdata1,但在5.6.7及以后版本，改参数被默认设置为ON，即每张表都有对应的表和索引存储文件，每个schema下，每个frm文件都有对应的ibd文件。 在执行mysql_upgrade时，会修复系统表，并且如果该参数在5.5和5.7版本均使用默认值，则会将之前共享表和索引的存储方式改为每张表单独存储表和索引的形式，故会出现拷贝复制的操作，如果数据量比较大，则用时就会很长， 使用nnodb_file_per_table=1，及表和索引单独存储的优缺点，可查看mysql官网介绍。 6 使用mysql_upgrade检测并修复表 /usr/local/mysql57/bin/mysql_upgrade -S /disk/u01/mysql.sock  以上已经完成对mysql5.5数据升级 在mysql5.7运行的功能
  配置mysql5.5主与mysql5.7从   将msyql5.7作为mysql5.5的从库  # 从库执行, POS位置以 show master status\G 查询为准 stop slave; SET GLOBAL read_only=0; reset slave all; CHANGE MASTER TO MASTER_HOST=&#39;db_master.prod.zhangzw.com&#39;,MASTER_PORT=3306,MASTER_USER=&#39;xxx&#39;,MASTER_PASSWORD=&#39;xxx&#39;,MASTER_LOG_FILE=&#39;m1-master-bin.000001&#39;,MASTER_LOG_POS=107; start slave; 在主库测试创建表, 查看是否会同步到mysql5.7从库 create table tutorials_tbl( tutorial_id INT NOT NULL AUTO_INCREMENT, tutorial_title VARCHAR(100) NOT NULL, tutorial_author VARCHAR(40) NOT NULL, submission_date DATE, PRIMARY KEY ( tutorial_id ) );  修改mysql5.</description>
			<content type="html"><![CDATA[<p>由于需要将旧版mysql5.5的数据同步到新mysql5.7, 并且会对部分表分库</p>
<!-- more -->
<p>参考教程: <a href="https://www.cnblogs.com/qq931399960/p/10243758.html">mysql从5.5直接升级到5.7</a></p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> mysql5.5升级到mysql5.7 </font>
</center>
<h3 id="采用mysql55数据目录升级为mysql57">采用mysql5.5数据目录升级为mysql5.7</h3>
<pre><code>1 从mysql5.5的从库 copy /data数据
2 修改新的mysql5.7配置文件 my.cnf，添加datadir，指向5.5数据目录
3 新安装数据库执行(本次不需要执行)
  /usr/local/mysql57/bin/mysqld --defaults-file=/etc/my57.cnf --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/disk/u01
4 启动mysql
5 此时数据目录还是5.5的，需要执行mysql_upgrade进行升级，在执行表修复前，需要确认一个参数innodb_file_per_table，mysql官网对该参数的解释如下
 该参数在5.5版本默认为OFF，所有表和索引都导入一个共享文件中，名为ibdata1,但在5.6.7及以后版本，改参数被默认设置为ON，即每张表都有对应的表和索引存储文件，每个schema下，每个frm文件都有对应的ibd文件。
 在执行mysql_upgrade时，会修复系统表，并且如果该参数在5.5和5.7版本均使用默认值，则会将之前共享表和索引的存储方式改为每张表单独存储表和索引的形式，故会出现拷贝复制的操作，如果数据量比较大，则用时就会很长，
 使用nnodb_file_per_table=1，及表和索引单独存储的优缺点，可查看mysql官网介绍。
6 使用mysql_upgrade检测并修复表
 /usr/local/mysql57/bin/mysql_upgrade -S /disk/u01/mysql.sock
</code></pre><blockquote>
<p>以上已经完成对mysql5.5数据升级 在mysql5.7运行的功能</p>
</blockquote>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 配置mysql5.5主与mysql5.7从 </font>
</center>
<h3 id="将msyql57作为mysql55的从库">将msyql5.7作为mysql5.5的从库</h3>
<pre><code> # 从库执行, POS位置以 show master status\G 查询为准
 stop slave;
 SET GLOBAL read_only=0;
 reset slave all;
 CHANGE MASTER TO MASTER_HOST='db_master.prod.zhangzw.com',MASTER_PORT=3306,MASTER_USER='xxx',MASTER_PASSWORD='xxx',MASTER_LOG_FILE='m1-master-bin.000001',MASTER_LOG_POS=107;
 start slave;
</code></pre><h3 id="在主库测试创建表-查看是否会同步到mysql57从库">在主库测试创建表, 查看是否会同步到mysql5.7从库</h3>
<pre><code>create table tutorials_tbl(
   tutorial_id INT NOT NULL AUTO_INCREMENT,
   tutorial_title VARCHAR(100) NOT NULL,
   tutorial_author VARCHAR(40) NOT NULL,
   submission_date DATE,
   PRIMARY KEY ( tutorial_id )
);
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 修改mysql5.7库名 </font>
</center>
<h3 id="修改库名">修改库名</h3>
<blockquote>
<p>没问题之后,我们需要将mysql5.7的mydatabase库改成mydatabasenew库名, 断开mysql5.5 和mysql5.7主从同步(最好设置mysql5.5只读,防止数据差异), 在mysql5.7上执行改库名, 以下有触发器的表会修改失败</p>
</blockquote>
<blockquote>
<p>测试执行时间在15s左右</p>
</blockquote>
<pre><code>#!/bin/bash
# 假设将sakila数据库名改为new_sakila
# MyISAM直接更改数据库目录下的文件即可
new_database=mydatabasenew
old_database=mydatabase

mysql -S /disk/u01/mysql.sock -e 'create database if not exists ${new_database}'
list_table=$(mysql -S /disk/u01/mysql.sock -Nse  &quot;select table_name from information_schema.TABLES where TABLE_SCHEMA='${old_database}'&quot;)
for table in $list_table
do
    mysql -S /disk/u01/mysql.sock -e &quot;rename table ${old_database}.$table to ${new_database}.$table&quot;
done
</code></pre><h3 id="此时在配置新的mysql57的主从机器">此时在配置新的mysql5.7的主从机器</h3>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 一些配置问题 </font>
</center>
<hr>
<h3 id="gtid_mode-配置不统一">GTID_MODE 配置不统一</h3>
<pre><code>The replication receiver thread cannot start because the master has GTID_MODE = OFF and this server has GTID_MODE = ON.

# 永久修改
gtid_mode = off

# 一次性关闭步骤：
stop slave;
SET GLOBAL GTID_MODE = 'ON_PERMISSIVE';
SET GLOBAL GTID_MODE = 'OFF_PERMISSIVE';
SET GLOBAL GTID_MODE = 'OFF';
start slave;
</code></pre><h3 id="mysql57-sql_mode">mysql5.7 sql_mode</h3>
<pre><code>sql_mode='ONLY_FULL_GROUP_BY,NO_ZERO_IN_DATE,ALLOW_INVALID_DATES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'

</code></pre><hr>
<h3 id="注意一台机器多个mysql启动脚本修改问题">注意一台机器多个mysql启动脚本修改问题</h3>
<pre><code>#以下两处修改 /etc/init.d/mysqld57 
parse_server_arguments `$print_defaults -c /etc/my57.cnf mysqld server mysql_server mysql.server`
$bindir/mysqld_safe --defaults-file=/etc/my57.cnf --pid-file=&quot;$mysqld_pid_file_path&quot; $other_args &gt;/dev/null &amp;
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 一些info信息 </font>
</center>
<h3 id="usrlocalmysql57binmysql_upgrade--s-disku01mysqlsock-的部分记录">/usr/local/mysql57/bin/mysql_upgrade -S /disk/u01/mysql.sock 的部分记录</h3>
<pre><code># /usr/local/mysql57/bin/mysql_upgrade -S /disk/u01/mysql.sock
Checking if update is needed.
Checking server version.
Running queries to upgrade MySQL server.
mysql_upgrade: (non fatal) [WARNING] 1642: Pre-4.1 password hash found. It is deprecated and will be removed in a future release. Please upgrade it to a new format.
Checking system database.
mysql.columns_priv                                 OK
mysql.db                                           OK
mysql.engine_cost                                  OK
mysql.event                                        OK
mysql.func                                         OK
mysql.general_log                                  OK
mysql.gtid_executed                                OK
mysql.help_category                                OK
mysql.help_keyword                                 OK
mysql.help_relation                                OK
mysql.help_topic                                   OK
mysql.host                                         OK
mysql.innodb_index_stats                           OK
mysql.innodb_table_stats                           OK
mysql.ndb_binlog_index                             OK
mysql.plugin                                       OK
mysql.proc                                         OK
mysql.procs_priv                                   OK
mysql.proxies_priv                                 OK
mysql.server_cost                                  OK
mysql.servers                                      OK
mysql.slave_master_info                            OK
mysql.slave_relay_log_info                         OK
mysql.slave_worker_info                            OK
mysql.slow_log                                     OK
...

</code></pre><h3 id="附录-my57cnf">附录 my57.cnf</h3>
<pre><code>[client]
port = 3308
socket = /disk/u01/mysql.sock

[mysql]
prompt=&quot;\u@m1_618_u [\d]&gt; &quot;
no-auto-rehash

[mysqld]
sql_mode='ONLY_FULL_GROUP_BY,NO_ZERO_IN_DATE,ALLOW_INVALID_DATES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
replicate-wild-do-table=mydatabase.%

binlog-ignore-db=information_schema
binlog-ignore-db=mysql
binlog-ignore-db=performance_schema
binlog-ignore-db=test

binlog-do-db=mydatabase

user = mysql
port = 3308
basedir = /usr/local/mysql57
datadir = /disk/u01
socket = /disk/u01/mysql.sock
pid-file = /disk/u01/dbm1_u.pid
tmpdir = /disk/u02
server-id = 123
character-set-server = utf8
skip_name_resolve = 1
innodb_file_per_table = 1
explicit_defaults_for_timestamp = 0
read_only = 1

# buffer&amp;cache
table_open_cache = 100
table_definition_cache = 400
table_open_cache_instances = 64
sort_buffer_size = 4M
join_buffer_size = 4M
read_buffer_size = 8M
read_rnd_buffer_size = 4M

# thread&amp;connection
thread_stack = 256K
thread_cache_size = 768
back_log = 1024
max_connections = 3000
max_connect_errors = 1000000

# temptable
tmp_table_size = 32M
max_heap_table_size = 32M

# network
max_allowed_packet = 32M
#lock_wait_timeout = 3600
#interactive_timeout = 600
#wait_timeout = 600

# query cache
query_cache_size = 0
query_cache_type = 0

# 设置errorlog、slowlog和generallog的时区，默认UTC
log_timestamps = SYSTEM

# error-log
log_error = /disk/u02/mysqld.log

# slow-log
slow_query_log = 1
slow_query_log_file = /disk/u02/slow.log
long_query_time = 0.1
log_queries_not_using_indexes =1
log_throttle_queries_not_using_indexes = 60
min_examined_row_limit = 100
log_slow_admin_statements = 1
log_slow_slave_statements = 1

# general log
#general-log = 1
general_log_file=/disk/u02/query.log

# binlog
binlog_format = row
binlog_checksum = 1
log-bin = /disk/u02/m1-bin
log-bin-index = /disk/u02/m1-bin.index
sync_binlog = 0
binlog_cache_size = 4M
max_binlog_cache_size = 1G
max_binlog_size = 512M
expire_logs_days = 15

# GTID
gtid_mode = off
enforce_gtid_consistency = 1
log_slave_updates

# Replication
master_info_repository = TABLE
relay_log_info_repository = TABLE
slave-rows-search-algorithms = 'INDEX_SCAN,HASH_SCAN'
relay_log_recovery = 1
relay_log_purge = 1
relay-log=/disk/u02/m1-relay-bin
relay-log-index=/disk/u02/m1-relay-bin.index

# innodb-buffer&amp;cache
innodb_buffer_pool_size = 1G
innodb_buffer_pool_instances = 4
#innodb_additional_mem_pool_size = 16M
innodb_max_dirty_pages_pct = 50

# innodb log
innodb_data_file_path = ibdata1:256M:autoextend
innodb_log_file_size = 256M
innodb_log_files_in_group = 2
innodb_flush_log_at_trx_commit = 2
innodb_log_buffer_size = 32M
#innodb_max_undo_log_size = 4G
#innodb_undo_directory = undolog
innodb_undo_tablespaces = 0

# innodb-io
innodb_flush_method = O_DIRECT
innodb_io_capacity = 600
innodb_io_capacity_max = 2000
innodb_flush_sync = 0
innodb_flush_neighbors = 0
#innodb_lru_scan_depth = 4000
innodb_write_io_threads = 8
innodb_read_io_threads = 8
innodb_purge_threads = 4
innodb_page_cleaners = 4

# transaction,lock
#innodb_sync_spin_loops = 100
#innodb_spin_wait_delay = 30
innodb_lock_wait_timeout = 10
innodb_print_all_deadlocks = 1
innodb_rollback_on_timeout = 1

innodb_open_files = 65535

innodb_online_alter_log_max_size = 1G

# innodb status
innodb_status_file = 1
# 注意: 开启 innodb_status_output &amp; innodb_status_output_locks 后, 可能会导致log-error文件增长较快
innodb_status_output = 0
innodb_status_output_locks = 0

#performance_schema
performance_schema = 1
performance_schema_instrument = '%=on'

#innodb monitor
innodb_monitor_enable=&quot;module_innodb&quot;
innodb_monitor_enable=&quot;module_server&quot;
innodb_monitor_enable=&quot;module_dml&quot;
innodb_monitor_enable=&quot;module_ddl&quot;
innodb_monitor_enable=&quot;module_trx&quot;
innodb_monitor_enable=&quot;module_os&quot;
innodb_monitor_enable=&quot;module_purge&quot;
innodb_monitor_enable=&quot;module_log&quot;
innodb_monitor_enable=&quot;module_lock&quot;
innodb_monitor_enable=&quot;module_buffer&quot;
innodb_monitor_enable=&quot;module_index&quot;
innodb_monitor_enable=&quot;module_ibuf_system&quot;
innodb_monitor_enable=&quot;module_buffer_page&quot;
innodb_monitor_enable=&quot;module_adaptive_hash&quot;

# MyISAM
key_buffer_size = 1024M
bulk_insert_buffer_size = 64M
myisam_sort_buffer_size = 128M
myisam_repair_threads = 1


[mysqldump]
quick
max_allowed_packet = 32M
</code></pre>]]></content>
		</item>
		
		<item>
			<title>es5集群磁盘扩容</title>
			<link>https://www.ngirl.xyz/posts/22-es%E9%9B%86%E7%BE%A4%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</link>
			<pubDate>Mon, 28 Oct 2019 14:59:52 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/22-es%E9%9B%86%E7%BE%A4%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</guid>
			<description>es集群磁盘不足,对磁盘扩容遇到一些的问题
  重启集群前，先设置集群停止分片移动： curl -XPUT http://localhost:9200/_cluster/settings -d &#39;{ &amp;quot;transient&amp;quot; : { &amp;quot;cluster.routing.allocation.enable&amp;quot; : &amp;quot;none&amp;quot; } }&#39; 对磁盘进行扩容,每次操作一个节点 # 直接扩容磁盘到2T //针对ext4文件格式的操作系统（如CentOS6）：// umount /dev/vdb e2fsck -f /dev/vdb resize2fs /dev/vdb mount /dev/vdb /data # 或者新增 2T云盘/dev/vdc umount /data/ mkdir /data2 mount /dev/vdb /data2 mkfs.ext4 /dev/vdc mount /dev/vdc /data cp -ra /data2/* /data/ 重启之后，恢复分片自动分配： curl -XPUT http://localhost:9200/_cluster/settings -d &#39;{ &amp;quot;transient&amp;quot; : { &amp;quot;cluster.routing.allocation.enable&amp;quot; : &amp;quot;all&amp;quot; } }&#39;    如果需要下线其中的节点, 先将分片都转义到其他节点 # 执行以下命令会自动将10.</description>
			<content type="html"><![CDATA[<p>es集群磁盘不足,对磁盘扩容遇到一些的问题</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="重启集群前先设置集群停止分片移动">重启集群前，先设置集群停止分片移动：</h3>
<pre><code>curl -XPUT http://localhost:9200/_cluster/settings -d '{
&quot;transient&quot; : {
&quot;cluster.routing.allocation.enable&quot; : &quot;none&quot;
}
}'
</code></pre><h3 id="对磁盘进行扩容每次操作一个节点">对磁盘进行扩容,每次操作一个节点</h3>
<pre><code># 直接扩容磁盘到2T
//针对ext4文件格式的操作系统（如CentOS6）：//
umount /dev/vdb
e2fsck -f /dev/vdb
resize2fs /dev/vdb
mount /dev/vdb /data


# 或者新增 2T云盘/dev/vdc
umount /data/
mkdir /data2
mount /dev/vdb /data2
mkfs.ext4 /dev/vdc
mount /dev/vdc /data
cp -ra /data2/* /data/
</code></pre><h3 id="重启之后恢复分片自动分配">重启之后，恢复分片自动分配：</h3>
<pre><code>curl -XPUT http://localhost:9200/_cluster/settings -d '{
&quot;transient&quot; : {
&quot;cluster.routing.allocation.enable&quot; : &quot;all&quot;
}
}'
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="如果需要下线其中的节点-先将分片都转义到其他节点">如果需要下线其中的节点, 先将分片都转义到其他节点</h3>
<pre><code># 执行以下命令会自动将10.10.0.1 节点上的分片全部迁移到其他机器, 等待迁移完成, 将改空机器下线即可
curl -XPUT 127.0.0.1:9200/_cluster/settings -d '{
&quot;transient&quot; :{
&quot;cluster.routing.allocation.exclude._ip&quot; : &quot;10.10.0.1&quot;
}
}'
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="另外对于--pathdata-配置多快盘的问题">另外对于  path.data 配置多快盘的问题</h3>
<pre><code>比如es8配置了三块盘:
/disk4/data -&gt; sde, /disk5/data -&gt; sdf, disk6/data -&gt; sdg

这里注意 es node的data path尽量保证盘的大小差别不要太大, sde,sdf,sdg的大小保障差不多, 否则由于es shard 均衡的时候可能会优先分配到磁盘大的目录, 可能会导致sde(假如这个磁盘最大)的IO高, 而sdf等IO低
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="简单的配置信息elasticsearch5">简单的配置信息elasticsearch5</h3>
<pre><code> cluster.name: es-dev
 node.name: es1-u
 path.data: /data/es/data
 path.logs: /data/es/logs
 network.host: 0.0.0.0
 discovery.zen.ping.unicast.hosts: [&quot;10.10.0.1:9300&quot;,&quot;10.10.0.2:9300&quot;,&quot;10.10.0.3:9300&quot;,&quot;10.10.0.4:9300&quot;]
 http.cors.enabled: true
 http.cors.allow-origin: &quot;*&quot;
 xpack.security.enabled: false
 bootstrap.system_call_filter: false
 thread_pool.bulk.queue_size: 3000
 # 防止脑裂
 discovery.zen.minimum_master_nodes: 2
</code></pre>]]></content>
		</item>
		
		<item>
			<title>流量复制工具gor</title>
			<link>https://www.ngirl.xyz/posts/21-%E6%B5%81%E9%87%8F%E5%A4%8D%E5%88%B6%E5%B7%A5%E5%85%B7gor/</link>
			<pubDate>Mon, 28 Oct 2019 14:04:37 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/21-%E6%B5%81%E9%87%8F%E5%A4%8D%E5%88%B6%E5%B7%A5%E5%85%B7gor/</guid>
			<description>Gor 是一款go语言实现的简单的http流量复制工具，它的主要目的是使你的生产环境HTTP真实流量在测试环境和预发布环境重现
 流量复制工具   下载安装 github下载地址: https://github.com/buger/goreplay/releases
tar -xvf gor_1.0.0_x64.tar.gz mv gor /usr/bin/ which gor 命令 1 保存请求到文件 # 将本机所有80请求保存到gor-20171120_0.log文件(注意会生成很多文件) gor --input-raw :80 --output-file gor-%Y%m%d.log # --output-file-append 会生成gor-20171120.log文件 gor --input-raw :80 --output-file gor-%Y%m%d.log --output-file-append 2 根据文件回放请求 # 镜像qps回放 gor --input-file gor-aaaa-20171120.log --output-http aaaa-dev.test.com # 两倍镜像qps回放 gor --input-file &amp;quot;gor-aaaa-20171120.log|200%&amp;quot; --output-http aaaa-dev.test.com 3 过滤url后保存请求到文件 # 排除s.test.com的请求 gor --input-raw :80 --output-file gor-%Y%m%d.log --output-file-append --http-disallow-header &amp;quot;Host: s.test.com&amp;quot; --http-disallow-header &amp;quot;Host: www.test.com&amp;quot; --http-disallow-header &amp;quot;Host: bbs.</description>
			<content type="html"><![CDATA[<p>Gor 是一款go语言实现的简单的http流量复制工具，它的主要目的是使你的生产环境HTTP真实流量在测试环境和预发布环境重现</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 流量复制工具 </font>
</center>
<h3 id="下载安装">下载安装</h3>
<p>github下载地址: <a href="https://github.com/buger/goreplay/releases">https://github.com/buger/goreplay/releases</a></p>
<pre><code>tar -xvf gor_1.0.0_x64.tar.gz
mv gor /usr/bin/

which gor
</code></pre><h3 id="命令">命令</h3>
<pre><code>1   保存请求到文件
# 将本机所有80请求保存到gor-20171120_0.log文件(注意会生成很多文件)
gor --input-raw :80 --output-file gor-%Y%m%d.log

# --output-file-append 会生成gor-20171120.log文件
gor --input-raw :80 --output-file gor-%Y%m%d.log --output-file-append


2   根据文件回放请求
# 镜像qps回放
gor --input-file gor-aaaa-20171120.log --output-http aaaa-dev.test.com
# 两倍镜像qps回放
gor --input-file &quot;gor-aaaa-20171120.log|200%&quot; --output-http aaaa-dev.test.com


3   过滤url后保存请求到文件
# 排除s.test.com的请求
gor --input-raw :80 --output-file gor-%Y%m%d.log --output-file-append --http-disallow-header &quot;Host: s.test.com&quot; --http-disallow-header &quot;Host: www.test.com&quot;  --http-disallow-header &quot;Host: bbs.test.com&quot;
# 只存储aaaa.test.com的请求
gor --input-raw :80 --output-file gor-aaaa-%Y%m%d.log --output-file-append --http-allow-header &quot;Host: aaaa.test.com&quot;

# https的不能抓包
gor --input-raw :443 --output-file gor-ssl-aaaa-%Y%m%d.log --output-file-append --http-allow-header &quot;Host: aaaa.test.com&quot;





4   在线镜像复制请求
# 将生产aaaa.test.com的请求复制到 aaaa-dev.test.com 环境!
gor --input-raw :80 --output-http &quot;aaaa-dev.test.com&quot; --http-allow-header &quot;Host: aaaa.test.com&quot;
</code></pre><h3 id="离线文件编辑">离线文件编辑</h3>
<pre><code>文件的每个请求通过 如下字符串分割!
ð&lt;9f&gt;&lt;90&gt;µð&lt;9f&gt;&lt;99&gt;&lt;88&gt;ð&lt;9f&gt;&lt;99&gt;&lt;89&gt;
并且第一行是 请求的唯一码? 和时间戳!
1 9b366a8eab8d6cb8e557cb3bf43f69c36612cffb 1511165572419843000

所以可录制比如半小时的然后窃取需要的时间段!

</code></pre><h3 id="问题--https-不能抓包">问题  https 不能抓包!</h3>
<blockquote>
<p>通过添加代理, gor抓取8000端口</p>
</blockquote>
<pre><code># SSL termination
server {
  listen 443 ssl;
  server_name aaaa.test.com;

  ssl_certificate /etc/ssl/nginx/server.crt;
  ssl_certificate_key /etc/ssl/nginx/server.key;

  location / {
    proxy_set_header Host $host;
    proxy_pass http://localhost:8000;
  }
}

server {
  listen 8000;
  server_name aaaa.test.com;

  location / {
    proxy_set_header Host $host;
    proxy_pass http://production_shop_api_site;
  }
}

</code></pre>]]></content>
		</item>
		
		<item>
			<title>k8s搭建mysql5.7.24主从</title>
			<link>https://www.ngirl.xyz/posts/20-k8s%E6%90%AD%E5%BB%BAmysql5-7-24%E4%B8%BB%E4%BB%8E/</link>
			<pubDate>Thu, 24 Oct 2019 18:35:00 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/20-k8s%E6%90%AD%E5%BB%BAmysql5-7-24%E4%B8%BB%E4%BB%8E/</guid>
			<description>k8s上简单部署mysql5.7.24主从
 k8s搭建mysql5.7.24主从   参考文档 利用Kubernetes搭建mysql主从复制集群 官方dockerfile
从hub.docker.com拉取官方镜像 docker pull mysql:5.7.24  build镜像   主库master的Dockerfile from mysql:5.7.24 run sed -i &#39;/\[mysqld\]/a server-id=1\nlog-bin&#39; /etc/mysql/mysql.conf.d/mysqld.cnf COPY docker-entrypoint.sh /usr/local/bin/ 主库的docker-entrypoint.sh  先从初始镜像取 或者从github对应版本上  docker run -dti mysql:5.7.24 /bin/bash docker cp 2bfa6209d120c23:/usr/local/bin/docker-entrypoint.sh .  修改docker-entrypoint.sh  fi # 添加以下内容 echo &amp;quot;CREATE USER &#39;$MYSQL_REPLICATION_USER&#39;@&#39;%&#39; IDENTIFIED BY &#39;$MYSQL_REPLICATION_PASSWORD&#39; ;&amp;quot; | &amp;quot;${mysql[@]}&amp;quot; echo &amp;quot;GRANT REPLICATION SLAVE ON *.* TO &#39;$MYSQL_REPLICATION_USER&#39;@&#39;%&#39; IDENTIFIED BY &#39;$MYSQL_REPLICATION_PASSWORD&#39; ;&amp;quot; | &amp;quot;${mysql[@]}&amp;quot; echo &amp;quot;FLUSH PRIVILEGES ;&amp;quot; | &amp;quot;${mysql[@]}&amp;quot; # 添加以上内容 echo ls /docker-entrypoint-initdb.</description>
			<content type="html"><![CDATA[<p>k8s上简单部署mysql5.7.24主从</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> k8s搭建mysql5.7.24主从 </font>
</center>
<p>参考文档
<a href="https://www.jianshu.com/p/509b65e9a4f5">利用Kubernetes搭建mysql主从复制集群</a>
<a href="https://github.com/docker-library/mysql">官方dockerfile</a></p>
<h3 id="从hubdockercom拉取官方镜像">从hub.docker.com拉取官方镜像</h3>
<pre><code>docker pull mysql:5.7.24
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> build镜像 </font>
</center>
<h3 id="主库master的dockerfile">主库master的Dockerfile</h3>
<pre><code>from mysql:5.7.24

run sed -i '/\[mysqld\]/a server-id=1\nlog-bin' /etc/mysql/mysql.conf.d/mysqld.cnf

COPY docker-entrypoint.sh /usr/local/bin/
</code></pre><h3 id="主库的docker-entrypointsh">主库的docker-entrypoint.sh</h3>
<ul>
<li>先从初始镜像取 或者从github对应版本上</li>
</ul>
<pre><code>docker run -dti mysql:5.7.24 /bin/bash

docker cp 2bfa6209d120c23:/usr/local/bin/docker-entrypoint.sh .
</code></pre><ul>
<li>修改docker-entrypoint.sh</li>
</ul>
<pre><code>fi
# 添加以下内容
echo &quot;CREATE USER '$MYSQL_REPLICATION_USER'@'%' IDENTIFIED BY '$MYSQL_REPLICATION_PASSWORD' ;&quot; | &quot;${mysql[@]}&quot;
echo &quot;GRANT REPLICATION SLAVE ON *.* TO '$MYSQL_REPLICATION_USER'@'%' IDENTIFIED BY '$MYSQL_REPLICATION_PASSWORD' ;&quot; | &quot;${mysql[@]}&quot;
echo &quot;FLUSH PRIVILEGES ;&quot; | &quot;${mysql[@]}&quot;
# 添加以上内容
echo
  ls /docker-entrypoint-initdb.d/ &gt; /dev/null
</code></pre><ul>
<li>build主库镜像</li>
</ul>
<pre><code>docker build -t hub.zhangzw.com/bq/mysql-master:5.7.24 .
docker push hub.zhangzw.com/bq/mysql-master:5.7.24
</code></pre><h3 id="从库的docker-entrypointsh">从库的docker-entrypoint.sh</h3>
<ul>
<li>同上先从初始镜像取 或者从github对应版本上 或复制上面的文件</li>
<li>修改docker-entrypoint.sh</li>
</ul>
<pre><code>fi
# 添加以下内容
 echo &quot;STOP SLAVE;&quot; | &quot;${mysql[@]}&quot;
 echo &quot;CHANGE MASTER TO master_host='$MYSQL_MASTER_SERVICE_HOST', master_user='$MYSQL_REPLICATION_USER', master_password='$MYSQL_REPLICATION_PASSWORD' ;&quot; |  &quot;${mysql[@]}&quot;
 echo &quot;START SLAVE;&quot; | &quot;${mysql[@]}&quot;
 # 添加以上内容
echo
  ls /docker-entrypoint-initdb.d/ &gt; /dev/null

</code></pre><ul>
<li>build从库镜像</li>
</ul>
<pre><code>docker build -t hub.zhangzw.com/bq/mysql-slave:5.7.24 .
docker push hub.zhangzw.com/bq/mysql-slave:5.7.24
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 开始部署 </font>
</center>
<ul>
<li>k8s-master-mysql_5.7.24.yml</li>
</ul>
<pre><code>---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: php-mysql-master-dev
  name: php-mysql-master-dev
  namespace: db
spec:
  serviceName: &quot;php-mysql-master-dev&quot;
  replicas: 1
  selector:
    matchLabels:
      app: php-mysql-master-dev
  template:
    metadata:
      labels:
        app: php-mysql-master-dev
    spec:
      containers:
       - name: php-mysql-master-dev
         image: hub.zhangzw.com/bq/mysql-master:5.7.24
         ports:
         - containerPort: 3306
           name: db-port
         resources:
           requests:
             cpu: &quot;50m&quot;
           limits:
             cpu: &quot;1000m&quot;
         env:
         - name: MYSQL_ROOT_PASSWORD
           value: &quot;admin&quot;
         - name: MYSQL_REPLICATION_USER
           value: &quot;repl&quot;
         - name: MYSQL_REPLICATION_PASSWORD
           value: &quot;7a5b21ac65712bd95e39d3c1&quot;
         volumeMounts:
         - name: order-master-dev-data
           mountPath: /var/lib/mysql
         - name: order-master-dev-cfg
           mountPath: /etc/mysql
      volumes:
        - name: order-master-dev-data
          hostPath:
            path: /data/k8s-container/php-mysql-dev/master/data
        - name: order-master-dev-cfg
          hostPath:
            path: /data/k8s-container/php-mysql-dev/master/etc-mysql

---

kind: Service
apiVersion: v1
metadata:
  labels:
    app: php-mysql-master-dev
  name: php-mysql-master-dev-service
  namespace: db
spec:
  type: NodePort
  ports:
    - port: 3306
      name: db-port
      targetPort: 3306
      nodePort: 23306
      protocol: TCP
  selector:
    app: php-mysql-master-dev
</code></pre><ul>
<li>k8s-slave-mysql_5.7.24.yml</li>
</ul>
<pre><code>---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: php-mysql-slave-dev
  name: php-mysql-slave-dev
  namespace: db
spec:
  serviceName: &quot;php-mysql-slave-dev&quot;
  replicas: 1
  selector:
    matchLabels:
      app: php-mysql-slave-dev
  template:
    metadata:
      labels:
        app: php-mysql-slave-dev
    spec:
      containers:
       - name: php-mysql-slave-dev
         image: hub.zhangzw.com/bq/mysql-slave:5.7.24
         ports:
         - containerPort: 3306
           name: db-port
         resources:
           requests:
             cpu: &quot;50m&quot;
           limits:
             cpu: &quot;1000m&quot;
         env:
         - name: MYSQL_ROOT_PASSWORD
           value: &quot;admin&quot;
         - name: MYSQL_REPLICATION_USER
           value: &quot;repl&quot;
         - name: MYSQL_REPLICATION_PASSWORD
           value: &quot;7a5b21ac65712bd95e39d3c1&quot;
         - name: MYSQL_MASTER_SERVICE_HOST
           value: &quot;php-mysql-master-dev-service&quot;
         volumeMounts:
         - name: order-slave-dev-data
           mountPath: /var/lib/mysql
         - name: order-slave-dev-cfg
           mountPath: /etc/mysql
      volumes:
        - name: order-slave-dev-data
          hostPath:
            path: /data/k8s-container/php-mysql-dev/slave/data
        - name: order-slave-dev-cfg
          hostPath:
            path: /data/k8s-container/php-mysql-dev/slave/etc-mysql


---

kind: Service
apiVersion: v1
metadata:
  labels:
    app: php-mysql-slave-dev
  name: php-mysql-slave-dev-service
  namespace: db
spec:
  type: NodePort
  ports:
    - port: 3306
      name: db-port
      targetPort: 3306
      nodePort: 23307
      protocol: TCP
  selector:
    app: php-mysql-slave-dev
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 问题总结 </font>
</center>
<ul>
<li>从库的replay log名字会根据docker主机名变化, 也可以写在配置文件</li>
</ul>
<pre><code># Dockerfile中可以添加
run sed -i '/\[mysqld\]/a relay-log-index=php-mysql-shoporder-slave-dev-relay-bin.index' /etc/mysql/mysql.conf.d/mysqld.cnf
</code></pre><ul>
<li>
<p>注意MYSQL_MASTER_SERVICE_HOST 变量的配置, 根据你master的service变化</p>
</li>
<li>
<p>其次我docker-entrypoint.sh 文件几次手动从页面复制粘贴下来的导致各种语法错误,这里建议找到对的版本从github克隆, 或者从mysql:5.7.24镜像中cp</p>
</li>
<li>
<p>配置etc-mysql/mysql.conf.d/mysqld.cnf</p>
</li>
</ul>
<pre><code>[mysqld]
# 从库配置
read_only=1
super_read_only=1
character-set-server=utf8
# 1 去掉STRICT_TRANS_TABLES 表NOT NULL时无法创建表
# 2 修改NO_ZERO_DATE为ALLOW_INVALID_DATES 允许’0000-00-00’
#sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
sql_mode='ONLY_FULL_GROUP_BY,NO_ZERO_IN_DATE,ALLOW_INVALID_DATES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
</code></pre><ul>
<li>配置etc-mysql/conf.d/mysql.cnf</li>
</ul>
<pre><code>[mysql]
no-auto-rehash
default-character-set=utf8
</code></pre><h3 id="附录">附录</h3>
<p><a href="//zhangzw001.github.io/sh/master-docker-entrypoint.sh">master配置docker-entrypoint.sh</a>
<a href="//zhangzw001.github.io/sh/slave-docker-entrypoint.sh">slave配置docker-entrypoint.sh</a></p>
]]></content>
		</item>
		
		<item>
			<title>shell中gt和&gt;的区别</title>
			<link>https://www.ngirl.xyz/posts/19-shell%E4%B8%ADgt%E5%92%8C%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
			<pubDate>Thu, 17 Oct 2019 11:48:22 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/19-shell%E4%B8%ADgt%E5%92%8C%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
			<description>shell中 gt 和 &amp;gt; 的一些相关问题介绍和测试
 以下是bash的测试, 注意如果你是zsh可能会不同喔😯
  [[]] , [] 和test比较   [] 和test:	两者是一样的，在命令行里test expr和[ expr ]的效果相同。test中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq, -gt这种形式。 通过which [ 和which test 可以看到是命令
 [] 和test 例子
 [root@dk-centos6 ~]# a=&amp;quot;abcdef&amp;quot; [root@dk-centos6 ~]# test &amp;quot;$a&amp;quot; = &amp;quot;abcdef&amp;quot; [root@dk-centos6 ~]# echo $? 0 [root@dk-centos6 ~]# [ &amp;quot;$a&amp;quot; = &amp;quot;abcdef&amp;quot; ] [root@dk-centos6 ~]# echo $? 0 [[ ]]具体功能:
  [[是 bash 程序语言的关键字。并不是一个命令，[] 结构比结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。
  支持字符串的模式匹配（使用=~操作符时甚至支持shell的正则表达 式）,右边的字符串不加双引号的情况,可以把右边作为模式.</description>
			<content type="html"><![CDATA[<p>shell中 gt 和 &gt; 的一些相关问题介绍和测试</p>
<!-- more-->
<blockquote>
<p>以下是bash的测试, 注意如果你是zsh可能会不同喔😯</p>
</blockquote>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font  face="黑体" size=4> [[]] , [] 和test比较 </font>
</center>
<p>[] 和test:	两者是一样的，在命令行里test expr和[ expr ]的效果相同。test中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq, -gt这种形式。
通过which [ 和which test 可以看到是命令</p>
<blockquote>
<p>[] 和test 例子</p>
</blockquote>
<pre><code>[root@dk-centos6 ~]# a=&quot;abcdef&quot;
[root@dk-centos6 ~]# test &quot;$a&quot; = &quot;abcdef&quot;
[root@dk-centos6 ~]# echo $?
0
[root@dk-centos6 ~]# [ &quot;$a&quot; = &quot;abcdef&quot; ]
[root@dk-centos6 ~]# echo $?
0
</code></pre><p>[[ ]]具体功能:</p>
<ul>
<li>
<p>[[是 bash 程序语言的关键字。并不是一个命令，[<input disabled="" type="checkbox"> ] 结构比<input disabled="" type="checkbox"> 结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。</p>
</li>
<li>
<p>支持字符串的模式匹配（使用=~操作符时甚至支持shell的正则表达 式）,右边的字符串不加双引号的情况,可以把右边作为模式. 比如[[ hello == hell? ]]，结果为真。当然加引号就是文本字符串比较.</p>
</li>
<li>
<p>使用[[ &hellip; ]]条件判断结构，而不是[ &hellip; ]，能够防止脚本中的许多逻辑错误。比如，&amp;&amp;、||、&lt;和&gt; 操作符能够正常存在于[<input disabled="" type="checkbox"> ]条件判断结构中，但是如果出现在<input disabled="" type="checkbox"> 结构中的话，会报错。比如可以直接使用if [[ $a != 1 &amp;&amp; $a != 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] &amp;&amp; [ $a != 2 ]或者if [ $a -ne 1 -a $a != 2 ]。</p>
</li>
</ul>
<hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font  face="黑体" size=4> 纯数字比较 </font>
</center>
<h3 id="-通过比较ascii值gt仅能比较数字">&gt; 通过比较ASCII值,gt仅能比较数字</h3>
<pre><code>[root@dk-centos6 ~]# [ 2 \&gt; 1 ]
[root@dk-centos6 ~]# echo $?
0
[root@dk-centos6 ~]# [ 2 -gt 1 ]
[root@dk-centos6 ~]# echo $?
0
[root@dk-centos6 ~]# [[ 2 &gt; 1 ]]
[root@dk-centos6 ~]# echo $?
0
[root@dk-centos6 ~]# [[ 2 -gt 1 ]]
[root@dk-centos6 ~]# echo $?
0
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font  face="黑体" size=4> 字符串比较 </font>
</center>
<h3 id="单括号中如果要比较符号---需要转义-否则判断结果错误">单括号中如果要比较符号 &ldquo;&lt;&rdquo; &ldquo;&gt;&rdquo;, 需要转义, 否则判断结果错误</h3>
<pre><code>[root@dk-centos6 ~]# [ &quot;b&quot; &gt; &quot;a&quot; ]
[root@dk-centos6 ~]# echo $?
0
[root@dk-centos6 ~]# [ &quot;b&quot; &lt; &quot;a&quot; ]
[root@dk-centos6 ~]# echo $?
0
[root@dk-centos6 ~]# [ &quot;b&quot; \&lt; &quot;a&quot; ]
[root@dk-centos6 ~]# echo $?
1
</code></pre><h3 id="双括号不用转义--直接执行即可">双括号不用转义 , 直接执行即可</h3>
<pre><code>[root@dk-centos6 ~]# [[ &quot;b&quot; &gt; &quot;a&quot; ]]
[root@dk-centos6 ~]# echo $?
0
[root@dk-centos6 ~]# [[ &quot;b&quot; &lt; &quot;a&quot; ]]
[root@dk-centos6 ~]# echo $?
1
</code></pre>]]></content>
		</item>
		
		<item>
			<title>收藏链接</title>
			<link>https://www.ngirl.xyz/posts/18-%E6%94%B6%E8%97%8F%E9%93%BE%E6%8E%A5/</link>
			<pubDate>Thu, 17 Oct 2019 11:19:42 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/18-%E6%94%B6%E8%97%8F%E9%93%BE%E6%8E%A5/</guid>
			<description>golang     go书籍
 go圣经 go语言原本 go语言设计与实现 go夜读 《Go 语言编程之旅：一起用 Go 做项目》    go相关
 vue+go 利用go优越的性能-设计与实现高性能企业级微服务网关 Golang Sprintf 源码分析 泛型slice包 go函数调用栈     容器    云原生图书编年史 云原生大佬博客汇总 (2000个) kubernetes 社群分享 QA 汇总 k8s CRD(CustomResourceDefinition)自定义controller sample k8s 集群部署运营实践总结 k8s 创建一个只读的用户权限 kubectl 创建 Pod 背后到底发生了什么？ 白话Kubernetes网络(推荐) cgroup相关  linux cgroups 简介 cgroups与systemd     计算机基础    MySQL 5.</description>
			<content type="html"><![CDATA[<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> golang </font>
</center>
<ul>
<li>
<p>go书籍</p>
<ul>
<li><a href="http://shouce.jb51.net/gopl-zh/">go圣经</a></li>
<li><a href="https://golang.design/under-the-hood/zh-cn/part2runtime/ch07alloc/component/">go语言原本</a></li>
<li><a href="https://draveness.me/golang/">go语言设计与实现</a></li>
<li><a href="https://github.com/talkgo/night">go夜读</a></li>
<li><a href="https://github.com/go-programming-tour-book">《Go 语言编程之旅：一起用 Go 做项目》</a></li>
</ul>
</li>
<li>
<p>go相关</p>
<ul>
<li><a href="https://github.com/e421083458">vue+go 利用go优越的性能-设计与实现高性能企业级微服务网关</a></li>
<li><a href="https://dafengge0913.github.io/golang-sprintf/">Golang Sprintf 源码分析</a></li>
<li><a href="https://github.com/golang/exp/blob/master/slices/slices.go">泛型slice包</a></li>
<li><a href="https://www.zhihu.com/zvideo/1308359170928799744">go函数调用栈</a></li>
</ul>
</li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 容器 </font>
</center>
<ul>
<li><a href="https://jimmysong.io/cloud-native/memo/books/">云原生图书编年史</a></li>
<li><a href="https://zhangzw001.github.io/2019/10/12/13-%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8D%9A%E5%AE%A2%E6%B1%87%E6%80%BB/">云原生大佬博客汇总</a></li>
<li><a href="https://muzi502.github.io/archives/kubernetes-QA.html">(2000个) kubernetes 社群分享 QA 汇总</a></li>
<li><a href="https://github.com/kubernetes/sample-controller/blob/master/README.md">k8s CRD(CustomResourceDefinition)自定义controller sample</a></li>
<li><a href="https://jeremy-xu.oschina.io/2019/11/kubernetes%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E8%BF%90%E8%90%A5%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/">k8s 集群部署运营实践总结</a></li>
<li><a href="http://www.huilog.com/?p=1173">k8s 创建一个只读的用户权限</a></li>
<li><a href="https://fuckcloudnative.io/posts/what-happens-when-k8s/">kubectl 创建 Pod 背后到底发生了什么？</a></li>
<li><a href="https://juejin.im/entry/599d33ad6fb9a0247804d430">白话Kubernetes网络(推荐)</a></li>
<li>cgroup相关
<ul>
<li><a href="https://www.cnblogs.com/sparkdev/p/8296063.html">linux cgroups 简介</a></li>
<li><a href="https://www.imooc.com/article/72502">cgroups与systemd</a></li>
</ul>
</li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 计算机基础 </font>
</center>
<ul>
<li><a href="https://www.linuxidc.com/Linux/2019-09/160664.htm">MySQL 5.6, 5.7, 8.0版本的新特性大全</a></li>
<li><a href="https://i4t.com/4070.html">nginx+lua实现灰度发布</a></li>
<li><a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">计算机网络</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/05/root-domain.html">根域名的知识</a></li>
<li><a href="https://developer.qiniu.com/fusion/kb/1425/the-http-status-code-books">常见状态码</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;mid=2247494866&amp;idx=1&amp;sn=0ebeb60dbc1fd7f9473943df7ce5fd95&amp;chksm=c2c5967ff5b21f69030636334f6a5a7dc52c0f4de9b668f7bac15b2c1a2660ae533dd9878c7c&amp;mpshare=1&amp;scene=1&amp;srcid=0506xrEXVNFE1oPIS2kHcFnE&amp;sharer_sharetime=1620271084754&amp;sharer_shareid=b31dab34e7f27cf6c4fb08ebfbae0c21#rd">你管这破玩意叫 IO 多路复用？</a></li>
<li><a href="https://mp.weixin.qq.com/s/-mr4c_bPe1eP6qndNRpylg">异地多活架构</a></li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 常用的工具网址 </font>
</center>
<ul>
<li><a href="https://google.fuckcloudnative.io/">不用翻墙就能谷歌</a></li>
<li><a href="https://www.deepl.com/translator">deepl 比谷歌翻译好用的翻译</a></li>
<li><a href="https://tableconvert.com/">tableconvert 在线excel转markdown</a></li>
<li><a href="https://www.processon.com/;jsessionid=F837B3EA415204DD1285A90441329673.jvm1">processon 免费在线作图</a></li>
<li><a href="https://app.xuty.tk/static/app/index.html">表情锅 自制表情动图</a></li>
<li><a href="https://www.sojson.com/convert/subnetmask.html">在线解析 子网掩码换算等</a></li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 其他文章 </font>
</center>
<ul>
<li><a href="https://www.cnblogs.com/mindwind/p/5231986.html">Raft 为什么是更易理解的分布式一致性算法</a></li>
<li><a href="http://thesecretlivesofdata.com/raft/">Raft 一步步动态教你理解raft协议</a></li>
<li><a href="https://raft.github.io/">Raft 更多形象化理解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34858035">Elasticsearch分布式一致性原理剖析(一)-节点篇</a></li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 想看的书籍 </font>
</center>
<ul>
<li><a href="https://book.douban.com/subject/4882120/">金字塔原理</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>markdown一些写法记录</title>
			<link>https://www.ngirl.xyz/posts/17-markdown%E4%B8%80%E4%BA%9B%E5%86%99%E6%B3%95%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Wed, 16 Oct 2019 15:56:27 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/17-markdown%E4%B8%80%E4%BA%9B%E5%86%99%E6%B3%95%E8%AE%B0%E5%BD%95/</guid>
			<description>&lt;p&gt;记录一些需要注意的写法,markdown 是支持html语法的&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>记录一些需要注意的写法,markdown 是支持html语法的</p>
<h3 id="这里想写一个居中的标题和图片">这里想写一个居中的标题和图片</h3>
<pre><code>&lt;center&gt;
&lt;img src=&quot;//zhangzw001.github.io/images/dockerniu.jpeg&quot; width = &quot;100&quot; height = &quot;100&quot; style=&quot;border: 0&quot;/&gt;
&lt;font color=&quot;blue&quot; face=&quot;黑体&quot; size=5&gt; 这个就是效果图咯 &lt;/font&gt;
&lt;/center&gt;
</code></pre><blockquote>
<p>效果:</p>
</blockquote>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5> 这个就是效果图咯 </font>
</center>
<h3 id="表格模板">表格模板</h3>
<pre><code>|标题|内容|
|----|----|
|标题1|内容1|
|标题2|内容2|
</code></pre><blockquote>
<p>效果:</p>
</blockquote>
<table>
<thead>
<tr>
<th>标题</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>标题1</td>
<td>内容1</td>
</tr>
<tr>
<td>标题2</td>
<td>内容2</td>
</tr>
</tbody>
</table>]]></content>
		</item>
		
		<item>
			<title>Dockerfile介绍</title>
			<link>https://www.ngirl.xyz/posts/16-dockerfile%E4%BB%8B%E7%BB%8D/</link>
			<pubDate>Wed, 16 Oct 2019 15:33:17 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/16-dockerfile%E4%BB%8B%E7%BB%8D/</guid>
			<description>Dockerfile   本文摘录于: 如何快速将容器云镜像大小精简98%？
Dockerfile 文件有自己的书写格式和支持的命令，常用的Dockerfile 指令有：  FROM 指定基镜像。 MAINTAINER 设置镜像的作者信息，如作者姓名、邮箱等。 COPY 将文件从本地复制到镜像，拷贝前需要保证本地源文件存在。 ADD 与 COPY 类似，复制文件到镜像。不同的是，如果文件是归档文件（tar, zip, tgz, xz 等），会被自动解压。 ENV 设置环境变量，格式: ENV key=value或ENV key value，运行容器后，可直接在容器中使用。 EXPOSE 暴露容器中指定的端口，只是一个声明，主要用户了解应用监听的端口。 VOLUME 挂载卷到容器，需要注意的是，保存镜像时不会保存卷中的数据。 WORKDIR 设置当前工作目录，后续各层的当前目录都被指定。 RUN 在容器中运行指定的命令。 CMD 容器启动时运行的命令。Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效。CMD 可以被 docker run 之后的参数替换。 ENTRYPOINT 设置容器启动时运行的命令。Dockerfile 中可以有多个 ENTRYPOINT 指令，但只有最后一个生效。CMD 或 docker run 之后的参数会被当做参数传递给 ENTRYPOINT，这个是与CMD的区别。   容器的原理   容器镜像中最重要的概念就是layers，即镜像层。
 容器的原理
 镜像层依赖于一系列的底层技术，比如文件系统(filesystems)、写时复制(copy-on-write)、联合挂载(union mounts)等技术 查看Docker 官方文档https://docs.docker.com/storage/storagedriver/进行学习。</description>
			<content type="html"><![CDATA[<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font  face="黑体" size=5> Dockerfile </font>
</center>
<!-- more -->
<p>本文摘录于: <a href="https://mp.weixin.qq.com/s/LOXNMYtZbnYeDR2lBI56fw">如何快速将容器云镜像大小精简98%？</a></p>
<h3 id="dockerfile-文件有自己的书写格式和支持的命令常用的dockerfile-指令有">Dockerfile 文件有自己的书写格式和支持的命令，常用的Dockerfile 指令有：</h3>
<ul>
<li>FROM  指定基镜像。</li>
<li>MAINTAINER  设置镜像的作者信息，如作者姓名、邮箱等。</li>
<li>COPY  将文件从本地复制到镜像，拷贝前需要保证本地源文件存在。</li>
<li>ADD  与 COPY 类似，复制文件到镜像。不同的是，如果文件是归档文件（tar, zip, tgz, xz 等），会被自动解压。</li>
<li>ENV  设置环境变量，格式: ENV key=value或ENV key value，运行容器后，可直接在容器中使用。</li>
<li>EXPOSE  暴露容器中指定的端口，只是一个声明，主要用户了解应用监听的端口。</li>
<li>VOLUME  挂载卷到容器，需要注意的是，保存镜像时不会保存卷中的数据。</li>
<li>WORKDIR  设置当前工作目录，后续各层的当前目录都被指定。</li>
<li>RUN  在容器中运行指定的命令。</li>
<li>CMD  容器启动时运行的命令。Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效。CMD 可以被 docker run 之后的参数替换。</li>
<li>ENTRYPOINT  设置容器启动时运行的命令。Dockerfile 中可以有多个 ENTRYPOINT 指令，但只有最后一个生效。CMD 或 docker run 之后的参数会被当做参数传递给 ENTRYPOINT，这个是与CMD的区别。</li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font  face="黑体" size=5> 容器的原理 </font>
</center>
<p>容器镜像中最重要的概念就是layers，即镜像层。</p>
<blockquote>
<p>容器的原理</p>
</blockquote>
<p><img src="/images/16/%E5%AE%B9%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86-1.png" alt="容器的原理"></p>
<p>镜像层依赖于一系列的底层技术，比如文件系统(filesystems)、写时复制(copy-on-write)、联合挂载(union mounts)等技术
查看Docker 官方文档<a href="https://docs.docker.com/storage/storagedriver/">https://docs.docker.com/storage/storagedriver/</a>进行学习。</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font  face="黑体" size=5> 每条指令都创建一个镜像层，会增加镜像的大小 </font>
</center>
<h3 id="下面看个例子">下面看个例子</h3>
<p>这里我有一个1.2M的镜像</p>
<pre><code>docker images|grep busybox
busybox                 latest              19485c79a9bb        5 weeks ago         1.22MB
</code></pre><p>我们基于busybox写一个Dockerfile来build</p>
<pre><code>#cat Dockerfile
from busybox:latest

run mkdir /tmp/dir \
    &amp;&amp; dd if=/dev/zero of=/tmp/dir/file1 bs=1M count=10

run rm -f /tmp/dir/file1

</code></pre><p>执行build</p>
<pre><code>docker build -t busybox-test .
Sending build context to Docker daemon  2.048kB
Step 1/3 : from busybox:latest
 ---&gt; 19485c79a9bb
Step 2/3 : run mkdir /tmp/dir     &amp;&amp; dd if=/dev/zero of=/tmp/dir/file1 bs=1M count=10
 ---&gt; Running in 0426f92c77ed
10+0 records in
10+0 records out
10485760 bytes (10.0MB) copied, 0.003785 seconds, 2.6GB/s
Removing intermediate container 0426f92c77ed
 ---&gt; 5ec75db090c9
Step 3/3 : run rm -f /tmp/dir/file1
 ---&gt; Running in 540e7d0a5aea
Removing intermediate container 540e7d0a5aea
 ---&gt; 00041489cc0e
Successfully built 00041489cc0e
Successfully tagged busybox-test:latest
</code></pre><p>查看image大小</p>
<pre><code>docker images|grep busybox
busybox-test            latest              00041489cc0e        10 minutes ago      11.7MB
busybox                 latest              19485c79a9bb        5 weeks ago         1.22MB
</code></pre><p>??? 我不是rm删除了创建的/tmp/dir/file1 文件吗? 难道它还在? 来,我们测试一下</p>
<pre><code># 查看目录下是否有文件
docker run -ti busybox-test ls /tmp/dir
</code></pre><p>结果显然是空&hellip;</p>
<p>喔,,, 因为&quot;在Dockerfile中，每条指令都会创建一个镜像层，继而会增加镜像整体的大小&quot;, 在看我们写的Dockerfile,
我们第一个run 执行的时候, 这里假装叫 (run1层), 我们生成了file1文件
当执行第二个run的时候, 我们处在了 (run2层), (run1层)已经是父层,是个只读层了,只有当前层可写, 虽然我们在 (run2层)删除了这个文件,但删除的仅仅是份拷贝而已, 这就是写时复制.</p>
<p>所以以上的优化应该是: 写成一条run</p>
<pre><code>#cat Dockerfile
from busybox:latest

run mkdir /tmp/dir \
    &amp;&amp; dd if=/dev/zero of=/tmp/dir/file1 bs=1M count=10 \
    &amp;&amp; rm -f /tmp/dir/file1

# build
docker build -t busybox-test2 .
</code></pre><p>结果显然</p>
<pre><code>docker images|grep busybox
busybox-test2           latest              faf8b7d4f140        3 seconds ago       1.22MB
busybox-test            latest              00041489cc0e        10 minutes ago      11.7MB
busybox                 latest              19485c79a9bb        5 weeks ago         1.22MB
</code></pre><p>虽然说这里的测试没有干任何事情, 但我们在写Dockerfile的时候需要注意, 两个run之间是两个不同的 可写层!</p>
<p>简单总结精简镜像大小的方法:</p>
<pre><code>1 使用更小的基础镜像,注意一些很小的镜像可能缺少很多依赖库,例如查看redis依赖库 ldd /usr/bin/redis-cli
2 合并Dockerfilec指令精简(可以的话写成一条run)
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font face="黑体" size=5> 一些小的镜像 </font>
</center>
<ul>
<li>
<p>1 scratch: 一个空的镜像, 无法pull -.-!!! , 写在Dockerfile是可以的</p>
</li>
<li>
<p>2 alpine: 5M的linux镜像,有包管理工具apk</p>
</li>
</ul>
<pre><code>FROM scratch
ADD alpine-minirootfs-3.10.2-x86_64.tar.gz /
CMD [&quot;/bin/sh&quot;]
</code></pre><ul>
<li>3 busybox: 1M多的镜像,称为嵌入式linux的瑞士军刀, Linux和unix一些常用的命令</li>
</ul>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font face="黑体" size=5> 注意事项 </font>
</center>
<ol>
<li>镜像构建的顺序会影响缓存的有效性,经常修改的内容应该放到最后</li>
<li>尽可能的写到同一个RUN,删除不必要的例外 &ndash;no-install-recommends, 并且记得删除包管理缓存 rm -rf /var/lib/apt/lists/*</li>
<li>多阶段构建的使用</li>
</ol>
<pre><code>from maven:3.6-jdk-8-alpine as mavencache
workdir /opt
copy pom.xml .
run mvn -e -B xx:xx
copy src ./src
run mvn -e -B xx

from openjdk:8-jdk-alpine
copy --from-mavencache /opt/target/xxx.jar /
cmd [&quot;java&quot;, &quot;-jar&quot;, &quot;/xxx.jar&quot;]
</code></pre><h3 id="dockerfile中添加中文支持">dockerfile中添加中文支持</h3>
<ul>
<li>debian8</li>
</ul>
<pre><code>from php:7.0.13-fpm

run apt-get update \
    &amp;&amp; apt-get install locales \
    &amp;&amp; sed -i '/zh_CN.UTF-8/s/^#//' /etc/locale.gen \
    &amp;&amp; locale-gen \
    &amp;&amp; rm -rf /usr/local/src/* \
    &amp;&amp; rm -rf /var/lib/apt/lists/* \
    &amp;&amp; apt-get purge -y --auto-remove $buildDeps

ENV LANG zh_CN.UTF-8

user www-data

CMD [ &quot;/bin/bash&quot;, &quot;-ce&quot;, &quot;tail -f /dev/stdout&quot; ]
</code></pre><ul>
<li>Ubuntu 18.04.1 LTS</li>
</ul>
<pre><code>RUN apt-get update \
    &amp;&amp; apt-get install language-pack-zh-hans -y \
    &amp;&amp; rm -rf /usr/local/src/* \
    &amp;&amp; rm -rf /var/lib/apt/lists/* \
    &amp;&amp; apt-get purge -y --auto-remove $buildDeps

ENV LANG zh_CN.utf8
</code></pre>]]></content>
		</item>
		
		<item>
			<title>docker及相关工具</title>
			<link>https://www.ngirl.xyz/posts/15-docker%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/</link>
			<pubDate>Wed, 16 Oct 2019 15:31:08 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/15-docker%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/</guid>
			<description>简单介绍docker
harbor harbor中开启内容信任后签名的问题: https://github.com/zj1244/Blog/blob/master/2019/harbor%E7%9A%84Notary%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95.md harbor2.3安装问题 docker: 18.06.1-ce,19.03.13 由于维护过程需要停止或重启harbor服务,再次启动时postgresql会报错: ls: cannot access &#39;/var/lib/postgresql/data&#39;: Operation not permitted initdb: error: directory &amp;quot;/var/lib/postgresql/data/pg13&amp;quot; exists but is not empty 这里解决办法是修改一下 docker-compose.yml, 添加 privileged: true postgresql: image: goharbor/harbor-db:v2.3.4 container_name: harbor-db privileged: true #需要加入超级权限 从官方issue并没有看到更好的解决方法, 目前是添加超级权限解决 https://github.com/goharbor/harbor/issues/15456 docker开启live-restore  注意: 如果服务器启动了docker swarm那么就无法正常启动docker了
 cat /etc/docker/daemon.json { &amp;quot;exec-opts&amp;quot;:[&amp;quot;native.cgroupdriver=systemd&amp;quot;], &amp;quot;live-restore&amp;quot;: true, ... } </description>
			<content type="html"><![CDATA[<p>简单介绍docker</p>
<!-- more -->
<h3 id="harbor">harbor</h3>
<pre><code>harbor中开启内容信任后签名的问题: https://github.com/zj1244/Blog/blob/master/2019/harbor%E7%9A%84Notary%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95.md
</code></pre><h3 id="harbor23安装问题">harbor2.3安装问题</h3>
<pre><code>docker: 18.06.1-ce,19.03.13

由于维护过程需要停止或重启harbor服务,再次启动时postgresql会报错:
ls: cannot access '/var/lib/postgresql/data': Operation not permitted
initdb: error: directory &quot;/var/lib/postgresql/data/pg13&quot; exists but is not empty

这里解决办法是修改一下 docker-compose.yml, 添加 privileged: true
  postgresql:
    image: goharbor/harbor-db:v2.3.4
    container_name: harbor-db
    privileged: true    #需要加入超级权限

从官方issue并没有看到更好的解决方法, 目前是添加超级权限解决
https://github.com/goharbor/harbor/issues/15456
</code></pre><h3 id="docker开启live-restore">docker开启live-restore</h3>
<blockquote>
<p>注意: 如果服务器启动了docker swarm那么就无法正常启动docker了</p>
</blockquote>
<pre><code>cat /etc/docker/daemon.json
{
 &quot;exec-opts&quot;:[&quot;native.cgroupdriver=systemd&quot;],
 &quot;live-restore&quot;: true,
 ...
}
</code></pre>]]></content>
		</item>
		
		<item>
			<title>mysql5.5目录copy方式迁移</title>
			<link>https://www.ngirl.xyz/posts/14-mysql%E7%9B%AE%E5%BD%95copy%E6%96%B9%E5%BC%8F%E8%BF%81%E7%A7%BB/</link>
			<pubDate>Tue, 15 Oct 2019 10:44:27 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/14-mysql%E7%9B%AE%E5%BD%95copy%E6%96%B9%E5%BC%8F%E8%BF%81%E7%A7%BB/</guid>
			<description>&lt;p&gt;从现有的一台 从库 全copy data目录到2台新机器上, 再配置mysql主从&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>从现有的一台 从库 全copy data目录到2台新机器上, 再配置mysql主从</p>
<h3 id="目录copy方式迁移">目录copy方式迁移</h3>
<blockquote>
<p>注意</p>
</blockquote>
<ul>
<li>不要删除ibdata1,会导致innodb表不存在</li>
<li>可以不删除ib_logfile0,ib_logfile1, 但my.cnf配置大小一致</li>
<li>区别目录权限为mysql,tmp目录存在</li>
<li>请自行安装好mysql5.5</li>
</ul>
<pre><code>1 首先停止mysql
/etc/init.d/mysqld stop

2 同步数据目录到新机器
/data/u01

3 确认新机器上mysql版本并配置/etc/my.cof
4 完整迁移时不需要删除内容(innodb_log_file_size = 256M 配置要一致)
5 启动mysql

</code></pre><h3 id="配置主从">配置主从</h3>
<ul>
<li>
<p>1 首先 目录copy方式 同步某个从库到2台新机器并启动完成, 此时两个mysql都开启了slave</p>
</li>
<li>
<p>2 暂停同步，并设置读写；</p>
</li>
</ul>
<pre><code>stop slave;
# 该执行仅主库上执行(配置可写)
SET GLOBAL read_only=0;
reset slave all;
-- RESET SLAVE ALL是清除从库的同步复制信息、包括连接信息和二进制文件名、位置
-- 从库上执行这个命令后，使用show slave status将不会有输出。
</code></pre><ul>
<li>3 2台新的mysql中修改从库slave配置, 连接到新的主库地址(我这里通过域名解析)</li>
</ul>
<pre><code>CHANGE MASTER TO 
MASTER_HOST='a_master.b.com',MASTER_PORT=3306,MASTER_USER='repl_user',MASTER_PASSWORD='xxxx',MASTER_LOG_FILE='m1-master-bin.000001',MASTER_LOG_POS=88;
</code></pre><ul>
<li>4 由于本机需要安装mysql5.5和mysql5.7所以注意一下</li>
</ul>
<pre><code># 初始化指定配置文件
/usr/local/mysql57/bin/mysqld --defaults-file=/etc/my57.cnf --initialize-insecure --user=mysql --basedir=/usr/local/mysql57 --datadir=/data/u001

# 修改/etc/init.d/mysqld57
parse_server_arguments `$print_defaults -c /etc/my57.cnf mysqld server mysql_server mysql.server`
$bindir/mysqld_safe --defaults-file=/etc/my57.cnf --pid-file=&quot;$mysqld_pid_file_path&quot; $other_args &gt;/dev/null &amp;
</code></pre><h3 id="报错统计">报错统计</h3>
<ul>
<li>ERROR 1840 (HY000) at line 24: @@GLOBAL.GTID_PURGED can only be set when @@GLOBAL.GTID_EXECUTED is empty.</li>
</ul>
<pre><code>执行reset master; 
</code></pre><ul>
<li>The MySQL server is running with the&ndash;read-only option so it cannot execute this statement</li>
</ul>
<pre><code>执行 set global read_only=0;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>云原生博客汇总</title>
			<link>https://www.ngirl.xyz/posts/13-%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8D%9A%E5%AE%A2%E6%B1%87%E6%80%BB/</link>
			<pubDate>Sat, 12 Oct 2019 16:35:21 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/13-%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8D%9A%E5%AE%A2%E6%B1%87%E6%80%BB/</guid>
			<description>&lt;p&gt;记录一些云原生技术博客&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>记录一些云原生技术博客</p>
<h3 id="来自servicemesher8-群">来自ServiceMesher[8] 群</h3>
<p><a href="https://k2r2bai.com/">KaiRen&rsquo;s Blog</a></p>
<p><a href="https://ieevee.com/">Zlatan Eevee</a></p>
<p><a href="https://hansedong.github.io/">国南之境</a></p>
<p><a href="http://gaocegege.com/Blog/">博客 | 高策</a></p>
<p><a href="https://kkc.github.io/">Kakashi&rsquo;s Blog</a></p>
<p><a href="https://blog.yaodataking.com/">Alex Wu&rsquo;s blog | THINK BIG, START SMALL, DELIVER VALUE TO THE BUSINESS</a></p>
<p><a href="https://nicksors.cc/">开元DevOps知识库 - 知识管理，时间管理，自我管理</a></p>
<p><a href="https://xuchao918.github.io/">起风了</a></p>
<p><a href="https://maiyang.me/">茶歇驿站 - Gopher, OpenSource Fans, 成长之路有我相伴。</a></p>
<p><a href="https://docs.lvrui.io/">Polar Snow Documentation</a></p>
<p><a href="https://www.yangcs.net/">云原生实验室 - 米开朗基杨的博客</a></p>
<p><a href="https://jimmysong.io/">Jimmy Song - 宋净超的博客|Cloud Native|云原生布道师</a></p>
<p><a href="https://mritd.me/">漠然的博客 | mritd Blog</a></p>
<p><a href="http://www.rhca.me/">DevOps – 成长之路</a></p>
<p><a href="https://birdben.github.io/">birdben</a></p>
<p><a href="https://fs.tn/">浮生若梦</a></p>
<p><a href="https://landscape.cncf.io/">CNCF Cloud Native Interactive Landscape</a></p>
<p><a href="https://www.duyidong.com/">杜屹东的博客 | 学无止境</a></p>
<p><a href="https://blog.ihypo.net/index.html">梦旭随想</a></p>
<p><a href="http://www.yangguanjun.com/">ictfox blog</a></p>
<p><a href="http://team.jiunile.com/">CloudNative 架构</a></p>
<p><a href="https://www.bladewan.com/">我爱西红柿</a></p>
<p><a href="https://notes.doublemine.me/">Doublemine</a></p>
<p><a href="https://bingohuang.com/">Bingo Huang</a></p>
<p><a href="http://chunqi.li/">Arthur Chunqi Li&rsquo;s Blog</a></p>
<p><a href="http://chunqi.li/archives/">Archive | Arthur Chunqi Li&rsquo;s Blog</a></p>
<p><a href="https://www.lijiaocn.com/">IT技术工作学习折腾笔记 李佶澳的博客</a></p>
<p><a href="http://moheqionglin.com/site/blogs/1/list.html">墨荷琼林官网-编程日志</a></p>
<p><a href="https://cmgs.me/archive">Archive - Nolla</a></p>
<p><a href="https://tomoyadeng.github.io/blog/">Tomoya&rsquo;s Blog</a></p>
<p><a href="https://youendless.com/">君无止境</a></p>
<p><a href="https://jaminzhang.github.io/">Jamin Zhang</a></p>
<p><a href="https://imroc.io/">roc - imroc.io|roc的博客|Cloud Native|Kubernetes|Go|Golang</a></p>
<p><a href="https://sysdig.com/blog/">Blog | Sysdig</a></p>
<p><a href="https://sleele.com/">sleele的博客</a></p>
<p><a href="https://www.tauceti.blog/">TauCeti blog · TauCeti blog</a></p>
<p><a href="http://ghoulich.xninja.org/">水晶命匣 | 生命在于折腾，折腾万岁！</a></p>
<p><a href="https://soulteary.com/">苏洋博客</a></p>
<p><a href="https://linuxtoy.org/">LinuxTOY</a></p>
<p><a href="https://www.infvie.com/">Infvie&rsquo;s Blog | 运维SRE社区博客</a></p>
<p><a href="https://zhangchenchen.github.io/">Solar</a></p>
<p><a href="https://moelove.info/">MoeLove</a></p>
<p><a href="https://www.hwchiu.com/">Hwchiu Learning Notekubernetes/SDN/DevOps</a></p>
<p><a href="http://www.yangguanjun.com">存储领域 yangguanjun</a></p>]]></content>
		</item>
		
		<item>
			<title>awk简单记录</title>
			<link>https://www.ngirl.xyz/posts/12-awk%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Fri, 11 Oct 2019 15:23:48 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/12-awk%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</guid>
			<description>记录一些简单使用
实例1: 计算nginx日志中某个接口的次数和平均响应时间 例如我的a.txt nginx日志格式如下 a.b.com 1.1.1.1 [08/Sep/2019:23:57:01 +0800] &amp;quot;GET /v1/actionname?xxxx HTTP/1.1&amp;quot; 200 386 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Linux; Android 9; V1831A Build/P00610; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.91 Mobile Safari/537.36&amp;quot; &amp;quot;-&amp;quot; &amp;quot;0.023&amp;quot; a.b.com 1.1.1.1 [08/Sep/2019:23:57:01 +0800] &amp;quot;GET /v1/actionname2?xxxx HTTP/1.1&amp;quot; 200 386 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Linux; Android 9; V1831A Build/P00610; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.91 Mobile Safari/537.36&amp;quot; &amp;quot;-&amp;quot; &amp;quot;0.016&amp;quot;  这里我只想取出接口名: /v1/actionname 和 0.023 响应时间
 首先我取出这两列 cat a.txt|awk -F &#39;&amp;quot;&#39; &#39;{print $(NF-1),$2}&#39;|awk -F &#39;?</description>
			<content type="html"><![CDATA[<p>记录一些简单使用</p>
<!-- more -->
<h3 id="实例1-计算nginx日志中某个接口的次数和平均响应时间">实例1: 计算nginx日志中某个接口的次数和平均响应时间</h3>
<h4 id="例如我的atxt-nginx日志格式如下">例如我的a.txt nginx日志格式如下</h4>
<pre><code>a.b.com 1.1.1.1 [08/Sep/2019:23:57:01 +0800] &quot;GET /v1/actionname?xxxx HTTP/1.1&quot; 200 386 &quot;-&quot; &quot;Mozilla/5.0 (Linux; Android 9; V1831A Build/P00610; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.91 Mobile Safari/537.36&quot; &quot;-&quot; &quot;0.023&quot;
a.b.com 1.1.1.1 [08/Sep/2019:23:57:01 +0800] &quot;GET /v1/actionname2?xxxx HTTP/1.1&quot; 200 386 &quot;-&quot; &quot;Mozilla/5.0 (Linux; Android 9; V1831A Build/P00610; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.91 Mobile Safari/537.36&quot; &quot;-&quot; &quot;0.016&quot;
</code></pre><blockquote>
<p>这里我只想取出接口名: /v1/actionname 和 0.023 响应时间</p>
</blockquote>
<h4 id="首先我取出这两列">首先我取出这两列</h4>
<pre><code>cat a.txt|awk -F '&quot;' '{print $(NF-1),$2}'|awk -F '?' '{print $1}'|awk '{print $1&quot; &quot;$3}' &gt; b.txt


cat b.txt
0.023 /v1/actionname
0.016 /v1/actionname2
...
</code></pre><h4 id="命令详解">命令详解</h4>
<pre><code>&gt; 第一步 响应时间求和
{s[$2]+=$1}: 每遇到一个$2,比如遇到/v1/actionname,记录一个数组s[/v1/actionname] = 所有$1的值的总和
&gt; 第二步 算接口的次数
{m[$2]++}:  每遇到一个$2,比如遇到/v1/actionname,记录一个数组m[/v1/actionname] = 所有$1的个数
&gt; 第三步 取平均值

# 这里输出csv文件
cat b.txt|awk '{m[$2]++} {s[$2]+=$1} ; END {for(i in m) {print s[i]/m[i] &quot;,&quot; m[i] &quot;,&quot; i}}'|awk -F &quot;,&quot; '$2 &gt; 20'|sort -k2nr &gt; test.csv
</code></pre><h4 id="例如计算总响应时间总数平均值">例如计算总响应时间,总数,平均值</h4>
<pre><code># 这里$17 是接口名 : /v4.5/?xxx , $4 是响应时间 
# 每遇到一个$17, 就把$4响应时间累加存到 s中,  s可能是 s[&quot;/v4.5/?xxx&quot;]=4.75, s[&quot;/v3.8/?xxx&quot;]=1.469
# 同理m一样,  m[&quot;/v4.5/?xxx&quot;]=313, m[&quot;/v3.8/?xxx&quot;]=64

tail -1000 openapi.access.log |awk '{s[$17]+=$4} {m[$17]++} END {for(i in s) {print m[i],&quot;\t&quot;,s[i],&quot;\t&quot;,s[i]/m[i],&quot;\t&quot;,i} }'|sort -k1nr|head -10

313   4.75   0.0151757   /v4.5/?xxx
64   1.469   0.0229531   /v3.8/?xxx
</code></pre>]]></content>
		</item>
		
		<item>
			<title>mysql简单记录</title>
			<link>https://www.ngirl.xyz/posts/11-mysql%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Thu, 10 Oct 2019 10:40:20 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/11-mysql%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</guid>
			<description>简单记录一些mysql知识点
  ### 三大范式 - 列不可再分: 服务名,服务描述 - 属性完全依赖主键:	服务名依赖于服务ID - 属性直接依赖主键: HTTP,TCP,GRPC 规则各为一张表   SQL 语句主要可以划分为以下 3 个类别 DDL（Data Definition Languages）语句：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 create、drop、alter等。 DML（Data Manipulation Language）语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键字主要包括 insert、delete、udpate 和select 等。(增添改查） DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 grant、revoke 等。   清空表 删除表信息的方式有两种 : truncate table table_name; delete * from table_name; 注 : truncate操作中的table可以省略，delete操作中的*可以省略 truncate、delete 清空表数据的区别 : 1&amp;gt; truncate 是整体删除 (速度较快)，delete是逐条删除 (速度较慢) 2&amp;gt; truncate 不写服务器 log，delete 写服务器 log，也就是 truncate 效率比 delete高的原因 3&amp;gt; truncate 不激活trigger (触发器)，但是会重置Identity (标识列、自增字段)，相当于自增列会被置为初始值，又重新从1开始记录，而不是接着原来的 ID数。而 delete 删除以后，identity 依旧是接着被删除的最近的那一条记录ID加1后进行记录。如果只需删除表中的部分记录，只能使用 DELETE语句配合 where条件   备份 # 全量锁表备份(不可写) mysqldump --lock-all-tables --all-databases &amp;gt; ALLDB.</description>
			<content type="html"><![CDATA[<p>简单记录一些mysql知识点</p>
<!-- more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
### 三大范式
- 列不可再分: 	服务名,服务描述
- 属性完全依赖主键:	服务名依赖于服务ID
- 属性直接依赖主键: 	HTTP,TCP,GRPC 规则各为一张表
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="sql-语句主要可以划分为以下-3-个类别">SQL 语句主要可以划分为以下 3 个类别</h3>
<pre><code>DDL（Data Definition Languages）语句：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 create、drop、alter等。
DML（Data Manipulation Language）语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键字主要包括 insert、delete、udpate 和select 等。(增添改查）
DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 grant、revoke 等。
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="清空表">清空表</h3>
<pre><code>删除表信息的方式有两种 :
truncate table table_name;
delete * from table_name;
注 : truncate操作中的table可以省略，delete操作中的*可以省略

truncate、delete 清空表数据的区别 :
1&gt; truncate 是整体删除 (速度较快)，delete是逐条删除 (速度较慢)
2&gt; truncate 不写服务器 log，delete 写服务器 log，也就是 truncate 效率比 delete高的原因
3&gt; truncate 不激活trigger (触发器)，但是会重置Identity (标识列、自增字段)，相当于自增列会被置为初始值，又重新从1开始记录，而不是接着原来的 ID数。而 delete 删除以后，identity 依旧是接着被删除的最近的那一条记录ID加1后进行记录。如果只需删除表中的部分记录，只能使用 DELETE语句配合 where条件

</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="备份">备份</h3>
<pre><code># 全量锁表备份(不可写)
mysqldump --lock-all-tables --all-databases &gt; ALLDB.sql

# 仅导出所有表的结构
mysqldump --opt -d 数据库名 -u root -p &gt; xxx.sql


</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="slave-中修改master_host">slave 中修改master_host</h3>
<pre><code># 查看 master.info中信息

# 查看 show slave status\G 中 Master_Host

# 修改的步骤需要先停止slave
1 stop slave ;
2 change master to master_host='xxx.xxx.xxx';
  首次配置主库:
  CHANGE MASTER TO MASTER_HOST='a_master.b.com',MASTER_PORT=3306,MASTER_USER='repl_user',MASTER_PASSWORD='xxxx',MASTER_LOG_FILE='m1-master-bin.000001',MASTER_LOG_POS=88;
3 start slave ;
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="mysql问题-navicat连接数据库很慢">mysql问题: navicat连接数据库很慢</h3>
<pre><code>报错: 2013-Lost connection to MYSQL server at 'reading for initial communication packet'
说明: 只有windows 的navicat会出现上面报错, windows上通过mysql命令连接时 也很慢

#添加如下内容:
[mysqld]
skip-name-resolve
</code></pre><hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="mysql问题-mysql57-错误总结-error-1067-42000-invalid-default-value-for-timestamp">mysql问题: mysql5.7 错误总结-ERROR 1067 (42000): Invalid default value for TIMESTAMP</h3>
<pre><code>show variables like 'sql_mode';
+---------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| Variable_name | Value                                                                                                                                     |
+---------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| sql_mode      | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |
+---------------+-------------------------------------------------------------------------------------------------------------------------------------------+
</code></pre><p>这是因为sql_mode中的NO_ZEROR_DATE导制的，在strict mode中不允许'0000-00-00&rsquo;作为合法日期</p>
<p>将上面的NO_ZERO_DATE改为下面的 ALLOW_INVALID_DATES</p>
<pre><code>set sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ALLOW_INVALID_DATES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
set session  sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';

</code></pre><p>上面的设置是临时设置，在重新登陆后，该设置又恢复为NO_ZERO_DATE</p>
<hr>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="mysql55主mysql57从-问题">mysql5.5主+mysql5.7从 问题</h3>
<pre><code>ERROR 1794 (HY000): Slave is not configured or failed to initialize properly. You must at least set --server-id to enable either a master or a slave. Additional error messages can be found in the MySQL error log.
server_uuid是5.6的gtid特性引入的一个配置，
把mysql5.7的 rpl_slave.cc文件中get_master_uuid函数换成5.6对应的函数就可以了。
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="mysql一些info信息统计">mysql一些info信息统计</h3>
<pre><code>#tbl_size.sql
use information_schema;
SELECT
    TABLE_NAME,
 ENGINE,
    ROUND((DATA_LENGTH/1024/1024),2) as DataM ,
    ROUND((INDEX_LENGTH/1024/1024),2) as IndexM,
    ROUND(((DATA_LENGTH+INDEX_LENGTH)/1024/1024),2) as AllM,
    TABLE_ROWS,
 TABLE_COMMENT
FROM
    TABLES
WHERE
    TABLE_SCHEMA = 'hzkj_zh'
ORDER BY AllM DESC;

# 生成excel表格
mysql test &lt;tbl_size.sql &gt;tbl_info_20191028.txt
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="跳过主从同步错误">跳过主从同步错误</h3>
<pre><code>stop slave;
SET GLOBAL sql_slave_skip_counter =1;
start slave;
show slave status\G;
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
</center>
<h3 id="mysql-information_schematables表中的table_rows-字段值与count-值不同">mysql information_schema.TABLES表中的table_rows 字段值与&rsquo;count(*)' 值不同</h3>
<blockquote>
<p>查看information_schema</p>
</blockquote>
<pre><code>use information_schema;
SELECT
    TABLE_NAME,
    TABLE_ROWS
FROM
    TABLES
WHERE
    TABLE_SCHEMA = 'zz' and TABLE_NAME = 'zzz';


+---------------------+------------+
| TABLE_NAME          | TABLE_ROWS |
+---------------------+------------+
|      zzz            |   42411396 |
+---------------------+------------+
</code></pre><p>但是会发现和</p>
<pre><code>&quot; select count(*) from 某张表; &quot;
</code></pre><p>执行得到的值是不相同的！那是因为：</p>
<ul>
<li>1: 默认情况下 mysql 对表进行增删操作时，是不会自动更新 information_schema 库中 tables 表的 table_rows 字段的，在网上搜索一下发现说：只有10%的行数发生变化才会自动收集（没有亲自验证过！）；</li>
<li>2: 执行 Analyze table tableName; 会统计所有表数据（在生产环境中不建议使用，因为会锁表！）；
原文链接：<a href="https://blog.csdn.net/David_jiahuan/article/details/98478740">mysql information_schema.TABLES表中的table_rows 字段值与count值不同</a></li>
</ul>
<h3 id="mysqldump-导出的触发器导致测试库报权限不足错误">mysqldump 导出的触发器导致测试库报权限不足错误</h3>
<ul>
<li>网上有一些教程: <a href="https://stackoverflow.com/questions/10169960/mysql-error-1449-the-user-specified-as-a-definer-does-not-exist">https://stackoverflow.com/questions/10169960/mysql-error-1449-the-user-specified-as-a-definer-does-not-exist</a></li>
<li>mysql如何修改所有的definer: <a href="https://blog.csdn.net/weixin_30739595/article/details/95782340">https://blog.csdn.net/weixin_30739595/article/details/95782340</a></li>
</ul>
<blockquote>
<p>从线上导出表到测试, 发现测试报错: The user specified as a definer (&lsquo;xxx&rsquo;@&lsquo;x.x.%.%') does not exist</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">mysqldump --single-transaction --max-allowed-packet<span class="o">=</span><span class="m">1073741824</span> dbname tablename &gt; tablename.sql
</code></pre></div><blockquote>
<p>这里用了一种不太好的方法解决了该问题(主要是不懂&hellip;)</p>
</blockquote>
<p>将 tablename.sql 文件中的 DEFINER=<code>xxx</code>@<code>x.x.%.%</code> 改成测试库中之前的用户名比如说: DEFINER=<code>test</code>@<code>%</code>
然后重新导入覆盖</p>
<p>所以说触发器的definer不是很方便修改</p>
<h3 id="change-column-导致锁">change column 导致锁</h3>
<p>官方online-ddl文档: <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html">https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html</a></p>
<h3 id="php-warning--mysql_fetch_array-supplied-argument-is-not-a-valid-mysql-result-resource-in">PHP Warning:  mysql_fetch_array(): supplied argument is not a valid MySQL result resource in</h3>
<blockquote>
<p>这个问题是因为查询数据库结果可能为空, 直接return的时候报warning</p>
</blockquote>
<h4 id="原示例">原示例:</h4>
<pre><code>function get($sql) {
    $row = mysql_fetch_array($this-&gt;query($sql));
    return $row[0]
    ...
}
</code></pre><h4 id="修改示例">修改示例:</h4>
<pre><code>function get($sql) {
  $query = $this-&gt;query($sql);
  if($query){
     $row = mysql_fetch_array($query);
     return $row[0]
  }
  ...
}   
</code></pre><h3 id="using-where-using-index的原因">Using where; Using index的原因</h3>
<pre><code>首先有一个表:
CREATE TABLE `test` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `aid` varchar(20) NOT NULL DEFAULT '' COMMENT 'aid',
  `bid` varchar(20) NOT NULL DEFAULT '' COMMENT 'bid',
  `cid` varchar(20) NOT NULL DEFAULT '' COMMENT 'cid',
  PRIMARY KEY (`id`),
  KEY `abc` (`aid`,`bid`,`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

explain select id,aid,bid,cid from test where cid='1' and bid='1';
+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+--------------------------+
| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                    |
+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+--------------------------+
|  1 | SIMPLE      | test  | NULL       | index | NULL          | abc  | 186     | NULL |    1 |   100.00 | Using where; Using index |
+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+--------------------------+

由上可以看到type是index, ref=null, 所以并不是通过索引的等值
extra既有where也有index的情况:
1，查询的列被索引覆盖，并且where筛选条件是索引列之一但是不是索引的前导列，Extra中为Using where; Using index，

该查询不需要回表, 通过索引得到了所有的查询内容 , 然后在通过where条件判断即可
</code></pre>]]></content>
		</item>
		
		<item>
			<title>centos6安装nginx1.16&#43;php7.2</title>
			<link>https://www.ngirl.xyz/posts/10-centos6%E5%AE%89%E8%A3%85nginx1-16-php7-2/</link>
			<pubDate>Fri, 27 Sep 2019 14:39:07 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/10-centos6%E5%AE%89%E8%A3%85nginx1-16-php7-2/</guid>
			<description>记录简单的安装nginx和php的配置,仅供参考
先准备环境 # 更新源 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo yum clean all yum makecache yum install -y epel-release # 安装一些依赖包 yum -y install gcc make cmake ncurses-devel libxml2-devel libtool-ltdl-devel gcc-c++ autoconf automake bison zlib-devel openssl-devel pcre-devel libxml2 libxml2-devel libcurl libcurl-devel autoconf automake libtool-ltdl libtool-ltdl-devel libjpeg libjpeg-turbo-devel libmcrypt-devel libpng-devel centos6编译安装nginx #首先官网下载1.16 cd /usr/local/src/ wget http://nginx.org/download/nginx-1.16.0.tar.gz tar -xvf nginx-1.16.0.tar.gz # 编译简单的模块 ./configure --prefix=/usr/local/nginx/ --with-http_ssl_module --with-http_stub_status_module --with-http_stub_status_module make -j4 make install # 通过启动脚本启动 chmod +x /etc/init.</description>
			<content type="html"><![CDATA[<p>记录简单的安装nginx和php的配置,仅供参考</p>
<!-- more -->
<h3 id="先准备环境">先准备环境</h3>
<pre><code># 更新源
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak
curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo
yum clean all
yum makecache
yum install -y epel-release

# 安装一些依赖包
yum -y install gcc make cmake ncurses-devel libxml2-devel libtool-ltdl-devel gcc-c++ autoconf automake bison  zlib-devel openssl-devel pcre-devel libxml2 libxml2-devel libcurl libcurl-devel autoconf automake  libtool-ltdl libtool-ltdl-devel libjpeg  libjpeg-turbo-devel libmcrypt-devel libpng-devel

</code></pre><h3 id="centos6编译安装nginx">centos6编译安装nginx</h3>
<pre><code>#首先官网下载1.16
cd /usr/local/src/
wget http://nginx.org/download/nginx-1.16.0.tar.gz
tar -xvf nginx-1.16.0.tar.gz

# 编译简单的模块
./configure --prefix=/usr/local/nginx/  --with-http_ssl_module --with-http_stub_status_module  --with-http_stub_status_module
make -j4
make install

# 通过启动脚本启动
chmod +x /etc/init.d/nginx
service nginx start
# 开机启动
chkconfig nginx on
</code></pre><h3 id="nginx-启动脚本-etcinitdnginx">nginx 启动脚本 /etc/init.d/nginx</h3>
<pre><code>#!/bin/bash
# nginx Startup script for the Nginx HTTP Server
# it is v.0.0.2 version.
# chkconfig: - 85 15
# description: Nginx is a high-performance web and proxy server.
#              It has a lot of features, but it's not for everyone.
# processname: nginx
# pidfile: /var/run/nginx.pid
# config: /usr/local/nginx/conf/nginx.conf

nginx=/usr/local/nginx/sbin/nginx
nginx_config=/usr/local/nginx/conf/nginx.conf
nginx_pid=/var/run/nginx.pid

RETVAL=0
prog=&quot;nginx&quot;
# Source function library.
.  /etc/rc.d/init.d/functions
# Source networking configuration.
.  /etc/sysconfig/network
# Check that networking is up.
[ ${NETWORKING} = &quot;no&quot; ] &amp;&amp; exit 0
[ -x $nginx ] || exit 0
# Start nginx daemons functions.
start() {
if [ -e $nginx_pid ];then
   echo &quot;nginx already running....&quot;
   exit 1
fi
   echo -n $&quot;Starting $prog: &quot;
   daemon $nginx -c ${nginx_config}
   RETVAL=$?
   echo
   [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx
   return $RETVAL
}
# Stop nginx daemons functions.
stop() {
        echo -n $&quot;Stopping $prog: &quot;
        killproc $nginx
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /usr/local//nginx/logs/nginx.pid
}

reload() {
    echo -n $&quot;Reloading $prog: &quot;
    #kill -HUP `cat ${nginx_pid}`
    killproc $nginx -HUP
    RETVAL=$?
    echo
}
# See how we were called.
case &quot;$1&quot; in
start)
        start
        ;;
stop)
        stop
        ;;
reload)
        reload
        ;;
restart)
        stop
        start
        ;;
status)
        status $prog
        RETVAL=$?
        ;;
*)
        echo $&quot;Usage: $prog {start|stop|restart|reload|status|help}&quot;
        exit 1
esac
exit $RETVAL
</code></pre><h3 id="nginxconf简单配置">nginx.conf简单配置</h3>
<pre><code>user  nobody nobody;
worker_processes  auto;

worker_rlimit_nofile 102400;
pid        /var/run/nginx.pid;

events {
    use epoll;
    worker_connections 102400;
}


http {
    log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                  '$status $body_bytes_sent &quot;$http_referer&quot; '
                 '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

    ###定义一个log_format
    log_format  main '[ $host $request_time  $upstream_addr $upstream_response_time ] ' '$status ' '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '  '$body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for &quot; &quot;$bytes_sent&quot; &quot; $request_body&quot;' ;


    ###日志目录配置
    #日志全部写入/nginx_logs/access.log 文件中。关闭最后两个server_name的日志
    access_log  /data/nginx_logs/access.log  server_name_main;
    error_log /data/nginx_logs/error.log notice;

    ###杂项配置
    charset utf-8;
    #server name的hash表，
    server_names_hash_bucket_size 128;
    #请求头如果过小，那么会引起400错误。一般如果cookie过大，会引起问题。getconf PAGESIZE系统分页
    client_header_buffer_size 8k;
    client_body_buffer_size  512k;
    large_client_header_buffers 16 16k;
    client_max_body_size 30m;
    sendfile on;
    tcp_nopush     on;
    keepalive_timeout 60;
    tcp_nodelay on;

    #fastcgi通用配置
    fastcgi_connect_timeout 600;
    fastcgi_send_timeout 600;
    fastcgi_read_timeout 600;
    fastcgi_buffer_size 128k;
    fastcgi_buffers 8 256k;
    fastcgi_busy_buffers_size 256k;
    fastcgi_temp_file_write_size 256k;

    ###代理有关的配置
    proxy_connect_timeout    600;
    proxy_read_timeout       600;
    proxy_send_timeout       600;
    proxy_buffer_size        512k;
    proxy_buffers            6 512k;
    proxy_busy_buffers_size 512k;
    proxy_temp_file_write_size 512k;

    #或许在于测试,代理服务器不主动关闭客户端，防止499错误
    proxy_ignore_client_abort on;


    ###gzip配置
    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;


    include             /usr/local/nginx/conf/mime.types;
    default_type        application/octet-stream;

    # 隐藏nginx版本信息
    server_tokens off;

    server {
        listen       80 default_server;
        server_name  _;
        #server_name  localhost;
        index  index.html index.htm;
        root   html;
        deny all;

        location / {
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }


}
</code></pre><h3 id="centos6编译安装php7">centos6编译安装php7</h3>
<pre><code># 首先安装freetype2.4
tar -xvf freetype-2.4.0.tar.gz
cd freetype-2.4.0
./configure --prefix=/usr/local/freetype
make -j4 &amp;&amp; make install


# 编译php7(不需要的可以去掉)
tar -xvf php-7.2.2.tar.gz
cd php-7.2.2
./configure    --prefix=/usr/local/php   --with-libxml-dir=/usr/   --with-pdo-mysql=mysqlnd   --with-zlib   --with-libxml-dir   --with-openssl   --enable-mysqlnd   --enable-mbstring   --with-config-file-path=/usr/local/php/etc/   --with-config-file-scan-dir=/usr/local/php/etc/conf.d   --enable-fpm --with-freetype-dir=/usr/local/freetype  --with-jpeg-dir --with-png-dir --with-gd --enable-gd-native-ttf --enable-pdo --enable-mbstring --enable-bcmath

make -j 4 &amp;&amp; make install

# 安装composer
curl -sS https://getcomposer.org/installer | php &amp;&amp; mv composer.phar /usr/bin/composer
</code></pre><h3 id="配置">配置</h3>
<pre><code># php.ini配置(具体配置内容自行修改)
cp php.ini-production /usr/local/php7/etc/php.ini
cp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.conf
cp /usr/local/php7/etc/php-fpm.d/www.conf.default /usr/local/php7/etc/php-fpm.d/www.conf

# 启动脚本
cp ./sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
chmod +x /etc/init.d/php-fpm

# 创建link
ln -s /usr/local/php7 /usr/local/php
</code></pre><h3 id="启动php-fpm">启动php-fpm</h3>
<pre><code>service php-fpm start
chkconfig php-fpm on
</code></pre>]]></content>
		</item>
		
		<item>
			<title>mysql5.7二进制部署</title>
			<link>https://www.ngirl.xyz/posts/8-mysql5-7%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2/</link>
			<pubDate>Thu, 26 Sep 2019 15:11:05 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/8-mysql5-7%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2/</guid>
			<description>二进制方式部署mysql5.7
 下载glibc二进制包 #打开下载页面, 可能会有小版本更新(注意：选择操作系统时选Linux-Generic） https://dev.mysql.com/downloads/mysql/5.7.html#downloads # 最新的可能有小版本变化 wget https://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz 安装配置 tar -xvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/ cd /usr/local/ # 我的镜像是安装过5.5mysql, 所以需要mv一下 mv mysql mysql-5.5.37 # 由于以前安装过php指定了该mysq目录, 这可能导致以前安装的php缺少libmysqlclient.so.18 ln -s /usr/local/mysql-5.5.37/lib/libmysqlclient.so.18 /usr/local/mysql-5.7.24-linux-glibc2.12-x86_64/lib/libmysqlclient.so.18 ln -s mysql-5.7.24-linux-glibc2.12-x86_64 mysql # 添加启动文件 \cp mysql/support-files/mysql.server /etc/init.d/mysqld echo &amp;quot;PATH=$PATH:/usr/local/mysql/bin/&amp;quot; &amp;gt;&amp;gt;~/.bashrc # 可选 wget http://centos.mirrors.ucloud.cn/centos/6/os/x86_64/Packages/numactl-2.0.9-2.el6.x86_64.rpm yum localinstall numactl-2.0.9-2.el6.x86_64.rpm \rm numactl-2.0.9-2.el6.x86_64.rpm useradd mysql # 配置下mysql的数据目录 cd /data/ mkdir u01 mkdir u02 chown -R mysql.mysql u01 chown -R mysql.</description>
			<content type="html"><![CDATA[<blockquote>
<p>二进制方式部署mysql5.7</p>
</blockquote>
<!-- more -->
<h3 id="下载glibc二进制包">下载glibc二进制包</h3>
<pre><code>#打开下载页面, 可能会有小版本更新(注意：选择操作系统时选Linux-Generic）
https://dev.mysql.com/downloads/mysql/5.7.html#downloads

# 最新的可能有小版本变化
wget https://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz
</code></pre><h3 id="安装配置">安装配置</h3>
<pre><code>tar -xvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz
mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/
cd /usr/local/

# 我的镜像是安装过5.5mysql, 所以需要mv一下
mv mysql mysql-5.5.37

# 由于以前安装过php指定了该mysq目录, 这可能导致以前安装的php缺少libmysqlclient.so.18
ln -s /usr/local/mysql-5.5.37/lib/libmysqlclient.so.18 /usr/local/mysql-5.7.24-linux-glibc2.12-x86_64/lib/libmysqlclient.so.18
ln -s mysql-5.7.24-linux-glibc2.12-x86_64 mysql

# 添加启动文件
\cp mysql/support-files/mysql.server /etc/init.d/mysqld
echo &quot;PATH=$PATH:/usr/local/mysql/bin/&quot; &gt;&gt;~/.bashrc

# 可选
wget http://centos.mirrors.ucloud.cn/centos/6/os/x86_64/Packages/numactl-2.0.9-2.el6.x86_64.rpm
yum localinstall numactl-2.0.9-2.el6.x86_64.rpm
\rm numactl-2.0.9-2.el6.x86_64.rpm

useradd mysql

# 配置下mysql的数据目录
cd /data/
mkdir u01
mkdir u02
chown -R mysql.mysql u01
chown -R mysql.mysql u02
chmod 750 u01
chmod 750 u02
cd /data/u01/

# 初始化
/usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/u01
cat auto.cnf

# 启动服务 (在这之前准备好 /etc/my.cnf)
/etc/init.d/mysqld start

# 记录下variables
mysql -e &quot;show global variables&quot; &gt;mysql_option_default.log
</code></pre><h3 id="mycnf">my.cnf</h3>
<pre><code>[client]
port = 3306
socket = /data/u01/mysql.sock

[mysql]
prompt=&quot;\u@m1-u [\d]&gt; &quot;
no-auto-rehash

[mysqld]
user = mysql
port = 3306
basedir = /usr/local/mysql
datadir = /data/u01
socket = /data/u01/mysql.sock
pid-file = /data/u01/m1-u.pid
tmpdir = /data/u02
server-id = 1001
character-set-server = utf8
skip_name_resolve = 1
innodb_file_per_table = 1
explicit_defaults_for_timestamp = 0

# buffer&amp;cache
table_open_cache = 100
table_definition_cache = 400
table_open_cache_instances = 64
sort_buffer_size = 4M
join_buffer_size = 4M
read_buffer_size = 8M
read_rnd_buffer_size = 4M

# thread&amp;connection
thread_stack = 256K
thread_cache_size = 768
back_log = 1024
max_connections = 3000
max_connect_errors = 1000000

# temptable
tmp_table_size = 32M
max_heap_table_size = 32M

# network
max_allowed_packet = 32M
#lock_wait_timeout = 3600
#interactive_timeout = 600
#wait_timeout = 600

# query cache
query_cache_size = 0
query_cache_type = 0

# 设置errorlog、slowlog和generallog的时区，默认UTC
log_timestamps = SYSTEM

# error-log
log_error = /data/u02/mysqld.log

# slow-log
slow_query_log = 1
slow_query_log_file = /data/u02/slow.log
long_query_time = 0.1
log_queries_not_using_indexes =1
log_throttle_queries_not_using_indexes = 60
min_examined_row_limit = 100
log_slow_admin_statements = 1
log_slow_slave_statements = 1

# general log
#general-log = 1
general_log_file=/data/u02/query.log

# binlog
binlog_format = row
binlog_checksum = 1
log-bin = /data/u02/bdm1-bin
log-bin-index = /data/u02/bdm1-bin.index
sync_binlog = 0
binlog_cache_size = 4M
max_binlog_cache_size = 2G
max_binlog_size = 512M
expire_logs_days = 15

# GTID
gtid_mode = on
enforce_gtid_consistency = 1
log_slave_updates

# Replication
master_info_repository = TABLE
relay_log_info_repository = TABLE
slave-rows-search-algorithms = 'INDEX_SCAN,HASH_SCAN'
relay_log_recovery = 1
relay_log_purge = 1
relay-log=/data/u02/bdm1-relay-bin
relay-log-index=/data/u02/bdm1-relay-bin.index

# innodb-buffer&amp;cache
innodb_buffer_pool_size = 2G
innodb_buffer_pool_instances = 4
#innodb_additional_mem_pool_size = 16M
innodb_max_dirty_pages_pct = 50

# innodb log
innodb_data_file_path = ibdata1:1G:autoextend
innodb_log_file_size = 1G
innodb_log_files_in_group = 2
innodb_flush_log_at_trx_commit = 2
innodb_log_buffer_size = 32M
#innodb_max_undo_log_size = 4G
#innodb_undo_directory = undolog
innodb_undo_tablespaces = 4

# innodb-io
innodb_flush_method = O_DIRECT
innodb_io_capacity = 600
innodb_io_capacity_max = 2000
innodb_flush_sync = 0
innodb_flush_neighbors = 0
#innodb_lru_scan_depth = 4000
innodb_write_io_threads = 8
innodb_read_io_threads = 8
innodb_purge_threads = 4
innodb_page_cleaners = 4

# transaction,lock
#innodb_sync_spin_loops = 100
#innodb_spin_wait_delay = 30
innodb_lock_wait_timeout = 10
innodb_print_all_deadlocks = 1
innodb_rollback_on_timeout = 1

innodb_open_files = 65535

innodb_online_alter_log_max_size = 2G

# innodb status
innodb_status_file = 1
# 注意: 开启 innodb_status_output &amp; innodb_status_output_locks 后, 可能会导致log-error文件增长较快
innodb_status_output = 0
innodb_status_output_locks = 0

#performance_schema
performance_schema = 1
performance_schema_instrument = '%=on'

#innodb monitor
innodb_monitor_enable=&quot;module_innodb&quot;
innodb_monitor_enable=&quot;module_server&quot;
innodb_monitor_enable=&quot;module_dml&quot;
innodb_monitor_enable=&quot;module_ddl&quot;
innodb_monitor_enable=&quot;module_trx&quot;
innodb_monitor_enable=&quot;module_os&quot;
innodb_monitor_enable=&quot;module_purge&quot;
innodb_monitor_enable=&quot;module_log&quot;
innodb_monitor_enable=&quot;module_lock&quot;
innodb_monitor_enable=&quot;module_buffer&quot;
innodb_monitor_enable=&quot;module_index&quot;
innodb_monitor_enable=&quot;module_ibuf_system&quot;
innodb_monitor_enable=&quot;module_buffer_page&quot;
innodb_monitor_enable=&quot;module_adaptive_hash&quot;

# MyISAM
key_buffer_size = 1024M
bulk_insert_buffer_size = 64M
myisam_sort_buffer_size = 128M
myisam_repair_threads = 1


[mysqldump]
quick
max_allowed_packet = 32M
</code></pre>]]></content>
		</item>
		
		<item>
			<title>k8s部署storageclass动态创建pv(nfs&amp;rbd)</title>
			<link>https://www.ngirl.xyz/posts/7-k8s%E9%83%A8%E7%BD%B2storageclass%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BApv-nfs-rbd/</link>
			<pubDate>Thu, 26 Sep 2019 14:12:49 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/7-k8s%E9%83%A8%E7%BD%B2storageclass%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BApv-nfs-rbd/</guid>
			<description>考虑到k8s存储的问题, 本机目录挂载存在太大局限性, 多node多pod的服务存储急迫需要共享存储, 这里简单应用k8s storageclass nfs和rbd存储
第一部分 nfs 这里单节点简单配置nfs(高并发可采用nfs+rsync+inotify或Sersync)  高并发参考
 NFS高可用(NFS+keepalive+Sersync) inotify+rsync实时备份总结
#安装nfs yum install -y nfs-utils rpcbind # 创建目录 mkdir /data/nfs echo &amp;quot;/data/nfs 192.168.0.0/24(rw,sync,no_root_squash) &amp;quot; &amp;gt;&amp;gt;/etc/exports # 启动服务 systemctl start rpcbind systemctl start nfs k8s部署storageclass环境-nfs 导入外部配置 git clone https://github.com/kubernetes-incubator/external-storage.git cd external-storage/nfs-client/deploy #注意 1 node节点需要安装nfs-utils(centos7),nfs-common(ubuntu) 修改deployment.yaml apiVersion: v1 kind: ServiceAccount metadata: name: nfs-client-provisioner --- kind: Deployment apiVersion: extensions/v1beta1 metadata: name: nfs-client-provisioner spec: replicas: 1 strategy: type: Recreate template: metadata: labels: app: nfs-client-provisioner spec: serviceAccountName: nfs-client-provisioner containers: - name: nfs-client-provisioner image: quay.</description>
			<content type="html"><![CDATA[<p>考虑到k8s存储的问题, 本机目录挂载存在太大局限性, 多node多pod的服务存储急迫需要共享存储, 这里简单应用k8s storageclass nfs和rbd存储</p>
<!-- more -->
<h1 id="第一部分-nfs">第一部分 nfs</h1>
<h3 id="这里单节点简单配置nfs高并发可采用nfsrsyncinotify或sersync">这里单节点简单配置nfs(高并发可采用nfs+rsync+inotify或Sersync)</h3>
<blockquote>
<p>高并发参考</p>
</blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1445884">NFS高可用(NFS+keepalive+Sersync)</a>
<a href="https://blog.51cto.com/lzhnb/2088224">inotify+rsync实时备份总结</a></p>
<pre><code>#安装nfs
yum install -y nfs-utils rpcbind

# 创建目录
mkdir /data/nfs
echo &quot;/data/nfs 192.168.0.0/24(rw,sync,no_root_squash) &quot; &gt;&gt;/etc/exports

# 启动服务
systemctl start rpcbind
systemctl start nfs
</code></pre><h3 id="k8s部署storageclass环境-nfs">k8s部署storageclass环境-nfs</h3>
<h4 id="导入外部配置">导入外部配置</h4>
<pre><code>git clone https://github.com/kubernetes-incubator/external-storage.git
cd external-storage/nfs-client/deploy

#注意
1  node节点需要安装nfs-utils(centos7),nfs-common(ubuntu)
</code></pre><h4 id="修改deploymentyaml">修改deployment.yaml</h4>
<pre><code>apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfs-client-provisioner
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: nfs-client-provisioner
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-client-provisioner
    spec:
      serviceAccountName: nfs-client-provisioner
      containers:
        - name: nfs-client-provisioner
          image: quay.io/external_storage/nfs-client-provisioner:latest
          volumeMounts:
            - name: nfs-client-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: nfs.com/nfs
            - name: NFS_SERVER
              value: 192.168.0.134
            - name: NFS_PATH
              value: /data/nfs
      volumes:
        - name: nfs-client-root
          nfs:
            server: 192.168.0.134
            path: /data/nfs
</code></pre><h4 id="修改classyaml">修改class.yaml</h4>
<pre><code>apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs
provisioner: nfs.com/nfs
parameters:
  archiveOnDelete: &quot;false&quot;
</code></pre><h4 id="rbacyaml不用修改">rbac.yaml不用修改</h4>
<pre><code>rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: nfs-client-provisioner
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-client-provisioner-runner
rules:
  - apiGroups: [&quot;&quot;]
    resources: [&quot;persistentvolumes&quot;]
    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;delete&quot;]
  - apiGroups: [&quot;&quot;]
    resources: [&quot;persistentvolumeclaims&quot;]
    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;update&quot;]
  - apiGroups: [&quot;storage.k8s.io&quot;]
    resources: [&quot;storageclasses&quot;]
    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]
  - apiGroups: [&quot;&quot;]
    resources: [&quot;events&quot;]
    verbs: [&quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: run-nfs-client-provisioner
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
    namespace: default
roleRef:
  kind: ClusterRole
  name: nfs-client-provisioner-runner
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-client-provisioner
rules:
  - apiGroups: [&quot;&quot;]
    resources: [&quot;endpoints&quot;]
    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-client-provisioner
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
    # replace with namespace where provisioner is deployed
    namespace: default
roleRef:
  kind: Role
  name: leader-locking-nfs-client-provisioner
  apiGroup: rbac.authorization.k8s.io
</code></pre><h4 id="部署nfs环境创建nfs存储类">部署nfs环境(创建nfs存储类)</h4>
<pre><code>kubectl apply -f rbac.yaml -f class.yaml -f deployment.yaml
</code></pre><hr>
<h3 id="k8s中部署nginx项目采用nfs存储">k8s中部署nginx项目采用nfs存储</h3>
<h4 id="部署nginx-deployment-nfsyaml测试nfs">部署nginx-deployment-nfs.yaml(测试nfs)</h4>
<blockquote>
<p>这种方式会创建一个pvc 挂载到多个pod中,这种方式适合nginx-html挂载</p>
</blockquote>
<pre><code>---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: html0-deploy-nfs
  annotations:
    volume.beta.kubernetes.io/storage-class: 'nfs'
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx0-deploy
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx0-deploy
    spec:
      containers:
      - name: nginx0-deploy
        image: hub.zhangzw.com/bq/nginx:1.15.12
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html0-deploy-nfs
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: &quot;/etc/nginx/conf.d&quot;
      volumes:
      - name: nginx-config
        configMap:
            name: nginx-config
      - name: html0-deploy-nfs
        persistentVolumeClaim:
          claimName: html0-deploy-nfs
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
            server {
              listen       80;
              server_name  localhost;
              root   /usr/share/nginx/html/;
              access_log  /var/log/nginx/host_access.log;
              error_log  /var/log/nginx/host_error.log debug;
              location / {
                  root   /usr/share/nginx/html/;
                  index  index.html index.htm index.php;
              }
              error_page   500 502 503 504  /50x.html;

              location = /50x.html {
                  root   /usr/share/nginx/html;
              }
              }
</code></pre><h4 id="部署nginx-statefulset-nfsyaml测试nfs">部署nginx-statefulset-nfs.yaml(测试nfs)</h4>
<blockquote>
<p>这里statefulset 方式会创建多个pvc, 每个pod的html就可以都不一样!</p>
</blockquote>
<pre><code>---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: nginx3
spec:
  serviceName: &quot;nginx&quot;
  replicas: 2
  volumeClaimTemplates:
  - metadata:
      name: html
      annotations:
        volume.beta.kubernetes.io/storage-class: &quot;nfs&quot; # 这里配置 上面创建的 storageclass 的名称
    spec:
      accessModes: [ &quot;ReadWriteOnce&quot; ]
      resources:
        requests:
          storage: 2Gi
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: hub.zhangzw.com/bq/nginx:1.15.12
        volumeMounts:
        - mountPath: &quot;/usr/share/nginx/html/&quot;
          name: html
        - mountPath: &quot;/etc/nginx/conf.d&quot;
          name: nginx-config
      volumes:
      - name: nginx-config
        configMap:
            name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
            server {
              listen       80;
              server_name  localhost;
              root   /usr/share/nginx/html/;
              access_log  /var/log/nginx/host_access.log;
              error_log  /var/log/nginx/host_error.log debug;
              location / {
                  root   /usr/share/nginx/html/;
                  index  index.html index.htm index.php;
              }
              error_page   500 502 503 504  /50x.html;

              location = /50x.html {
                  root   /usr/share/nginx/html;
              }
              }
</code></pre><hr>
<h3 id="另外说明一下将nfs作为文件存储类似mount方式这种方式不适用于多容器自动化部署-显然这种并不适合ceph-rbd存储-cephfs是可以的">另外说明一下将nfs作为文件存储类似mount方式,这种方式不适用于多容器自动化部署 ,显然这种并不适合ceph rbd存储, cephfs是可以的</h3>
<h4 id="首先需要在nfs目录创建需要挂载的目录">首先需要在nfs目录创建需要挂载的目录</h4>
<pre><code>#例如
mkdir -p /data/nfs/k8s-db-t/mysql-data-dev
</code></pre><h4 id="在部署的yml中直接mount-nfs的目录">在部署的yml中直接mount nfs的目录</h4>
<pre><code>apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mysql-server
  namespace: devops
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-server
    spec:
      containers:
      - image: mysql:5.7.16
        imagePullPolicy: Always
        name: mysql-server
        ports:
        - containerPort: 3306
          protocol: TCP
        volumeMounts:
          - name: mysql-data
            mountPath: /var/lib/mysql
        resources:
          requests:
            cpu: 40m
            memory: 32Mi
          limits:
            cpu: &quot;300m&quot;
            memory: 256Mi
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: &quot;admin&quot;
        - name: MYSQL_DATABASE
          value: &quot;gogs&quot;
        - name: MYSQL_USER
          value: &quot;gogs&quot;
        - name: MYSQL_PASSWORD
          value: &quot;gogspass&quot;
        - name: TZ
          value: &quot;Asia/Shanghai&quot;
      volumes:
        - name: mysql-data
          nfs:
            server: 192.168.0.134
            path: /data/nfs/k8s-db-t/mysql-data-dev

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: devops
spec:
  clusterIP: None
  selector:
    app: mysql-server
  ports:
  - name: http
    port: 3306
</code></pre><hr>
<h1 id="第二部分-ceph">第二部分 ceph</h1>
<h3 id="k8s部署storageclass环境-ceph">k8s部署storageclass环境-ceph</h3>
<h4 id="如果集群是用kubeadm部署的由于controller-manager官方镜像中没有rbd命令所以我们要导入外部配置">如果集群是用kubeadm部署的，由于controller-manager官方镜像中没有rbd命令，所以我们要导入外部配置</h4>
<pre><code>git clone https://github.com/kubernetes-incubator/external-storage.git
cd external-storage/ceph/rbd/deploy
</code></pre><blockquote>
<p>以下整合在一个文件, 两个版本,默认 和retain</p>
</blockquote>
<h4 id="storageclass-cepmcom-rbdyaml">storageclass-cepm.com-rbd.yaml</h4>
<pre><code>---
apiVersion: v1
data:
  key: QVFEYzJRbGQ1VjI5THhBQU00WUtPUU5sUVJqdWtLSWJ2VDZ0a3c9PQ==
kind: Secret
metadata:
  name: ceph-secret-admin
type: kubernetes.io/rbd
---
apiVersion: v1
data:
  key: QVFEYzJRbGQ1VjI5THhBQU00WUtPUU5sUVJqdWtLSWJ2VDZ0a3c9PQ==
kind: Secret
metadata:
  name: ceph-secret-admin
  namespace: ns-elastic
type: kubernetes.io/rbd
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: rbd
  annotations:
    storageclass.kubernetes.io/is-default-class: &quot;true&quot;
provisioner: ceph.com/rbd
parameters:
  monitors: 192.168.0.134:6789
  adminId: admin
  adminSecretName: ceph-secret-admin
  adminSecretNamespace: default
  pool: storageclass-rbd
  userId: admin
  userSecretName: ceph-secret-admin
  fsType: ext4
  imageFormat: &quot;2&quot;
  imageFeatures: &quot;layering&quot;
</code></pre><h4 id="storageclass-cepmcom-rbd-retainyaml">storageclass-cepm.com-rbd-retain.yaml</h4>
<pre><code>---
apiVersion: v1
data:
  key: QVFEYzJRbGQ1VjI5THhBQU00WUtPUU5sUVJqdWtLSWJ2VDZ0a3c9PQ==
kind: Secret
metadata:
  name: ceph-secret-admin
type: kubernetes.io/rbd
---
apiVersion: v1
data:
  key: QVFEYzJRbGQ1VjI5THhBQU00WUtPUU5sUVJqdWtLSWJ2VDZ0a3c9PQ==
kind: Secret
metadata:
  name: ceph-secret-admin
  namespace: ns-elastic
type: kubernetes.io/rbd
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: rbd-retain
  annotations:
    storageclass.kubernetes.io/is-default-class: &quot;false&quot;
provisioner: ceph.com/rbd
reclaimPolicy: Retain
parameters:
  monitors: 192.168.0.134:6789
  adminId: admin
  adminSecretName: ceph-secret-admin
  adminSecretNamespace: default
  pool: storageclass-rbd-retain
  userId: admin
  userSecretName: ceph-secret-admin
  fsType: ext4
  imageFormat: &quot;2&quot;
  imageFeatures: &quot;layering&quot;
</code></pre><h4 id="k8s中部署nginx项目采用-cephcomrbd-和nfs类似-这里省略">k8s中部署nginx项目采用 ceph.com/rbd 和nfs类似, 这里省略</h4>
<blockquote>
<p>以上采用的是persistentVolumeClaim 方式动态分配全部内容</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>ceph安装部署</title>
			<link>https://www.ngirl.xyz/posts/6-ceph%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
			<pubDate>Thu, 26 Sep 2019 11:13:40 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/6-ceph%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
			<description>Ceph是一个统一的分布式存储系统，设计初衷是提供较好的性能、可靠性和可扩展性。
简单了解什么是块存储/对象存储/文件系统存储？ ceph 目前提供对象存储（RADOSGW）、块存储RDB以及 CephFS 文件系统这 3 种功能。对于这3种功能介绍，分别如下：
  对象存储，也就是通常意义的键值存储，其接口就是简单的GET、PUT、DEL 和其他扩展，代表主要有 Swift 、S3 以及 Gluster 等；
  块存储，这种接口通常以 QEMU Driver 或者 Kernel Module 的方式存在，这种接口需要实现 Linux 的 Block Device 的接口或者 QEMU 提供的 Block Driver 接口，如 Sheepdog，AWS 的 EBS，青云的云硬盘和阿里云的盘古系统，还有 Ceph 的 RBD（RBD是Ceph面向块存储的接口）。在常见的存储中 DAS、SAN 提供的也是块存储；
  文件存储，通常意义是支持 POSIX 接口，它跟传统的文件系统如 Ext4 是一个类型的，但区别在于分布式存储提供了并行化的能力，如 Ceph 的 CephFS (CephFS是Ceph面向文件存储的接口)，但是有时候又会把 GlusterFS ，HDFS 这种非POSIX接口的类文件存储接口归入此类。当然 NFS、NAS也是属于文件系统存储；
  参考教程 Kubernetes 集成 Ceph 后端存储教程 centos7安装ceph集群
准备 配置源 cat &amp;gt;/etc/yum.</description>
			<content type="html"><![CDATA[<p>Ceph是一个统一的分布式存储系统，设计初衷是提供较好的性能、可靠性和可扩展性。</p>
<!-- more-->
<h3 id="简单了解什么是块存储对象存储文件系统存储">简单了解什么是块存储/对象存储/文件系统存储？</h3>
<p>ceph 目前提供对象存储（RADOSGW）、块存储RDB以及 CephFS 文件系统这 3 种功能。对于这3种功能介绍，分别如下：</p>
<ol>
<li>
<p>对象存储，也就是通常意义的键值存储，其接口就是简单的GET、PUT、DEL 和其他扩展，代表主要有 Swift 、S3 以及 Gluster 等；</p>
</li>
<li>
<p>块存储，这种接口通常以 QEMU Driver 或者 Kernel Module 的方式存在，这种接口需要实现 Linux 的 Block Device 的接口或者 QEMU 提供的 Block Driver 接口，如 Sheepdog，AWS 的 EBS，青云的云硬盘和阿里云的盘古系统，还有 Ceph 的 RBD（RBD是Ceph面向块存储的接口）。在常见的存储中 DAS、SAN 提供的也是块存储；</p>
</li>
<li>
<p>文件存储，通常意义是支持 POSIX 接口，它跟传统的文件系统如 Ext4 是一个类型的，但区别在于分布式存储提供了并行化的能力，如 Ceph 的 CephFS (CephFS是Ceph面向文件存储的接口)，但是有时候又会把 GlusterFS ，HDFS 这种非POSIX接口的类文件存储接口归入此类。当然 NFS、NAS也是属于文件系统存储；</p>
</li>
</ol>
<h3 id="参考教程">参考教程</h3>
<p><a href="https://blog.csdn.net/shida_csdn/article/details/78579043">Kubernetes 集成 Ceph 后端存储教程</a>
<a href="https://blog.csdn.net/zcc_heu/article/details/79017624">centos7安装ceph集群</a></p>
<h3 id="准备">准备</h3>
<h4 id="配置源">配置源</h4>
<pre><code>cat &gt;/etc/yum.repos.d/ceph.repo&lt;&lt;EOF
[ceph]
name=ceph
baseurl=http://mirrors.aliyun.com/ceph/rpm-jewel/el7/x86_64/
gpgcheck=0
priority=1

[ceph-noarch]
name=cephnoarch
baseurl=http://mirrors.aliyun.com/ceph/rpm-jewel/el7/noarch/
gpgcheck=0
priority=1

[ceph-source]
name=Ceph source packages
baseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/SRPMS
enabled=0
gpgcheck=1
type=rpm-md
gpgkey=http://mirrors.163.com/ceph/keys/release.asc
priority=1
EOF

</code></pre><h4 id="安装过卸载">安装过卸载</h4>
<pre><code>ceph-deploy purge dk1-t dk2-t
ceph-deploy purgedata dk1-t dk2-t
ceph-deploy forgetkeys

</code></pre><h3 id="在dk2-t节点创建集群-mon模块">在dk2-t节点创建集群 mon模块</h3>
<pre><code>yum install ceph-deploy -y
ceph-deploy --version

mkdir /data/ceph
cd /data/ceph
ceph-deploy new dk2-t

# 查看配置文件
ls -l

# 配置ceph.conf
[global]
...
# 如果有多个网卡，应该配置如下选项，
# public network是公共网络，负责集群对外提供服务的流量
# cluster network是集群网络，负载集群中数据复制传输通信等
# 本次实验使用同一块网卡，生境环境建议分别使用一块网卡
public network = 192.168.0.0/22
cluster network = 192.168.0.0/22
osd pool default size = 2


# 安装 ceph 包
# 如果按照官方文档安装方法 会重新配置安装官方ceph源
# 由于网络问题，安装可能会出错，需要多次执行
# ceph-deploy install 其实只是会安装 ceph ceph-radosgw 两个包
# ceph-deploy install lab1 lab2 lab3
# 推荐使用阿里源安装，因为使用ceph-deploy安装会很慢
# 使用如下命令手动安装包，替代官方的 ceph-deploy install 命令
# 如下操作在所有node节点上执行
export CEPH_DEPLOY_REPO_URL=http://mirrors.163.com/ceph/rpm-luminous/el7
export CEPH_DEPLOY_GPG_URL=http://mirrors.163.com/ceph/keys/release.asc

# 先执行是因为 ceph-deploy install太慢
yum install -y ceph ceph-radosgw
ceph-deploy install dk2-t


# 部署monitor和生成keys
ceph-deploy mon create-initial
ls -l *.keyring

# 复制文件到node节点
ceph-deploy dk1-t dk2-t

# 额外mon节点，mon节点也需要高可用
ceph-deploy mon add dk1-t
</code></pre><h3 id="在dk2-t节点创建集群-mgr模块">在dk2-t节点创建集群 mgr模块</h3>
<pre><code># 部署manager （luminous+）12及以后的版本需要部署
# 本次部署 jewel 版本 ，不需要执行如下命令
 ceph-deploy mgr create dk2-t
</code></pre><h3 id="在dk2-t节点创建集群-osd模块">在dk2-t节点创建集群 osd模块</h3>
<pre><code># 12的版本(这里挂载一个 10G的磁盘 /dev/sdb)
# create 命令一次完成准备 OSD 、部署到 OSD 节点、并激活它。 create 命令是依次执行 prepare 和 activate 命令的捷径。
ceph-deploy osd create --data /dev/sdb dk2-t
ceph-deploy osd create --data /dev/sdc dk1-t
</code></pre><h3 id="如何卸载osd">如何卸载osd</h3>
<pre><code># 查看
ceph osd tree

# 节点状态标记为out
ceph osd out osd.0

# 从crush中移除节点
ceph osd crush remove osd.0

# 删除节点
ceph osd rm osd.0

# 删除节点认证（不删除编号会占住）
ceph auth del osd.0
</code></pre><h4 id="查看-mon-信息">查看 mon 信息</h4>
<pre><code>ceph mon dump

dumped monmap epoch 1
epoch 1
fsid 4620d0c7-4458-4ff9-9296-d1318058bafc
last_changed 2019-06-19 14:44:41.361005
created 2019-06-19 14:44:41.361005
0: 192.168.0.134:6789/0 mon.dk2-t
</code></pre><h4 id="配置文件内容-etccephcephconf">配置文件内容 /etc/ceph/ceph.conf</h4>
<pre><code>[global]
public network = 192.168.0.0/22
cluster network = 192.168.0.0/22
osd pool default size = 2
fsid = 4620d0c7-4458-4ff9-9296-d1318058bafc
mon_initial_members = dk2-t
mon_host = 192.168.0.134
auth_cluster_required = cephx
auth_service_required = cephx
auth_client_required = cephx
mon_max_pg_per_osd = 1000
</code></pre><h3 id="ceph-一些测试命令">ceph 一些测试命令</h3>
<h4 id="创建-rbd-pool名字叫做-kube">创建 rbd pool，名字叫做 kube</h4>
<pre><code>ceph osd pool create kube 256 256
</code></pre><h4 id="如何取得admin的密钥">如何取得admin的密钥</h4>
<pre><code>ceph auth get client.admin 2&gt;&amp;1 |grep &quot;key = &quot; |awk '{print  $3}'
AQAn/19bbb21GBAA1kc0HRWoGjeoPTRQziA03A==
</code></pre><h4 id="测试ceph是否正常">测试ceph是否正常</h4>
<pre><code>rbd create kube/test --size 1024 --image-format 2
rbd ls kube
rbd map kube/test
    # 如果报错, 警用
    rbd info kube/test
    rbd feature disable kube/test exclusive-lock object-map fast-diff deep-flatten

rbd map kube/test
rbd showmapped
mkfs.ext4 /dev/rbd0
mkdir /data/rbd0
mount /dev/rbd0 /data/rbd0
cd /data/rbd0 &amp;&amp; echo test &gt; test.txt

</code></pre><hr>
<h3 id="在k8s-手动创建存储类">在k8s 手动创建存储类</h3>
<h4 id="创建ceph-pg">创建ceph pg</h4>
<pre><code># Total PGs = (Total_number_of_OSD * 100) / max_replication_count
# pg = 1 * 100 /2 ~ 64(取2的次方数)

# 这里准备创建2个pool, 每个pool
ceph osd pool create rbd-k8s 16

# 查看
ceph osd lspools

# 创建image
rbd create rbd-k8s/cephimageredis --size 500M

# 查看list
rbd list rbd-k8s

# 处理新特性
# 查看info
rbd info rbd-k8s/cephimageredis

# 关闭exclusive-lock object-map fast-diff deep-flatten 这些特性
rbd feature disable  rbd-k8s/cephimageredis exclusive-lock object-map fast-diff deep-flatten
</code></pre><h4 id="首先创建secret">首先创建secret</h4>
<pre><code>#获取key
grep key /etc/ceph/ceph.client.admin.keyring |awk '{printf &quot;%s&quot;, $NF}'|base64
</code></pre><ul>
<li><strong>ceph-secret.yaml</strong></li>
</ul>
<pre><code>apiVersion: v1
kind: Secret
metadata:
  name: ceph-secret
type: &quot;kubernetes.io/rbd&quot;
data:
  key: QVFCTFo2dGNGNXFLRnhBQXBGTXJEdm5CY2k2UGtwZmZrN0JSVEE9PQ==
</code></pre><h4 id="其次创建pv-pv是没有namespace概念的">其次创建pv, pv是没有namespace概念的</h4>
<blockquote>
<p>persistentVolumeReclaimPolicy是清理规则 (retain: 不清理, Recycle: 回收)</p>
</blockquote>
<ul>
<li><strong>redis-ceph-pv.yml</strong></li>
</ul>
<pre><code>apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis2-ceph-rbd-pv
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  rbd:
    monitors:
      - '192.168.0.134:6789'
    pool: rbd-k8s
    image: cephimageredis
    user: admin
    secretRef:
      name: ceph-secret
    fsType: ext4
    readOnly: false
  persistentVolumeReclaimPolicy: Recycle
</code></pre><ul>
<li><strong>执行部署pv</strong></li>
</ul>
<pre><code>kubectl create -f redis-ceph-pv.yml
</code></pre><h4 id="然后创建pvc">然后创建pvc</h4>
<ul>
<li><strong>redis-ceph-pvc.yml</strong></li>
</ul>
<pre><code>apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis2-ceph-rbd-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
</code></pre><ul>
<li><strong>执行部署pvc</strong></li>
</ul>
<pre><code>kubectl create -f redis-ceph-pvc.yml
</code></pre><h4 id="最后在rancher上选择挂载rbd">最后在rancher上选择挂载rbd</h4>
<p><img src="https://zhangzw001.github.io/images/blog6/rancher-pv.png" alt="rancher-pv"></p>
<hr>
]]></content>
		</item>
		
		<item>
			<title>hexo添加看板娘</title>
			<link>https://www.ngirl.xyz/posts/5-hexo%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/</link>
			<pubDate>Tue, 24 Sep 2019 17:46:17 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/5-hexo%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/</guid>
			<description>&lt;h3 id=&#34;hexo6-左下角添加看板娘&#34;&gt;hexo6 左下角添加看板娘&lt;/h3&gt;</description>
			<content type="html"><![CDATA[<h3 id="hexo6-左下角添加看板娘">hexo6 左下角添加看板娘</h3>
<p>github地址: <a href="https://github.com/stevenjoezhang/live2d-widget">张书樵大神</a></p>
<h3 id="下载大神项目-会说话换人物小游戏等功能">下载大神项目 (会说话,换人物,小游戏等功能)</h3>
<pre><code>cd themes/nextv6/source
git clone https://github.com/stevenjoezhang/live2d-widget.git
</code></pre><h4 id="github说明比较详细-这里简单说明">github说明比较详细, 这里简单说明</h4>
<blockquote>
<p>由于这里是克隆到了source目录, hexo d -g的时候会生成到public目录, 相当于站点根目录了</p>
</blockquote>
<pre><code># 直接开启autoload.js注释
const live2d_path = &quot;/live2d-widget/&quot;;

# 修改 themes/nextv6/layout/_layout.swig, 最后一行添加如下
&lt;!-- 看板娘 --&gt;
&lt;script src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;
</code></pre><h3 id="一般小白简单教程只有看鼠标方向功能">一般小白简单教程(只有看鼠标方向功能)</h3>
<blockquote>
<p>hexo 官方支持版</p>
</blockquote>
<h4 id="需要安装模板">需要安装模板</h4>
<pre><code>npm install --save hexo-helper-live2d
</code></pre><h4 id="修改主题配置文件">修改主题配置文件</h4>
<p><a href="https://blog.csdn.net/wang_123_zy/article/details/87181892#live2dwidgetmodelchitose_12">各种宠物预览</a></p>
<pre><code># Live2D
## https://github.com/EYHN/hexo-helper-live2d
live2d:
  enable: true
  # enable: false
  scriptFrom: local # 默认
  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)
  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径
  pluginModelPath: assets/ # 模型文件相对与插件根目录路径
  # scriptFrom: jsdelivr # jsdelivr CDN
  # scriptFrom: unpkg # unpkg CDN
  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url
  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中
  debug: false # 调试, 是否在控制台输出日志
  model:
    use: live2d-widget-model-haruto # npm-module package name
    # use: wanko # 博客根目录/live2d_models/ 下的目录名
    # use: ./wives/wanko # 相对于博客根目录的路径
    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url
  display:
    position: left
    width: 150
    height: 300
  mobile:
    show: true # 手机中是否展示
</code></pre>]]></content>
		</item>
		
		<item>
			<title>hexo鼠标移动和鼠标点击特效</title>
			<link>https://www.ngirl.xyz/posts/4-hexo%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E5%92%8C%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/</link>
			<pubDate>Tue, 24 Sep 2019 16:34:36 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/4-hexo%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E5%92%8C%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/</guid>
			<description>hexo6 鼠标添加点击出现桃心的特效 来自: Next主题个性化
所需要的js文件  未压缩  ! function(e, t, a) { function n() { c( &amp;quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&amp;quot;), o(), r() } function r() { for (var e = 0; e &amp;lt; d.length; e++) d[e].alpha &amp;lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = &amp;quot;left:&amp;quot; + d[e].x + &amp;quot;px;top:&amp;quot; + d[e].</description>
			<content type="html"><![CDATA[<h3 id="hexo6-鼠标添加点击出现桃心的特效">hexo6 鼠标添加点击出现桃心的特效</h3>
 <!-- more -->
<p>来自: <a href="https://www.writebug.site/2019/01/02/Next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96/">Next主题个性化</a></p>
<h4 id="所需要的js文件">所需要的js文件</h4>
<ul>
<li>未压缩</li>
</ul>
<pre><code>! function(e, t, a) {
    function n() {
        c(
            &quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;), o(), r()
    }
    
    function r() {
        for (var e = 0; e &lt; d.length; e++) d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = &quot;left:&quot; + d[e].x + &quot;px;top:&quot; + d[e].y + &quot;px;opacity:&quot; + d[e].alpha + &quot;;transform:scale(&quot; + d[e].scale + &quot;,&quot; + d[e].scale + &quot;) rotate(45deg);background:&quot; + d[e].color + &quot;;z-index:99999&quot;);
        requestAnimationFrame(r)
    }
    
    function o() {
        var t = &quot;function&quot; == typeof e.onclick &amp;&amp; e.onclick;
        e.onclick = function(e) {
            t &amp;&amp; t(), i(e)
        }
    }
    
    function i(e) {
        var a = t.createElement(&quot;div&quot;);
        a.className = &quot;heart&quot;, d.push({
            el: a,
            x: e.clientX - 5,
            y: e.clientY - 5,
            scale: 1,
            alpha: 1,
            color: s()
        }), t.body.appendChild(a)
    }

    function c(e) {
        var a = t.createElement(&quot;style&quot;);
        a.type = &quot;text/css&quot;;
        try {
            a.appendChild(t.createTextNode(e))
        } catch (t) {
            a.styleSheet.cssText = e
        }
        t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)
    }

    function s() {
        return &quot;rgb(&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;)&quot;
    }
    var d = [];
    e.requestAnimationFrame = function() {
        return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function(e) {
            setTimeout(e, 1e3 / 60)
        }
    }(), n()
}(window, document);
</code></pre><ul>
<li>压缩后</li>
</ul>
<pre><code>!function(e,t,a){function n(){c(&quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;),o(),r()}function r(){for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)}function o(){var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e){t&amp;&amp;t(),i(e)}}function i(e){var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)}function s(){return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);
</code></pre><h4 id="将上面的内容贴到新增的themesnextv6sourcejssrclovejs-文件中">将上面的内容贴到新增的themes/nextv6/source/js/src/love.js 文件中</h4>
<h4 id="修改themesnextv6layout_layoutswig文件-末尾添加如下内容">修改themes/nextv6/layout/_layout.swig文件, 末尾添加如下内容</h4>
<pre><code>&lt;!-- 鼠标桃心动画 --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;
</code></pre><h3 id="hexo6-鼠标移动添加星星特效">hexo6 鼠标移动添加星星特效</h3>
<p>来自: <a href="https://blog.csdn.net/a201577F0546/article/details/89060017">愚人节鼠标跟随特效</a></p>
<h4 id="新增js文件-themesnextv6sourcejssrclove2js">新增js文件 themes/nextv6/source/js/src/love2.js</h4>
<pre><code>
/*!
 * Fairy Dust Cursor.js
 * - 90's cursors collection
 * -- https://github.com/tholman/90s-cursor-effects
 * -- http://codepen.io/tholman/full/jWmZxZ/
 */

(function fairyDustCursor() {
  
  var possibleColors = [&quot;#D61C59&quot;, &quot;#E7D84B&quot;, &quot;#1B8798&quot;]
  var width = window.innerWidth;
  var height = window.innerHeight;
  var cursor = {x: width/2, y: width/2};
  var particles = [];
  
  function init() {
    bindEvents();
    loop();
  }
  
  // Bind events that are needed
  function bindEvents() {
    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('touchmove', onTouchMove);
    document.addEventListener('touchstart', onTouchMove);
    
    window.addEventListener('resize', onWindowResize);
  }
  
  function onWindowResize(e) {
    width = window.innerWidth;
    height = window.innerHeight;
  }
  
  function onTouchMove(e) {
    if( e.touches.length &gt; 0 ) {
      for( var i = 0; i &lt; e.touches.length; i++ ) {
        addParticle( e.touches[i].clientX, e.touches[i].clientY, possibleColors[Math.floor(Math.random()*possibleColors.length)]);
      }
    }
  }
  
  function onMouseMove(e) {    
    cursor.x = e.clientX;
    cursor.y = e.clientY;
    
    addParticle( cursor.x, cursor.y, possibleColors[Math.floor(Math.random()*possibleColors.length)]);
  }
  
  function addParticle(x, y, color) {
    var particle = new Particle();
    particle.init(x, y, color);
    particles.push(particle);
  }
  
  function updateParticles() {
    
    // Updated
    for( var i = 0; i &lt; particles.length; i++ ) {
      particles[i].update();
    }
    
    // Remove dead particles
    for( var i = particles.length -1; i &gt;= 0; i-- ) {
      if( particles[i].lifeSpan &lt; 0 ) {
        particles[i].die();
        particles.splice(i, 1);
      }
    }
    
  }
  
  function loop() {
    requestAnimationFrame(loop);
    updateParticles();
  }
  
  /**
   * Particles
   */
  
  function Particle() {

    this.character = &quot;*&quot;;
    this.lifeSpan = 120; //ms
    this.initialStyles ={
      &quot;position&quot;: &quot;fixed&quot;,
      &quot;top&quot;: &quot;0&quot;, //必须加
      &quot;display&quot;: &quot;block&quot;,
      &quot;pointerEvents&quot;: &quot;none&quot;,
      &quot;z-index&quot;: &quot;10000000&quot;,
      &quot;fontSize&quot;: &quot;20px&quot;,
      &quot;will-change&quot;: &quot;transform&quot;
    };

    // Init, and set properties
    this.init = function(x, y, color) {

      this.velocity = {
        x:  (Math.random() &lt; 0.5 ? -1 : 1) * (Math.random() / 2),
        y: 1
      };
      
      this.position = {x: x - 10, y: y - 20};
      this.initialStyles.color = color;
      console.log(color);

      this.element = document.createElement('span');
      this.element.innerHTML = this.character;
      applyProperties(this.element, this.initialStyles);
      this.update();
      
      document.body.appendChild(this.element);
    };
    
    this.update = function() {
      this.position.x += this.velocity.x;
      this.position.y += this.velocity.y;
      this.lifeSpan--;
      
      this.element.style.transform = &quot;translate3d(&quot; + this.position.x + &quot;px,&quot; + this.position.y + &quot;px,0) scale(&quot; + (this.lifeSpan / 120) + &quot;)&quot;;
    }
    
    this.die = function() {
      this.element.parentNode.removeChild(this.element);
    }
    
  }
  
  /**
   * Utils
   */
  
  // Applies css `properties` to an element.
  function applyProperties( target, properties ) {
    for( var key in properties ) {
      target.style[ key ] = properties[ key ];
    }
  }
  
  init();
})();
</code></pre><h4 id="修改themesnextv6layout_layoutswig文件-末尾添加如下内容-1">修改themes/nextv6/layout/_layout.swig文件, 末尾添加如下内容</h4>
<pre><code>&lt;!-- 鼠标移动星星特效 --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love2.js&quot;&gt;&lt;/script&gt;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>部署elk7.2.0</title>
			<link>https://www.ngirl.xyz/posts/2-%E9%83%A8%E7%BD%B2elk7-2-0/</link>
			<pubDate>Thu, 19 Sep 2019 17:59:53 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/2-%E9%83%A8%E7%BD%B2elk7-2-0/</guid>
			<description>说明:
 1 单台k8s,本机目录挂载(未配置cephfs) 2 如果replicas大于1, 就会出现多个es挂载同一个目录,会出现报错(uuid block) 1. es配置本地挂载 k8s-es-7.2.0.yml --- apiVersion: v1 kind: ServiceAccount metadata: labels: app: elasticsearch name: elasticsearch7-admin namespace: ns-elastic7 --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: elasticsearch7-admin labels: app: elasticsearch roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: elasticsearch7-admin namespace: ns-elastic7 --- apiVersion: apps/v1 kind: StatefulSet metadata: labels: app: elasticsearch role: master name: elasticsearch-master namespace: ns-elastic7 spec: replicas: 1 serviceName: elasticsearch-master selector: matchLabels: app: elasticsearch role: master template: metadata: labels: app: elasticsearch role: master spec: serviceAccountName: elasticsearch7-admin restartPolicy: Always securityContext: fsGroup: 1000 containers: - name: elasticsearch-master image: hub.</description>
			<content type="html"><![CDATA[<blockquote>
<p>说明:</p>
</blockquote>
<pre><code>1 单台k8s,本机目录挂载(未配置cephfs)
2 如果replicas大于1, 就会出现多个es挂载同一个目录,会出现报错(uuid block)
</code></pre><h3 id="1-es配置本地挂载-k8s-es-720yml">1. es配置本地挂载 k8s-es-7.2.0.yml</h3>
<pre><code>---
apiVersion: v1
kind: ServiceAccount
metadata:
 labels:
   app: elasticsearch
 name: elasticsearch7-admin
 namespace: ns-elastic7
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: elasticsearch7-admin
 labels:
   app: elasticsearch
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
 - kind: ServiceAccount
   name: elasticsearch7-admin
   namespace: ns-elastic7
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    role: master
  name: elasticsearch-master
  namespace: ns-elastic7
spec:
  replicas: 1
  serviceName: elasticsearch-master
  selector:
    matchLabels:
      app: elasticsearch
      role: master
  template:
    metadata:
      labels:
        app: elasticsearch
        role: master
    spec:
      serviceAccountName: elasticsearch7-admin
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
      containers:
        - name: elasticsearch-master
          image: hub.zhangzw.com/bq/elasticsearch:7.2.0
          command: [&quot;bash&quot;, &quot;-c&quot;, &quot;ulimit -l unlimited &amp;&amp; sysctl -w vm.max_map_count=262144 &amp;&amp; chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/data &amp;&amp; exec su elasticsearch docker-entrypoint.sh&quot;]
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          ports:
            - containerPort: 9200
              protocol: TCP
            - containerPort: 9300
              protocol: TCP
          resources:
            requests:
              cpu: &quot;50m&quot;
            limits:
              cpu: &quot;800m&quot;
          env:
            - name: cluster.name
              value: &quot;es_cluster&quot;
            - name: node.master
              value: &quot;true&quot;
            - name: node.data
              value: &quot;true&quot;
            - name: cluster.initial_master_nodes
              value: &quot;elasticsearch-master-0&quot; # 根据副本数和name配置
            - name: discovery.zen.ping_timeout
              value: &quot;5s&quot;
            - name: node.ingest
              value: &quot;false&quot;
            - name: ES_JAVA_OPTS
              value: &quot;-Xms1g -Xmx1g&quot;
            - name: &quot;discovery.zen.ping.unicast.hosts&quot;
              value: &quot;elasticsearch-discovery&quot; # Disvocery Service
            - name: &quot;http.cors.enabled&quot;
              value: &quot;true&quot;
            - name: &quot;http.cors.allow-origin&quot;
              value: &quot;*&quot;
          volumeMounts:
            - name: elasticsearch-data-volume
              mountPath: /usr/share/elasticsearch/data
      volumes:
        - name: elasticsearch-data-volume
          hostPath:
            path: /data/k8s-container/elk-7.2.0/es-7.2.0/data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch-discovery
  namespace: ns-elastic7
spec:
  publishNotReadyAddresses: true
  ports:
  - name: transport
    port: 9300
    targetPort: 9300
  selector:
    app: elasticsearch
    role: master
---
kind: Service
apiVersion: v1
metadata:
 labels:
   app: elasticsearch
 name: elasticsearch-service
 namespace: ns-elastic7
spec:
 type: NodePort
 ports:
   - port: 9200
     targetPort: 9200
     nodePort: 19230
     protocol: TCP
 selector:
   app: elasticsearch
</code></pre><h3 id="2-es配置nfs动态挂载-k8s-es-720-nfsyml">2. es配置nfs动态挂载 k8s-es-7.2.0-nfs.yml</h3>
<pre><code>---
apiVersion: v1
kind: ServiceAccount
metadata:
 labels:
   app: elasticsearch
 name: elasticsearch-admin
 namespace: ns-elastic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: elasticsearch-admin
 labels:
   app: elasticsearch
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
 - kind: ServiceAccount
   name: elasticsearch-admin
   namespace: ns-elastic
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    role: master
  name: elasticsearch-master
  namespace: ns-elastic
spec:
  replicas: 2
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data-nfs
      annotations:
        volume.beta.kubernetes.io/storage-class: &quot;nfs&quot;
    spec:
      accessModes: [ &quot;ReadWriteOnce&quot; ]
      resources:
        requests:
          storage: 2Gi
  serviceName: elasticsearch-master
  selector:
    matchLabels:
      app: elasticsearch
      role: master
  template:
    metadata:
      labels:
        app: elasticsearch
        role: master
    spec:
      serviceAccountName: elasticsearch-admin
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
      containers:
        - name: elasticsearch-master
          image: elasticsearch:7.2.0
          command: [&quot;bash&quot;, &quot;-c&quot;, &quot;ulimit -l unlimited &amp;&amp; sysctl -w vm.max_map_count=262144 &amp;&amp; chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/data &amp;&amp; exec su elasticsearch docker-entrypoint.sh&quot;]
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: elasticsearch-data-nfs
            mountPath: /usr/share/elasticsearch/data
          securityContext:
            privileged: true
          ports:
            - containerPort: 9200
              protocol: TCP
            - containerPort: 9300
              protocol: TCP
          env:
            - name: cluster.name
              value: &quot;es_cluster&quot;
            - name: node.master
              value: &quot;true&quot;
            - name: node.data
              value: &quot;true&quot;
            - name: cluster.initial_master_nodes
              value: &quot;elasticsearch-master-0,elasticsearch-master-1&quot; # 根据副本数和name配置
            - name: discovery.zen.ping_timeout
              value: &quot;5s&quot;
            - name: node.ingest
              value: &quot;false&quot;
            - name: ES_JAVA_OPTS
              value: &quot;-Xms1g -Xmx1g&quot;
            - name: &quot;discovery.zen.ping.unicast.hosts&quot;
              value: &quot;elasticsearch-discovery&quot; # Disvocery Service
            - name: &quot;http.cors.enabled&quot;
              value: &quot;true&quot;
            - name: &quot;http.cors.allow-origin&quot;
              value: &quot;*&quot;
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch-discovery
  namespace: ns-elastic
spec:
  publishNotReadyAddresses: true
  ports:
  - name: transport
    port: 9300
    targetPort: 9300
  selector:
    app: elasticsearch
    role: master
---
kind: Service
apiVersion: v1
metadata:
 labels:
   app: elasticsearch
 name: elasticsearch-service
 namespace: ns-elastic
spec:
 type: NodePort
 ports:
   - port: 9200
     targetPort: 9200
     nodePort: 19220
     protocol: TCP
 selector:
   app: elasticsearch
</code></pre><h3 id="3-kibana配置k8s-kibana-720yml">3. kibana配置k8s-kibana-7.2.0.yml</h3>
<pre><code>apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: ns-elastic7
  labels:
    elastic-app: kibana
data:
  kibana.yml: |
    server.name: kibana
    server.host: &quot;0&quot;
    elasticsearch.hosts: [ &quot;http://elasticsearch-service:9200&quot; ]
    xpack.monitoring.ui.container.elasticsearch.enabled: true
---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    elastic-app: kibana
  name: kibana
  namespace: ns-elastic7
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      elastic-app: kibana
  template:
    metadata:
      labels:
        elastic-app: kibana
    spec:
      containers:
        - name: kibana
          image: hub.zhangzw.com/bq/kibana:7.2.0
          ports:
            - containerPort: 5601
              protocol: TCP
          resources:
            requests:
              cpu: &quot;50m&quot;
            limits:
              cpu: &quot;800m&quot;
          volumeMounts:
            - name: kibana-config
              mountPath: /usr/share/kibana/config
      volumes:
        - name: kibana-config
          configMap:
            name: kibana-config
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

---
kind: Service
apiVersion: v1
metadata:
  labels:
    elastic-app: kibana
  name: kibana-service
  namespace: ns-elastic7
spec:
  ports:
    - port: 5601
      targetPort: 5601
  selector:
    elastic-app: kibana
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 labels:
   elastic-app: kibana
 name: kibana-ingress
 namespace: ns-elastic7
spec:
 rules:
   - host: elk-kibana-dev.zhangzw.com
     http:
       paths:
         - backend:
             serviceName: kibana-service
             servicePort: 5601
</code></pre><h3 id="4-logstash配置-本地挂载-k8s-logstash-720yml">4. logstash配置 本地挂载 k8s-logstash-7.2.0.yml</h3>
<ul>
<li>4.1 config/pipelines.yml</li>
</ul>
<pre><code>- pipeline.id: main
  path.config: &quot;/usr/share/logstash/config/pipeline/*.conf&quot;
</code></pre><ul>
<li>4.2 首先配置grok规则 config/pipeline/logstash.conf</li>
</ul>
<pre><code>input {
    udp {
        port =&gt; &quot;10000&quot;
        }
    }

 filter {
      grok {
          match =&gt; {
            &quot;message&quot; =&gt; &quot;\{\&quot;id\&quot;:\&quot;(?&lt;id&gt;(.)*)\&quot;,\&quot;tag\&quot;:\&quot;(?&lt;tag&gt;(.)*)\&quot;,\&quot;title\&quot;:\&quot;%{GREEDYDATA:title}(?&lt;title&gt;(.|\r|\n)*)\&quot;,\&quot;value\&quot;:\&quot;%{GREEDYDATA:value}(?&lt;value&gt;(.|\r|\n)*)\&quot;,\&quot;createdAt\&quot;:\&quot;(?&lt;createdAt&gt;\S+ \S+)\&quot;,\&quot;Telephone\&quot;:\&quot;(?&lt;Telephone&gt;(.)*)\&quot;,\&quot;uid\&quot;:\&quot;(?&lt;uid&gt;(.)*)\&quot;,\&quot;updateTime\&quot;:\&quot;(?&lt;updateTime&gt;(.)*)\&quot;,\&quot;appVersion\&quot;:\&quot;(?&lt;appVersion&gt;(.)*)\&quot;,\&quot;mobileModel\&quot;:\&quot;(?&lt;mobileModel&gt;(.)*)\&quot;,\&quot;osVersion\&quot;:\&quot;(?&lt;osVersion&gt;(.)*)\&quot;,\&quot;channel\&quot;:\&quot;(?&lt;channel&gt;(.)*)\&quot;,\&quot;UDID\&quot;:\&quot;(?&lt;UDID&gt;(.)*)\&quot;\}&quot;
              }
            }
 }

output {
    elasticsearch {
        hosts =&gt;  [ &quot;http://elasticsearch-service:9200&quot; ]
        index =&gt; &quot;k8s2-dev-%{+YYYY.MM.dd}&quot;

        }

    }
</code></pre><ul>
<li>4.3 配置文件 k8s-logstash-7.2.0.yml</li>
</ul>
<pre><code>---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    elastic-app: logstash
  name: logstash
  namespace: ns-elastic
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      elastic-app: logstash
  template:
    metadata:
      labels:
        elastic-app: logstash
    spec:
      containers:
        - name: logstash
          image: hub.zhangzw.com/bq/logstash:7.2.0
          ports:
            - containerPort: 10000
              protocol: UDP
          volumeMounts:
            - name: logstash-config
              mountPath: /usr/share/logstash/config
      volumes:
        - name: logstash-config
          hostPath:
            path: /data/k8s-pod/elk-7.2.0/logstash-7.2.0/config
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

---
kind: Service
apiVersion: v1
metadata:
  labels:
    elastic-app: logstash
  name: logstash-service
  namespace: ns-elastic
spec:
  type: NodePort
  ports:
    - port: 10000
      targetPort: 10000
      nodePort: 10000
      protocol: UDP
  selector:
    elastic-app: logstash
  type: NodePort
---
</code></pre>]]></content>
		</item>
		
		<item>
			<title>首次搭建hexo博客系统</title>
			<link>https://www.ngirl.xyz/posts/%E9%A6%96%E6%AC%A1%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</link>
			<pubDate>Thu, 19 Sep 2019 17:24:53 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/%E9%A6%96%E6%AC%A1%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</guid>
			<description>&lt;p&gt;首次搭建hexo博客系统, 简单记录一下一些用法和注意事项&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>首次搭建hexo博客系统, 简单记录一下一些用法和注意事项</p>
<h3 id="1-安装hexo">1 安装hexo</h3>
<ul>
<li>1.1 在mac上安装</li>
</ul>
<pre><code># 安装node
brew install node npm
</code></pre><ul>
<li>1.2 在linux安装</li>
</ul>
<pre><code># 安装node10
curl -sL https://rpm.nodesource.com/setup_10.x | bash -
yum install -y nodejs
</code></pre><ul>
<li>1.3 安装hexo</li>
</ul>
<pre><code># 安装hexo
npm install -g hexo
</code></pre><h3 id="2-初始化">2 初始化</h3>
<pre><code>cd /data/github/
# 初始化

hexo init blog
# 框架安装
npm install

#安装 Hexo 关于启动服务器的插件
npm install hexo-server --save

# 启动服务器, 本地查看效果, 如果不指定端口，默认为4000
hexo server

</code></pre><h3 id="3-主题和配置">3 主题和配置</h3>
<ul>
<li>下载主题：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></li>
</ul>
<pre><code>unzip hexo-theme-next-master.zip
mv hexo-theme-next-master $blog/themes/
</code></pre><ul>
<li>修改主题配置 _config.yml 中的其他属性</li>
</ul>
<pre><code>title: Zhangzhiwei's Blog
...
theme: hexo-theme-next
...
scheme: Mist
</code></pre><h3 id="4-编写更新博客">4. 编写更新博客</h3>
<ul>
<li>创建博客</li>
</ul>
<pre><code>hexo new '第一个博客'
</code></pre><ul>
<li>cat source/_posts/第一个博客.md</li>
</ul>
<pre><code>title: 第一个博客
date: 2019-09-19 16:58:01
tags:
  - hexo
categories:
  - hexo学习
</code></pre><ul>
<li>github 创建一个Repository仓库</li>
</ul>
<pre><code>1. 仓库名字必须是 xxx.github.io
2. 在settings中 勾选Template repository
3. 记得添加自己的ssh
</code></pre><ul>
<li>github配置</li>
</ul>
<pre><code> # 安装 hexo 关于 git 的组件
npm install hexo-deployer-git --save
</code></pre><ul>
<li>在_config.yml 中为 git 添加配置</li>
</ul>
<pre><code>deploy:
  type: git
  repository: git@github.com:*/*.github.io.git
  branch: master
</code></pre><ul>
<li>查看是否能提交代码github</li>
</ul>
<pre><code>ssh -T -ai ~/.ssh/id_rsa git@github.com
</code></pre><ul>
<li>部署</li>
</ul>
<pre><code>hexo g
hexo d
或者
hexo d -g
</code></pre><h3 id="5-next6让首页文字预览显示">5. next6让首页文字预览显示</h3>
<ul>
<li>5.1 方法一: 自动形成摘要,默认截取的长度为 150 字符</li>
</ul>
<pre><code>1. 找到主题的配置文件(themes/next/_config.yml)
2. 修改auto_excerpt,把enable改为对应的false改为true
3. hexo d -g
</code></pre><ul>
<li>5.2 方法二: 博客内容中添加 &lt; !&ndash;more&ndash;&gt;</li>
</ul>
<pre><code># 安装node
brew install node npm
 &lt;!-- more --&gt;
</code></pre><ul>
<li>5.3 方法三: 在文章中的front-matter中添加description，并提供文章摘录,这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</li>
</ul>
<pre><code>title: 部署elk7.2.0
date: 2019-09-19 17:59:53
copyright: true
tags:
  - k8s
  - elk
  - elk7
categories:
  - 技术文档
  - elk
description: 本文主要是简单单机版部署elk7体验,  并非高可用集群方式部署, 部分安装步骤省略. 主要是记录yml配置文件, 仅供参考. 详细内容请点击下方阅读全文, 非常感谢!
</code></pre><h3 id="6-next6添加搜索功能">6. next6添加搜索功能</h3>
<pre><code>1. npm install hexo-generator-searchdb --save
2. 全局配置文件_config.yml
search:
  path: search.xml
  field: post
  format: html
  limit: 10000
3. 修改主题的_config.yml
local_search:
  enable: true
</code></pre><h3 id="7-next6-mist字体的-首页文章间距和首页页宽字体">7. next6 Mist字体的 首页文章间距和首页页宽,字体</h3>
<ul>
<li>
<p>7.1 首页文章间距</p>
<pre><code>增加一些内容: source/css/_schemes/Mist/_posts-expanded.styl
.posts-expand .post {
  margin-top: 30px;
  margin-bottom: 30px;
}
  
</code></pre><pre><code>
</code></pre></li>
<li>
<p>7.2 页宽</p>
<pre><code>source/css/_variables/base.styl
$content-desktop                = 900px
$content-desktop-large          = 1000px
$content-desktop-largest        = 1100px
</code></pre><pre><code>
</code></pre></li>
<li>
<p>7.3 字体大小</p>
<pre><code>themes/next/source/css/_variables/base.styl
  
$font-size-base           = 0.95em;
$font-size-base           = unit(hexo-config('font.global.size'), em) if hexo-config('font.global.size') is a 'unit';
$font-size-smallest       = .75em;
$font-size-smaller        = .8125em;
$font-size-small          = .855em;
$font-size-medium         = 0.95em;
$font-size-large          = 0.975em;
$font-size-larger         = 1.em;
$font-size-largest        = 1.125em;
</code></pre><pre><code>
</code></pre></li>
</ul>
<h3 id="8-添加网格">8. 添加网格</h3>
<ul>
<li>
<p>8.1 自定义方式修改</p>
<pre><code># 新创建自定义文件
cat themes/next/source/css/_custom/custom.styl
// 主页文章添加阴影效果
.post {
margin-top: 60px;
margin-bottom: 60px;
padding: 25px;
-webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);
-moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);
}

# 修改config文件
vim ./themes/next/_config.yml
custom: custom
</code></pre><p>``</p>
</li>
<li>
<p>8.2 next6版本修改方式</p>
<blockquote>
<p>参考: <a href="https://www.jianshu.com/p/ec2e6c8a1d89">hexo6&ndash;next美化整理</a></p>
</blockquote>
<ol>
<li>修改 themes/next/layout/_layout.swig</li>
</ol>
<pre><code>{% if theme.canvas_nest %}
&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;
&lt;/script&gt;
{% endif %}
</code></pre><pre><code>
 &gt; 将上述代码防止在&lt; /body&gt; 前就可以了(注意不要放在&lt; /head&gt;的后面)。

 2. 修改主题的_config.yml

</code></pre><pre><code> canvas_nest: true

 //color: 线条颜色, 默认: '0,0,0'；三个数字分别为(R,G,B)
 //opacity: 线条透明度（0~1）, 默认: 0.5
 //count: 线条的总数量, 默认: 150
 //zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1
</code></pre><pre><code></code></pre></li>
</ul>
<blockquote>
<p>注意:
我这里打开提示缺少 canvas-nest.min.js文件,这里是手动copy的一份写到 source/lib/canvas-nest/canvas-nest.min.js</p>
</blockquote>
<pre><code>!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(&quot;script&quot;),w=i.length,v=i[w-1];return{l:w,z:o(v,&quot;zIndex&quot;,-1),o:o(v,&quot;opacity&quot;,0.5),c:o(v,&quot;color&quot;,&quot;0,0,0&quot;),n:o(v,&quot;count&quot;,99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;r||i.x&lt;0?-1:1,i.ya*=i.y&gt;n||i.y&lt;0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v&lt;w.length;v++){x=w[v];if(i!==x&amp;&amp;null!==x.x&amp;&amp;null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y&lt;x.max&amp;&amp;(x===f&amp;&amp;y&gt;=x.max/2&amp;&amp;(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=&quot;rgba(&quot;+s.c+&quot;,&quot;+(A+0.2)+&quot;)&quot;,e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(&quot;canvas&quot;),s=l(),c=&quot;c_n&quot;+s.l,e=u.getContext(&quot;2d&quot;),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=&quot;position:fixed;top:0;left:0;z-index:&quot;+s.z+&quot;;opacity:&quot;+s.o;j(&quot;body&quot;)[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n&gt;p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();%

</code></pre><h3 id="9-添加评论功能">9. 添加评论功能</h3>
<ul>
<li>9.1 注册leancloud</li>
</ul>
<pre><code>注册-&gt; 验证邮箱-&gt; 实名认证 -&gt; 设置获取appid和appkey
</code></pre><ul>
<li>9.2 修改配置文件</li>
</ul>
<pre><code>valine:
  enable: true 
  appid: 'appid' 
  appkey: 'appkey' 
  placeholder: &quot;ヾﾉ≧∀≦)o 来呀！快活呀！~啦啦啦~ 啦啦啦啦~&quot; 
  visitor: true //这个打开页会统计文章阅读数
</code></pre><h3 id="10-next6添加字数统计-和阅读时长">10. next6添加字数统计 和阅读时长</h3>
<blockquote>
<p><a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a></p>
</blockquote>
<ul>
<li>10.1 安装node扩展</li>
</ul>
<pre><code>npm install hexo-symbols-count-time --save
</code></pre><ul>
<li>10.2 修改全局配置 _config.yml</li>
</ul>
<pre><code>symbols_count_time:
  symbols: true
  time: true
  total_symbols: true
  total_time: true
  exclude_codeblock: false
</code></pre><ul>
<li>10.3 修改主题配置 _config.yml</li>
</ul>
<pre><code>symbols_count_time:
  separated_meta: true
  item_text_post: true
  item_text_total: false
  awl: 4
  wpm: 275
  suffix: mins.
</code></pre><h3 id="11-next6-文章置顶功能">11. next6 文章置顶功能</h3>
<ul>
<li>11.1 安装node扩展</li>
</ul>
<pre><code>npm uninstall hexo-generator-index --save
npm install hexo-generator-index-pin-top --save
</code></pre><ul>
<li>11.2 在文章开头添加置顶标识</li>
</ul>
<pre><code>top: 10
</code></pre><ul>
<li>11.3 首页添加明显置顶标识</li>
</ul>
<pre><code>themes/next/layout/_macro/post.swig 在&lt;div class=&quot;post-meta&quot;&gt; 下添加如下代码
{% if post.top %}
    &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;
    &lt;font color=green&gt;置顶&lt;/font&gt;
    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;
{% endif %}
</code></pre><h3 id="12-next6-开启标签和分类">12. next6 开启标签和分类</h3>
<ul>
<li>12.1 创建tags相关目录</li>
</ul>
<pre><code>hexo new page tags
hexo new page categories
</code></pre><ul>
<li>12.2 开启tags标签和分类</li>
</ul>
<pre><code>vim themes/next/_config.yml
tags: /tags/ || tags
categories: /categories/ || th
</code></pre><ul>
<li>12.3 修改tags站点文件</li>
</ul>
<pre><code>cat source/tags/index.md
---
title: tags
date: 2019-09-24 10:08:59
type: &quot;tags&quot;
layout: &quot;tags&quot;
comments: false
---
</code></pre><ul>
<li>12.4 修改categories站点文件</li>
</ul>
<pre><code>cat source/categories/index.md
---
title: categories
date: 2019-09-24 10:09:55
type: &quot;categories&quot;
layout: &quot;categories&quot;
comments: false
---
</code></pre><ul>
<li>12.5 去掉xxx.github.io/tags/ 页面的post-title(因为我的这个css左对齐了,默认是居中,所以很丑)</li>
</ul>
<pre><code># 注释下面这段代码
vim themes/nextv/layout/page.swig 
&lt;!-- {% include '_partials/page/page-header.swig' %} --&gt;
</code></pre><ul>
<li>12.6 文章中多个tag和categories</li>
</ul>
<pre><code>tags:
  - k8s
  - k8s安装
categories:
  - [k8s,安装]
  - [技术文档]
</code></pre><ul>
<li>12.7 对于自定义的html不想转成hexo的格式(比如一些baidu,google的收录分析工具的验证文件)</li>
</ul>
<pre><code># hexo clean 清理public目录

# hexo d -g 部署和更新, 此时会根据source目录生成html,css,js等文件

# 假如我有一个 source/baidu_verify_xxx.html 文件 不想被更改

# 需要修改_config.yml
skip_render:
  -  &quot;*.html&quot;

# 如果非必须在 / 根目录也可以自建目录, skip_render 设置自定义的目录即可
</code></pre>]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://www.ngirl.xyz/posts/38-es%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E5%87%BA%E7%8E%B0overhead%E8%84%B1%E6%9C%BA%E7%9A%84%E9%97%AE%E9%A2%98/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://www.ngirl.xyz/posts/38-es%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E5%87%BA%E7%8E%B0overhead%E8%84%B1%E6%9C%BA%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
			<description>title: es集群节点出现overhead脱机的问题 copyright: true toc: true date: 2020-03-12 15:23:35 tags:
 elasticsearch5 categories: [elk,elasticsearch5]   elasticsearch 日志提示 overhead, 导致集群出现问题
 问题说明   elasticsearch 日志提示 overhead [2020-03-12T14:38:03,565][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][old][3008939][256208] duration [18.4s], collections [1]/[18.9s], total [18.4s]/[5.7h], memory [7.3gb]-&amp;gt;[7.3gb]/[7.9gb], all_pools {[young] [17.5mb]-&amp;gt;[3.3mb]/[532.5mb]}{[survivor] [0b]-&amp;gt;[0b]/[66.5mb]}{[old] [7.3gb]-&amp;gt;[7.3gb]/[7.3gb]} [2020-03-12T14:38:03,593][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][3008939] overhead, spent [18.4s] collecting in the last [18.9s] [2020-03-12T14:37:44,632][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][old][3008938][256207] duration [24.8s], collections [1]/[25.5s], total [24.8s]/[5.7h], memory [7.3gb]-&amp;gt;[7.3gb]/[7.9gb], all_pools {[young] [8.</description>
			<content type="html"><![CDATA[<p>title: es集群节点出现overhead脱机的问题
copyright: true
toc: true
date: 2020-03-12 15:23:35
tags:</p>
<ul>
<li>elasticsearch5
categories:</li>
<li>[elk,elasticsearch5]</li>
</ul>
<hr>
<p>elasticsearch 日志提示 overhead, 导致集群出现问题</p>
<!--more -->
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5>  问题说明 </font>
</center>
<h3 id="elasticsearch-日志提示-overhead">elasticsearch 日志提示 overhead</h3>
<pre><code>[2020-03-12T14:38:03,565][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][old][3008939][256208] duration [18.4s], collections [1]/[18.9s], total [18.4s]/[5.7h], memory [7.3gb]-&gt;[7.3gb]/[7.9gb], all_pools {[young] [17.5mb]-&gt;[3.3mb]/[532.5mb]}{[survivor] [0b]-&gt;[0b]/[66.5mb]}{[old] [7.3gb]-&gt;[7.3gb]/[7.3gb]}
[2020-03-12T14:38:03,593][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][3008939] overhead, spent [18.4s] collecting in the last [18.9s]


[2020-03-12T14:37:44,632][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][old][3008938][256207] duration [24.8s], collections [1]/[25.5s], total [24.8s]/[5.7h], memory [7.3gb]-&gt;[7.3gb]/[7.9gb], all_pools {[young] [8.5mb]-&gt;[17.5mb]/[532.5mb]}{[survivor] [0b]-&gt;[0b]/[66.5mb]}{[old] [7.3gb]-&gt;[7.3gb]/[7.3gb]}
[2020-03-12T14:37:44,632][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][3008938] overhead, spent [24.8s] collecting in the last [25.5s]
</code></pre><p>查看elasticsearch 配置 heap size 是8G</p>
<p>ES 内存使用和GC指标——默认情况下，主节点每30秒会去检查其他节点的状态，如果任何节点的垃圾回收时间超过30秒（Garbage collection duration），则会导致主节点任务该节点脱离集群。</p>
<p>设置过大的heap会导致GC时间过长，这些长时间的停顿（stop-the-world）会让集群错误的认为该节点已经脱离。</p>
<p>所以通过增加ping_timeout的时间，和增加ping_retries的次数来防止节点错误的脱离集群，可以使节点有充足的时间进行full GC。</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5>  问题解决 </font>
</center>
<h3 id="这里将默认的超时时间增加-增加重试次数-增加间隔时间">这里将默认的超时时间增加, 增加重试次数, 增加间隔时间</h3>
<pre><code>#超时时间设为5分钟，超过6次心跳没有回应，则认为该节点脱离master，每隔60s发送一次心跳。
 discovery.zen.fd.ping_timeout: 300s
 discovery.zen.fd.ping_retries: 6
 discovery.zen.fd.ping_interval: 60s
</code></pre><center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5>  gc 垃圾回收算法 </font>
</center>
<blockquote>
<p>摘自原文: <a href="https://www.jianshu.com/p/1f450826f62e">https://www.jianshu.com/p/1f450826f62e</a></p>
</blockquote>
<h3 id="标记-清除-算法mark-sweep">标记-清除 算法(Mark Sweep)</h3>
<p>该算法很简单，使用通过可达性分析分析方法标记出垃圾，然后直接回收掉垃圾区域。它的一个显著问题是一段时间后，内存会出现大量碎片，导致虽然碎片总和很大，但无法满足一个大对象的内存申请，从而导致 OOM，而过多的内存碎片（需要类似链表的数据结构维护），也会导致标记和清除的操作成本高，效率低下，如下图所示：</p>
<center>
<img src="//zhangzw001.github.io/images/38/gc1.jpg">
</center>
<h3 id="复制算法copying">复制算法(Copying)</h3>
<p>有人提出了复制算法。它将可用内存一分为二，每次只用一块，当这一块内存不够用时，便触发 GC，将当前存活对象复制(Copy)到另一块上，以此往复。这种算法高效的原因在于分配内存时只需要将指针后移，不需要维护链表等。但它最大的问题是对内存的浪费，使用率只有 50%</p>
<center>
<img src="//zhangzw001.github.io/images/38/gc2.jpg">
</center>
<h3 id="标记-整理算法mark-compact">标记-整理算法(Mark Compact)</h3>
<p>该算法解决了第1中算法的内存碎片问题，它会在回收阶段将所有内存做整理</p>
<center>
<img src="//zhangzw001.github.io/images/38/gc3.jpg">
</center>
<h3 id="分代收集算法generation-collection">分代收集算法(Generation Collection)</h3>
<p>既然大部分 Java 对象是朝生夕死的，那么我们将内存按照 Java 生存时间分为 新生代(Young) 和 老年代(Old)，前者存放短命僧，后者存放长寿佛，当然长寿佛也是由短命僧升级上来的。然后针对两者可以采用不同的回收算法，比如对于新生代采用复制算法会比较高效，而对老年代可以采用标记-清除或者标记-整理算法。这种算法也是最常用的。JVM Heap 分代后的划分一般如下所示，新生代一般会分为 Eden、Survivor0、Survivor1区，便于使用复制算法。</p>
<center>
<img src="//zhangzw001.github.io/images/38/gc4.jpg">
</center>
<p>将内存分代后的 GC 过程一般类似下图所示：</p>
<center>
<img src="//zhangzw001.github.io/images/38/gc5.jpg">
</center>
<p>1 对象一般都是先在 Eden区创建
2 当Eden区满，触发 Young GC，此时将 Eden中还存活的对象复制到 S0中，并清空 Eden区后继续为新的对象分配内存
3 当Eden区再次满后，触发又一次的 Young GC，此时会将 Eden和S0中存活的对象复制到 S1中，然后清空Eden和S0后继续为新的对象分配内存
4 每经过一次 Young GC，存活下来的对象都会将自己存活次数加1，当达到一定次数后，会随着一次 Young GC 晋升到 Old区
5 Old区也会在合适的时机进行自己的 GC</p>
<center>
<img src="//zhangzw001.github.io/images/dockerniu.jpeg" width = "100" height = "100" style="border: 0"/>
<font color="blue" face="黑体" size=5>  elasticsearch gc说明 </font>
</center>
<p>Elasticsearch 默认的 GC 配置是CMS GC ，其 Young 区用 ParNew，Old 区用CMS，大家可以在 config/jvm.options中看到如下的配置：</p>
<pre><code>## GC configuration
-XX:+UseConcMarkSweepGC
-XX:CMSInitiatingOccupancyFraction=75
-XX:+UseCMSInitiatingOccupancyOnly
</code></pre><h3 id="何时进行回收">何时进行回收</h3>
<pre><code>1 Young 区的GC 都是在 Eden 区满时触发
2 Serial Old 和 Parallel Old 在 Old 区是在 Young GC 时预测Old 区是否可以为 young 区 promote 到 old 区 的 object 分配空间，如果不可用则触发 Old GC。这个也可以理解为是 Old区满时。
3 CMS GC 是在 Old 区大小超过一定比例后触发，而不是 Old 区满。这个原因在于 CMS GC 是并发的算法，也就是说在 GC 线程收集垃圾的时候，用户线程也在运行，因此需要预留一些 Heap 空间给用户线程使用，防止由于无法分配空间而导致 Full GC 发生。
</code></pre><h3 id="gc-日志说明">gc 日志说明</h3>
<pre><code>[2020-03-12T14:38:03,565][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][old][3008939][256208] duration [18.4s], collections [1]/[18.9s], total [18.4s]/[5.7h], memory [7.3gb]-&gt;[7.3gb]/[7.9gb], all_pools {[young] [17.5mb]-&gt;[3.3mb]/[532.5mb]}{[survivor] [0b]-&gt;[0b]/[66.5mb]}{[old] [7.3gb]-&gt;[7.3gb]/[7.3gb]}

[2020-03-12T14:38:03,593][WARN ][o.e.m.j.JvmGcMonitorService] [es7-u] [gc][3008939] overhead, spent [18.4s] collecting in the last [18.9s]
</code></pre><p>本次是old gc, 这是第3008939次GC检查, 从java启动至今这是第256208次 gc 共花18.4s, [从上次检查至今共发生一次gc][从上次检查至今已经过去18.9s],[本次gc18.4s]/[从 JVM 启动至今发生的 GC 总耗时为5.7h],  [ GC 前 Heap memory 空间]-&gt;[GC 后 Heap memory 空间]/[Heap memory 总空间]</p>
<p>{[young 区][GC 前 Memory ]-&gt;[GC后 Memory]/[young区 Memory 总大小] } {[survivor 区][GC 前 Memory ]-&gt;[GC后 Memory]/[survivor区 Memory 总大小] }{[old 区][GC 前 Memory ]-&gt;[GC后 Memory]/[old区 Memory 总大小] }</p>
]]></content>
		</item>
		
	</channel>
</rss>
